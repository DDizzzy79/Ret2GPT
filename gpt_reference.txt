
This is example3/attachment-9.exe.c.
//
// This file was generated by the Retargetable Decompiler
// Website: https://retdec.com
//

#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <windows.h>

// ---------------- Integer Types Definitions -----------------

typedef int64_t int128_t;

// ------------------------ Structures ------------------------

struct struct1 {
    int32_t e0;
    int32_t e1;
    int32_t e2;
    int32_t e3;
};

struct struct2 {
    int32_t e0;
    int32_t e1;
    int32_t e2;
    int32_t e3;
};

struct struct3 {
    int32_t e0;
    int32_t e1;
    int32_t e2;
    int32_t e3;
};

struct _EXCEPTION_POINTERS {
    struct _EXCEPTION_RECORD * e0;
    struct _CONTEXT * e1;
};

struct _EXCEPTION_RECORD {
    int32_t e0;
    int32_t e1;
    struct _EXCEPTION_RECORD * e2;
    int32_t * e3;
    int32_t e4;
    int32_t e5[1];
};

struct _FILETIME {
    int32_t e0;
    int32_t e1;
};

struct _LARGE_INTEGER {
    int64_t e0;
};

struct _M128A {
    int32_t e0;
    int64_t e1;
};

struct _CONTEXT {
    int32_t e0;
    int32_t e1;
    int32_t e2;
    int32_t e3;
    int32_t e4;
    int32_t e5;
    int32_t e6;
    int32_t e7;
    int16_t e8;
    int16_t e9;
    int16_t e10;
    int16_t e11;
    int16_t e12;
    int16_t e13;
    int32_t e14;
    int32_t e15;
    int32_t e16;
    int32_t e17;
    int32_t e18;
    int32_t e19;
    int32_t e20;
    int32_t e21;
    int32_t e22;
    int32_t e23;
    int32_t e24;
    int32_t e25;
    int32_t e26;
    int32_t e27;
    int32_t e28;
    int32_t e29;
    int32_t e30;
    int32_t e31;
    int32_t e32;
    int32_t e33;
    int32_t e34;
    int32_t e35;
    int32_t e36;
    int32_t e37;
    int32_t e38;
    struct _M128A e39[26];
    int32_t e40;
    int32_t e41;
    int32_t e42;
    int32_t e43;
    int32_t e44;
    int32_t e45;
};

struct _onexit_table_t {
    void (**e0)();
    void (**e1)();
    void (**e2)();
};

// ------------------- Function Prototypes --------------------

int32_t entry_point(void);
int32_t function_401000(void);
int32_t function_401010(int32_t a1);
int32_t function_401040(void);
int32_t function_401050(char a1);
int32_t function_401090(void);
int32_t function_4010b0(void);
int32_t function_4010d0(void);
int32_t function_4010f0(int32_t a1);
int32_t function_401130(int32_t a1);
int32_t function_401170(void);
int32_t function_401180(uint32_t a1, int32_t a2);
int32_t function_4014c0(void);
int32_t function_401560(uint32_t a1);
int32_t function_401700(void);
int32_t function_401750(int32_t a1);
int32_t function_401820(int32_t a1, uint32_t a2);
int32_t function_401960(char a1);
int32_t function_401aa0(void);
int32_t function_401ce0(void);
int32_t function_401d50(void);
int32_t function_401da0(void);
int32_t function_401dc0(void);
int32_t function_401de0(int32_t a1);
int32_t function_401e20(void);
int32_t function_401e40(void);
int32_t function_4023f0(int32_t a1);
int32_t function_4024f0(int32_t result);
int32_t function_402520(void);
int32_t function_402530(char a1);
int32_t function_402730(void);
int32_t function_402781(void);
int32_t function_4027b2(void);
int32_t function_4027d9(int32_t a1);
int32_t function_402805(void);
int32_t function_402813(int32_t a1);
int32_t function_402843(int32_t a1);
int32_t function_402851(char a1);
int32_t function_402874(void);
int32_t function_402927(void);
int32_t function_402939(void);
int32_t function_402ac5(int32_t a1, uint32_t a2);
int32_t function_402b09(void);
int32_t function_402b3b(int32_t a1);
int32_t function_402b74(int32_t a1);
int32_t function_402bfb(int32_t a1, int32_t a2);
int32_t function_402c8f(int32_t a1);
int32_t function_402cac(int32_t a1, int32_t a2);
int32_t function_402cd4(int32_t a1);
int32_t function_402d01(int32_t a1);
int32_t function_402d16(void);
int32_t function_402d19(int32_t ExceptionInfo);
int32_t function_402d41(int32_t a1);
int32_t function_402e3b(void);
int32_t function_402e53(void);
int32_t function_402e70(void);
int32_t function_402e75(void);
int32_t function_402ec2(void);
int32_t function_402f0d(void);
int32_t function_402f10(void);
int32_t function_402f14(void);
void function_402f1a(int32_t * ListHead);
int32_t function_402f26(void);
int32_t function_402f29(void);
int32_t function_402f50(void);
int32_t function_402f56(void);
int32_t function_402f73(void);
int32_t function_402f7f(void);
int32_t function_402f85(void);
int32_t function_402f8b(int32_t a1, int32_t a2);
int32_t function_4030a6(void);
int32_t function_4030ab(void);
int32_t (*function_4030ee(int32_t (*lpTopLevelExceptionFilter)(struct _EXCEPTION_POINTERS *)))(struct _EXCEPTION_POINTERS *);
int32_t function_4030fa(int32_t a1);
int32_t function_403150(void);
int32_t function_403158(void);
int32_t function_403184(void);
int32_t function_4031b0(int32_t * a1, int32_t a2, int32_t a3);
int32_t function_4031f5(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_403224(void);
int32_t function_4033f5(void);
int32_t function_403401(void);
int32_t function_403407(void);
void function_40340d(int32_t * pExceptionObject, int32_t * pThrowInfo);
int32_t function_403413(int32_t a1, int32_t a2, int32_t a3);
int32_t function_403419(void);
int32_t * function_40341f(int32_t * s, int32_t c, int32_t n);
int32_t function_403425(void);
int32_t function_40342b(int32_t Size);
int32_t * function_403431(int32_t size);
int32_t function_403437(int32_t ExceptionNum, struct _EXCEPTION_POINTERS * ExceptionPtr);
void function_40343d(int32_t a1);
void function_403443(int32_t pf);
int32_t function_403449(int32_t a1);
int32_t function_40344f(void);
char ** function_403455(void);
void function_40345b(void (**First)(), void (**Last)());
int32_t function_403461(int32_t (**First)(), int32_t (**Last)());
void function_403467(int32_t status);
void function_40346d(int32_t Code);
int32_t function_403473(int32_t Mode);
int32_t * function_403479(void);
char *** function_40347f(void);
void function_403485(void);
void function_40348b(void);
void function_403491(void (*Callback)(int32_t *, int32_t, int32_t *));
int32_t function_403497(int32_t Flag);
int32_t function_40349d(int32_t NewMode);
int32_t * function_4034a3(void);
int32_t function_4034a9(struct _onexit_table_t * Table);
int32_t function_4034af(struct _onexit_table_t * Table, int32_t (*Function)());
int32_t function_4034b5(int32_t a1, int32_t a2);
void function_4034bb(int32_t * ptr);
int32_t function_4034c1(int32_t * CurrentState, int32_t NewValue, int32_t Mask);
int32_t function_4034c7(void);
int32_t function_4034cd(int32_t result);
int32_t * function_403545(int32_t * dest, int32_t * src, int32_t n);
int32_t * function_40354b(int32_t * dest, int32_t * src, int32_t n);
int32_t function_403560(void);
int32_t function_403580(int32_t a1);
int32_t function_4035a0(void);
int32_t function_4035af(int32_t a1);
int32_t function_4035d0(void);
int32_t function_4035d8(void);
int32_t function_4035e7(int32_t a1);
int32_t function_403612(int32_t a1);
int32_t function_403632(int32_t a1);
int32_t function_403650(void);
int32_t function_40365b(void);
int32_t function_403666(void);
int32_t function_403671(void);
int32_t function_40367c(void);
int32_t function_40368e(int32_t a1);
int32_t function_4036c0(void);
int32_t function_4036c9(void);
int32_t function_4036d8(int32_t a1);
int32_t function_403700(void);
int32_t function_403708(void);
int32_t function_403710(void);
int32_t function_40371f(int32_t a1);
int32_t function_403742(int32_t a1);
int32_t function_40375d(void);

// --------------------- Global Variables ---------------------

int32_t g1 = 0; // 0x40414c
int32_t g2 = 0; // 0x404158
int32_t (**g3)() = NULL; // 0x40415c
int32_t (**g4)() = NULL; // 0x404168
int32_t g5 = 0x402851; // 0x404184
int32_t g6 = 0x401050; // 0x404194
int32_t g7 = 0x401050; // 0x4041a0
int32_t g8 = 0x401050; // 0x4041bc
char * g9[2] = {
    "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
    "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"
}; // 0x40428c
int32_t g10 = 0x401050; // 0x404304
int32_t g11 = -2; // 0x404b80
int32_t g12 = -2; // 0x404ba0
int32_t g13 = 0; // 0x404bbc
int32_t g14 = 0; // 0x404c20
int32_t g15 = 0; // 0x404c74
int32_t g16 = 0x44bf19b1; // 0x406004
int32_t g17 = -0x44bf19b2; // 0x406008
int32_t g18 = 1; // 0x40600c
int32_t g19 = 1; // 0x406010
int32_t g20 = 1; // 0x406014
int32_t g21 = 0; // 0x4060b0
int32_t g22 = 0; // 0x4060b8
int32_t g23 = 0; // 0x4060bc
char g24 = 0; // 0x4060c0
char g25 = 0; // 0x4060c1
struct _onexit_table_t * g26 = NULL; // 0x4060c4
int32_t g27 = 0; // 0x4060c8
int32_t g28 = 0; // 0x4060cc
int32_t g29 = 0; // 0x4060d0
int32_t g30 = 0; // 0x4060d4
int32_t g31 = 0; // 0x4060d8
int32_t g32 = 0; // 0x4060e0
int32_t g33 = 0; // 0x4060e4
int32_t g34 = 0; // 0x4060ec
int32_t g35 = 0; // 0x4060f0
int32_t g36 = 0; // 0x4060f4
int32_t g37 = 0; // 0x406130
int32_t g38 = 0; // 0x4061dc
int32_t g39 = 0; // 0x4061e0
int32_t g40 = 0; // 0x4061e4
int32_t g41 = 0; // 0x4061e8
int32_t g42 = 0; // 0x4061f0
int32_t g43 = 0; // 0x4061f4
int32_t g44 = 0; // 0x406400
int32_t g45 = 0; // 0x406408
int32_t g46 = 0; // 0x406410
int32_t g47 = 0; // 0x406418
int32_t g48 = 0; // 0x40641c
int32_t g49 = 0; // 0x406420
int32_t g50 = 0; // 0x406424
int32_t g51 = 0; // 0x406428
int32_t g52 = 0; // 0x40642c
int32_t g53;

// ------- Dynamically Linked Functions Without Header --------

int32_t _3f__3f_0_Lockit_40_std_40__40_QAE_40_H_40_Z(int32_t a1);
int32_t _3f__3f_1_Lockit_40_std_40__40_QAE_40_XZ(void);
int32_t _3f__3f_6_3f__24_basic_ostream_40_DU_3f__24_char_traits_40_D_40_std_40__40__40_std_40__40_QAEAAV01_40_P6AAAV01_40_AAV01_40__40_Z_40_Z(void);
int32_t _3f__3f_Bid_40_locale_40_std_40__40_QAEIXZ(int32_t a1);
int32_t _3f__Getcat_40__3f__24_ctype_40_D_40_std_40__40_SAIPAPBVfacet_40_locale_40_2_40_PBV42_40__40_Z(int32_t * a1, int32_t a2);
int32_t _3f__Getgloballocale_40_locale_40_std_40__40_CAPAV_Locimp_40_12_40_XZ(void);
int32_t _3f__Ipfx_40__3f__24_basic_istream_40_DU_3f__24_char_traits_40_D_40_std_40__40__40_std_40__40_QAE_N_N_40_Z(int32_t a1);
int32_t _3f__Osfx_40__3f__24_basic_ostream_40_DU_3f__24_char_traits_40_D_40_std_40__40__40_std_40__40_QAEXXZ(void);
int32_t _3f__Xlength_error_40_std_40__40_YAXPBD_40_Z(char * a1);
int32_t _3f_flush_40__3f__24_basic_ostream_40_DU_3f__24_char_traits_40_D_40_std_40__40__40_std_40__40_QAEAAV12_40_XZ(void);
int32_t _3f_getloc_40_ios_base_40_std_40__40_QBE_3f_AVlocale_40_2_40_XZ(int32_t * a1);
int32_t _3f_put_40__3f__24_basic_ostream_40_DU_3f__24_char_traits_40_D_40_std_40__40__40_std_40__40_QAEAAV12_40_D_40_Z(int32_t a1);
int32_t _3f_setstate_40__3f__24_basic_ios_40_DU_3f__24_char_traits_40_D_40_std_40__40__40_std_40__40_QAEXH_N_40_Z(int32_t a1);
int32_t _3f_sgetc_40__3f__24_basic_streambuf_40_DU_3f__24_char_traits_40_D_40_std_40__40__40_std_40__40_QAEHXZ(int32_t a1, int32_t a2);
int32_t _3f_snextc_40__3f__24_basic_streambuf_40_DU_3f__24_char_traits_40_D_40_std_40__40__40_std_40__40_QAEHXZ(int32_t a1, char a2);
int32_t _3f_sputc_40__3f__24_basic_streambuf_40_DU_3f__24_char_traits_40_D_40_std_40__40__40_std_40__40_QAEHD_40_Z(void);
int32_t _3f_sputn_40__3f__24_basic_streambuf_40_DU_3f__24_char_traits_40_D_40_std_40__40__40_std_40__40_QAE_JPBD_J_40_Z(void);
int32_t _3f_uncaught_exception_40_std_40__40_YA_NXZ(void);
int32_t _3f_widen_40__3f__24_basic_ios_40_DU_3f__24_char_traits_40_D_40_std_40__40__40_std_40__40_QBEDD_40_Z(int32_t a1, int32_t a2, int32_t a3);
int32_t __current_exception(int32_t a1, int32_t a2, int32_t a3);
int32_t __current_exception_context(void);
int32_t __CxxFrameHandler3(void);
int32_t * __p__commode(void);
void __setusermatherr(int32_t a1);
int32_t __std_exception_copy(int32_t a1);
int32_t __std_exception_destroy(int32_t a1);
int32_t __std_terminate(void);
void _c_exit(void);
int32_t _callnewh(int32_t a1);
void _cexit(void);
int32_t _configthreadlocale(int32_t a1);
int32_t _configure_narrow_argv(int32_t a1);
int32_t _controlfp_s(int32_t * a1, int32_t a2, int32_t a3);
int32_t _crt_atexit(int32_t a1, int32_t a2);
void _CxxThrowException(int32_t * a1, int32_t * a2);
int32_t _except_handler4_common(void);
char ** _get_initial_narrow_environment(void);
int32_t _initialize_narrow_environment(void);
int32_t _initialize_onexit_table(struct _onexit_table_t * a1);
void _initterm(void (**a1)(), void (**a2)());
int32_t _initterm_e(int32_t (**a1)(), int32_t (**a2)());
void _invalid_parameter_noinfo_noreturn(void);
int32_t _register_onexit_function(struct _onexit_table_t * a1, int32_t (*a2)());
void _register_thread_local_exe_atexit_callback(void (*a1)(int32_t *, int32_t, int32_t *));
int32_t _seh_filter_exe(int32_t a1, struct _EXCEPTION_POINTERS * a2);
void _set_app_type(int32_t a1);
int32_t _set_fmode(int32_t a1);
int32_t _set_new_mode(int32_t a1);
void InitializeSListHead(int32_t * a1);
int32_t terminate(void);

// ------------------------ Functions -------------------------

// Address range: 0x401000 - 0x40100c
int32_t function_401000(void) {
    // 0x401000
    return function_402d01(0x40375d);
}

// Address range: 0x401010 - 0x40103e
int32_t function_401010(int32_t a1) {
    // 0x401010
    int128_t v1; // 0x401010
    int128_t v2 = v1;
    int128_t v3 = __asm_xorps(v2, v2); // 0x401016
    int32_t result; // 0x401010
    *(int32_t *)result = (int32_t)&g6;
    __asm_movq(*(int64_t *)(result + 4), v3);
    __std_exception_copy(a1 + 4);
    return result;
}

// Address range: 0x401040 - 0x40104e
int32_t function_401040(void) {
    // 0x401040
    int32_t v1; // 0x401040
    int32_t v2 = *(int32_t *)(v1 + 4); // 0x401040
    return v2 != 0 ? v2 : (int32_t)"Unknown exception";
}

// Address range: 0x401050 - 0x401081
int32_t function_401050(char a1) {
    // 0x401050
    int32_t result; // 0x401050
    *(int32_t *)result = (int32_t)&g6;
    __std_exception_destroy(result + 4);
    if ((a1 & 1) != 0) {
        // 0x40106f
        function_402843(result);
    }
    // 0x40107a
    return result;
}

// Address range: 0x401090 - 0x4010a2
int32_t function_401090(void) {
    // 0x401090
    int32_t v1; // 0x401090
    *(int32_t *)v1 = (int32_t)&g6;
    return __std_exception_destroy(v1 + 4);
}

// Address range: 0x4010b0 - 0x4010c8
int32_t function_4010b0(void) {
    // 0x4010b0
    int128_t v1; // 0x4010b0
    int128_t v2 = v1;
    int128_t v3 = __asm_xorps(v2, v2); // 0x4010b0
    int32_t result; // 0x4010b0
    int32_t v4 = result + 4; // 0x4010b5
    __asm_movq(*(int64_t *)v4, v3);
    *(int32_t *)v4 = (int32_t)"bad array new length";
    *(int32_t *)result = (int32_t)&g8;
    return result;
}

// Address range: 0x4010d0 - 0x4010ec
int32_t function_4010d0(void) {
    // 0x4010d0
    function_4010b0();
    int32_t v1; // bp-16, 0x4010d0
    _CxxThrowException(&v1, &g14);
    // UNREACHABLE
}

// Address range: 0x4010f0 - 0x401124
int32_t function_4010f0(int32_t a1) {
    // 0x4010f0
    int128_t v1; // 0x4010f0
    int128_t v2 = v1;
    int128_t v3 = __asm_xorps(v2, v2); // 0x4010f6
    int32_t result; // 0x4010f0
    int32_t * v4 = (int32_t *)result; // 0x4010fd
    *v4 = (int32_t)&g6;
    __asm_movq(*(int64_t *)(result + 4), v3);
    __std_exception_copy(a1 + 4);
    *v4 = (int32_t)&g8;
    return result;
}

// Address range: 0x401130 - 0x401164
int32_t function_401130(int32_t a1) {
    // 0x401130
    int128_t v1; // 0x401130
    int128_t v2 = v1;
    int128_t v3 = __asm_xorps(v2, v2); // 0x401136
    int32_t result; // 0x401130
    int32_t * v4 = (int32_t *)result; // 0x40113d
    *v4 = (int32_t)&g6;
    __asm_movq(*(int64_t *)(result + 4), v3);
    __std_exception_copy(a1 + 4);
    *v4 = (int32_t)&g7;
    return result;
}

// Address range: 0x401170 - 0x401180
int32_t function_401170(void) {
    // 0x401170
    _3f__Xlength_error_40_std_40__40_YAXPBD_40_Z("string too long");
    __asm_int3();
    __asm_int3();
    __asm_int3();
    __asm_int3();
    return __asm_int3();
}

// Address range: 0x401180 - 0x4014be
int32_t function_401180(uint32_t a1, int32_t a2) {
    int32_t v1 = __readfsdword(0); // bp-16, 0x401190
    __writefsdword(0, (int32_t)&v1);
    int32_t result; // 0x401180
    *(int32_t *)result = 0;
    int32_t * v2 = (int32_t *)(result + 16); // 0x4011d0
    *v2 = 0;
    int32_t v3 = a1 + 2 & -4; // 0x4011e3
    int32_t * v4 = (int32_t *)(result + 20); // 0x4011ee
    *v4 = 15;
    int32_t v5 = *(int32_t *)((4 * a2 & 1020) + (int32_t)&g9); // 0x4011fb
    *(char *)result = 0;
    int32_t v6 = v3; // bp-128, 0x401211
    function_401560(v3);
    if (a1 == 0) {
        // 0x4014aa
        __writefsdword(0, v1);
        return result;
    }
    unsigned char v7 = (char)a2 != 0 ? 46 : 61; // 0x4011f5
    int32_t v8 = v7;
    int32_t v9 = 2; // 0x40124d
    int32_t v10 = (a1 - 1) / 3 + 1; // 0x40124d
    int32_t v11 = &v6; // 0x40124d
    int32_t v12 = result + 2; // 0x40124d
    int32_t v13; // 0x401180
    int32_t v14; // 0x401180
    int32_t v15; // 0x401180
    int32_t v16; // 0x401180
    int32_t v17; // 0x401180
    int32_t v18; // 0x401180
    uint32_t v19; // 0x401180
    while (true) {
      lab_0x401250:
        // 0x401250
        v15 = v12;
        int32_t v20 = v11;
        v19 = v9;
        char * v21 = (char *)(v15 - 2); // 0x401250
        uint32_t v22 = *v2; // 0x401254
        uint32_t v23 = *v4; // 0x401257
        char v24 = *(char *)(v5 + (int32_t)(*v21 / 4)); // 0x40125d
        int32_t v25; // 0x401180
        if (v22 >= v23) {
            // 0x401280
            *(int32_t *)(v20 - 4) = (int32_t)v24;
            *(int32_t *)(v20 - 8) = 0;
            int32_t v26 = v20 - 12; // 0x40128a
            *(int32_t *)v26 = v22;
            function_401960(0);
            v25 = v26;
        } else {
            int32_t v27 = v22 + 1;
            *v2 = v27;
            int32_t v28 = v23 < 16 ? result : v22;
            *(char *)(v28 + v22) = v24;
            *(char *)(v28 + v27) = 0;
            v25 = v20;
        }
        int32_t v29 = v25;
        uint32_t v30 = *v4; // 0x40129c
        unsigned char v31 = 16 * *v21 & 48;
        if (v15 + (result ^ -1) >= a1) {
            char v32 = *(char *)(v5 + (int32_t)v31); // 0x4013ec
            uint32_t v33 = *v2; // 0x4013ef
            int32_t v34; // 0x401180
            if (v33 >= v30) {
                // 0x401412
                *(int32_t *)(v29 - 4) = (int32_t)v32;
                *(int32_t *)(v29 - 8) = 0;
                int32_t v35 = v29 - 12; // 0x40141c
                *(int32_t *)v35 = v33;
                function_401960(0);
                v34 = v35;
            } else {
                int32_t v36 = v33 + 1;
                *v2 = v36;
                int32_t v37 = v30 < 16 ? result : v33;
                *(char *)(v37 + v33) = v32;
                *(char *)(v36 + v37) = 0;
                v34 = v29;
            }
            int32_t v38 = v34;
            uint32_t v39 = *v2; // 0x401424
            uint32_t v40 = *v4; // 0x401427
            int32_t v41; // 0x401180
            if (v39 >= v40) {
                // 0x40144d
                *(int32_t *)(v38 - 4) = v8;
                *(int32_t *)(v38 - 8) = 0;
                int32_t v42 = v38 - 12; // 0x401458
                *(int32_t *)v42 = v39;
                function_401960(0);
                v41 = v42;
            } else {
                int32_t v43 = v39 + 1;
                *v2 = v43;
                int32_t v44 = v40 < 16 ? result : v39;
                *(char *)(v44 + v39) = v7;
                *(char *)(v44 + v43) = 0;
                v41 = v38;
            }
            int32_t v45 = v41;
            int32_t v46 = *v2; // 0x401460
            uint32_t v47 = *v4; // 0x401463
            v13 = v46;
            v16 = v47;
            v17 = v45;
            if (v46 >= v47) {
                // 0x401486
                *(int32_t *)(v45 - 4) = v8;
                int32_t v48 = v45 - 8; // 0x40148b
                *(int32_t *)v48 = 0;
                v14 = v46;
                v18 = v48;
                goto lab_0x40148e;
            } else {
                goto lab_0x40146a;
            }
        } else {
            char * v49 = (char *)(v15 - 1); // 0x4012ad
            char v50 = *(char *)(v5 + (int32_t)(*v49 / 16 | v31)); // 0x4012b9
            uint32_t v51 = *v2; // 0x4012bc
            int32_t v52; // 0x401180
            if (v51 >= v30) {
                // 0x4012df
                *(int32_t *)(v29 - 4) = (int32_t)v50;
                *(int32_t *)(v29 - 8) = 0;
                int32_t v53 = v29 - 12; // 0x4012e9
                *(int32_t *)v53 = v51;
                function_401960(0);
                v52 = v53;
            } else {
                int32_t v54 = v51 + 1;
                *v2 = v54;
                int32_t v55 = v30 < 16 ? result : v51;
                *(char *)(v55 + v51) = v50;
                *(char *)(v54 + v55) = 0;
                v52 = v29;
            }
            int32_t v56 = v52;
            uint32_t v57 = *v4; // 0x4012fb
            unsigned char v58 = 4 * *v49 & 60;
            if (v19 >= a1) {
                uint32_t v59 = *v2; // 0x401397
                if (v59 >= v57) {
                    // 0x4013ba
                    char v60; // 0x401394
                    *(int32_t *)(v56 - 4) = (int32_t)v60;
                    *(int32_t *)(v56 - 8) = 0;
                    int32_t v61 = v56 - 12; // 0x4013c4
                    *(int32_t *)v61 = v59;
                    function_401960(0);
                } else {
                    int32_t v62 = v59 + 1;
                    *v2 = v62;
                    int32_t v63 = v57 < 16 ? result : v59;
                    *(char *)(v63 + v59) = *(char *)(v5 + (int32_t)v58);
                    *(char *)(v62 + v63) = 0;
                }
                int32_t v64 = v56;
                int32_t v65 = *v2; // 0x4013cc
                uint32_t v66 = *v4; // 0x4013cf
                v13 = v65;
                v16 = v66;
                v17 = v64;
                if (v65 < v66) {
                    goto lab_0x40146a;
                } else {
                    // 0x4013da
                    *(int32_t *)(v64 - 4) = v8;
                    int32_t v67 = v64 - 8; // 0x4013e1
                    *(int32_t *)v67 = 0;
                    v14 = v65;
                    v18 = v67;
                    goto lab_0x40148e;
                }
            } else {
                char * v68 = (char *)v15; // 0x40130a
                char v69 = *(char *)(v5 + (int32_t)(*v68 / 64 | v58)); // 0x401315
                uint32_t v70 = *v2; // 0x401318
                int32_t v71; // 0x401180
                if (v70 >= v57) {
                    // 0x40133b
                    *(int32_t *)(v56 - 4) = (int32_t)v69;
                    *(int32_t *)(v56 - 8) = 0;
                    int32_t v72 = v56 - 12; // 0x401345
                    *(int32_t *)v72 = v70;
                    function_401960(0);
                    v71 = v72;
                } else {
                    int32_t v73 = v70 + 1;
                    *v2 = v73;
                    int32_t v74 = v57 < 16 ? result : v70;
                    *(char *)(v74 + v70) = v69;
                    *(char *)(v73 + v74) = 0;
                    v71 = v56;
                }
                int32_t v75 = v71;
                uint32_t v76 = *v4; // 0x401356
                char v77 = *(char *)(v5 + (int32_t)(*v68 & 63)); // 0x401359
                uint32_t v78 = *v2; // 0x40135c
                if (v78 >= v76) {
                    // 0x401382
                    *(int32_t *)(v75 - 4) = (int32_t)v77;
                    int32_t v79 = v75 - 8; // 0x401389
                    *(int32_t *)v79 = 0;
                    v14 = v78;
                    v18 = v79;
                    goto lab_0x40148e;
                } else {
                    int32_t v80 = v78 + 1;
                    *v2 = v80;
                    int32_t v81 = v76 < 16 ? result : v78;
                    *(char *)(v81 + v78) = v77;
                    *(char *)(v80 + v81) = 0;
                    v11 = v75;
                    goto lab_0x401496;
                }
            }
        }
    }
  lab_0x4014aa:
    // 0x4014aa
    __writefsdword(0, v1);
    return result;
  lab_0x40146a:;
    int32_t v82 = v13 + 1;
    *v2 = v82;
    int32_t v83 = v16 < 16 ? result : v13;
    *(char *)(v83 + v13) = v7;
    *(char *)(v83 + v82) = 0;
    v11 = v17;
    goto lab_0x401496;
  lab_0x40148e:;
    int32_t v84 = v18 - 4; // 0x40148e
    *(int32_t *)v84 = v14;
    function_401960((char)&g53);
    v11 = v84;
    goto lab_0x401496;
  lab_0x401496:
    // 0x401496
    v10--;
    v9 = v19 + 3;
    v12 = v15 + 3;
    if (v10 == 0) {
        // break -> 0x4014aa
        goto lab_0x4014aa;
    }
    goto lab_0x401250;
}

// Address range: 0x4014c0 - 0x401560
int32_t function_4014c0(void) {
    int32_t v1 = __readfsdword(0); // bp-16, 0x4014d0
    __writefsdword(0, (int32_t)&v1);
    int32_t result; // 0x4014c0
    function_401750(result);
    function_401180(result, 0);
    if (result < 16) {
        // 0x40154e
        __writefsdword(0, v1);
        return result;
    }
    if (result < 4095) {
        // 0x401544
        int32_t v2; // 0x4014c0
        function_402843(v2);
        // 0x40154e
        __writefsdword(0, v1);
        return result;
    }
    int32_t v3 = result - 4;
    int32_t v4 = *(int32_t *)v3; // 0x40152e
    if (v3 - v4 >= 32) {
        // 0x40153e
        _invalid_parameter_noinfo_noreturn();
    }
    // 0x401544
    function_402843(v4);
    // 0x40154e
    __writefsdword(0, v1);
    return result;
}

// Address range: 0x401560 - 0x4016fc
int32_t function_401560(uint32_t a1) {
    // 0x401560
    int32_t v1; // 0x401560
    int32_t * v2 = (int32_t *)(v1 + 16); // 0x40156d
    int32_t result = *v2; // 0x40156d
    if (result > a1) {
        // 0x4016e4
        return result;
    }
    int32_t * v3 = (int32_t *)(v1 + 20); // 0x40157c
    uint32_t v4 = *v3; // 0x40157c
    if (v4 == a1) {
        // 0x4016e4
        return result;
    }
    if (v4 >= a1) {
        // 0x40169c
        if (a1 >= 16 || v4 < 16) {
            // 0x4016e4
            return result;
        }
        int32_t * v5 = (int32_t *)v1; // 0x4016ac
        memcpy(v5, v5, result + 1);
        int32_t v6; // 0x401560
        if (*v3 >= 4095) {
            int32_t v7 = v1 - 4;
            int32_t v8 = *(int32_t *)v7; // 0x4016c0
            v6 = v8;
            if (v7 - v8 >= 32) {
                // 0x4016ec
                _invalid_parameter_noinfo_noreturn();
                // 0x4016f2
                function_401170();
                // 0x4016f7
                function_4010d0();
                // UNREACHABLE
            }
        }
        int32_t result2 = function_402843(v6); // 0x4016d4
        *v3 = 15;
        // 0x4016e4
        return result2;
    }
    if (0x7fffffff - result < a1 - result) {
        // 0x4016f2
        function_401170();
        // 0x4016f7
        function_4010d0();
        // UNREACHABLE
    }
    int32_t v9 = a1 | 15; // 0x4015a8
    int32_t v10 = 0x7fffffff; // 0x4015ad
    int32_t v11 = -0x80000000; // 0x4015ad
    int32_t v12; // 0x401560
    int32_t v13; // 0x401560
    int32_t v14; // 0x401560
    if (v9 < 0) {
        goto lab_0x4015f5;
    } else {
        uint32_t v15 = v4 / 2; // 0x4015b8
        v10 = 0x7fffffff;
        v11 = -0x80000000;
        if (v4 > (v15 ^ 0x7fffffff)) {
            goto lab_0x4015f5;
        } else {
            int32_t v16 = v15 + v4; // 0x4015ca
            int32_t v17 = v9; // 0x401560
            if (v9 < v16) {
                // 0x4015d6
                v17 = v16;
                if (v16 == -1) {
                    // 0x4016f7
                    function_4010d0();
                    // UNREACHABLE
                }
            }
            int32_t v18 = v17 + 1;
            if (v18 < 0x1000) {
                int32_t v19 = function_402813(v18); // 0x401616
                v14 = v17;
                v12 = v18;
                v13 = v19;
                goto lab_0x401624;
            } else {
                // 0x4015ea
                v10 = v17;
                v11 = v18;
                if (v18 > 0xffffffdc) {
                    // 0x4016f7
                    function_4010d0();
                    // UNREACHABLE
                }
                goto lab_0x4015f5;
            }
        }
    }
  lab_0x4015f5:;
    int32_t v20 = function_402813(v10 + 36); // 0x4015f6
    if (v20 == 0) {
        // 0x4016ec
        _invalid_parameter_noinfo_noreturn();
        // 0x4016f2
        function_401170();
        // 0x4016f7
        function_4010d0();
        // UNREACHABLE
    }
    int32_t v21 = v20 + 35 & -32; // 0x401609
    *(int32_t *)(v21 - 4) = v20;
    v14 = v10;
    v12 = v11;
    v13 = v21;
    goto lab_0x401624;
  lab_0x401624:
    // 0x401624
    *v3 = v14;
    int32_t v22 = result + 1; // 0x40162d
    *v2 = a1;
    int32_t * v23 = (int32_t *)v13;
    if (v4 < 16) {
        int32_t * v24 = (int32_t *)v1; // 0x401683
        memcpy(v23, v24, v22);
        *v24 = v13;
        *v2 = result;
        return result;
    }
    // 0x401638
    memcpy(v23, (int32_t *)v12, v22);
    if (v4 < 4095) {
        // 0x401666
        function_402843(v12);
        *(int32_t *)v1 = v13;
        *v2 = result;
        return result;
    }
    int32_t v25 = v12 - 4;
    int32_t v26 = *(int32_t *)v25; // 0x401650
    if (v25 - v26 < 32) {
        // 0x401666
        function_402843(v26);
        *(int32_t *)v1 = v13;
        *v2 = result;
        return result;
    }
    // 0x4016ec
    _invalid_parameter_noinfo_noreturn();
    // 0x4016f2
    function_401170();
    // 0x4016f7
    function_4010d0();
    // UNREACHABLE
}

// Address range: 0x401700 - 0x401750
int32_t function_401700(void) {
    // 0x401700
    int32_t v1; // 0x401700
    int32_t * v2 = (int32_t *)(v1 + 20); // 0x401703
    uint32_t v3 = *v2; // 0x401703
    if (v3 < 16) {
        // 0x401732
        *(int32_t *)(v1 + 16) = 0;
        *v2 = 15;
        *(char *)v1 = 0;
        int32_t result; // 0x401700
        return result;
    }
    int32_t v4 = v3; // 0x401714
    if (v3 >= 4095) {
        int32_t v5 = v3 - 4;
        v4 = *(int32_t *)v5;
        if (v5 - v4 >= 32) {
            // 0x401745
            _invalid_parameter_noinfo_noreturn();
            __asm_int3();
            __asm_int3();
            __asm_int3();
            __asm_int3();
            return __asm_int3();
        }
    }
    int32_t result2 = function_402843(v4);
    *(int32_t *)(v1 + 16) = 0;
    *v2 = 15;
    *(char *)v1 = 0;
    return result2;
}

// Address range: 0x401750 - 0x401815
int32_t function_401750(int32_t a1) {
    // 0x401750
    int32_t result; // 0x401750
    int32_t * v1 = (int32_t *)result; // 0x40175b
    *v1 = 0;
    int32_t * v2 = (int32_t *)(result + 16); // 0x401761
    *v2 = 0;
    int32_t * v3 = (int32_t *)(result + 20); // 0x401768
    *v3 = 0;
    uint32_t v4 = *(int32_t *)(a1 + 16); // 0x401773
    int32_t v5 = a1; // 0x401779
    if (*(int32_t *)(a1 + 20) >= 16) {
        // 0x40177b
        v5 = *(int32_t *)a1;
    }
    // 0x40177d
    int32_t v6; // 0x401750
    if (v4 < 16) {
        // 0x401782
        __asm_movups_1(*(int128_t *)&v6, __asm_movups(*(int128_t *)v5));
        *v2 = v4;
        *v3 = 15;
        return result;
    }
    int32_t v7 = v4 | 15; // 0x4017a3
    int32_t v8 = v7 > -1 ? v7 : 0x7fffffff; // 0x4017a8
    int32_t v9 = v8 + 1; // 0x4017ab
    int32_t v10 = v9; // 0x4017b3
    int32_t v11; // 0x401750
    if (v9 < 0x1000) {
        goto lab_0x4017de;
    } else {
        int32_t v12 = v8 + 36; // 0x4017b5
        v6 = v12;
        int32_t v13 = function_402813(v12); // 0x4017bd
        if (v13 == 0) {
            // 0x4017d4
            _invalid_parameter_noinfo_noreturn();
            v10 = &g53;
            goto lab_0x4017de;
        } else {
            int32_t v14 = v13 + 35 & -32; // 0x4017cc
            v6 = v14;
            *(int32_t *)(v14 - 4) = v13;
            v11 = v6;
            goto lab_0x4017ed;
        }
    }
  lab_0x4017de:;
    int32_t v15 = function_402813(v10); // 0x4017df
    v6 = v15;
    v11 = v15;
    goto lab_0x4017ed;
  lab_0x4017ed:
    // 0x4017ed
    *v1 = v11;
    memcpy((int32_t *)v6, (int32_t *)v5, v4 + 1);
    *v2 = v4;
    *v3 = v8;
    return result;
}

// Address range: 0x401820 - 0x401959
int32_t function_401820(int32_t a1, uint32_t a2) {
    // 0x401820
    int32_t result; // 0x401820
    int32_t * v1 = (int32_t *)(result + 20); // 0x401834
    uint32_t v2 = *v1; // 0x401834
    if (v2 >= a2) {
        int32_t v3 = v2 < 16 ? result : v2;
        *(int32_t *)(result + 16) = a2;
        memmove((int32_t *)v3, (int32_t *)a1, a2);
        *(char *)(v3 + a2) = 0;
        return result;
    }
    if (a2 <= 0xffffffff) {
        // 0x40194f
        function_401170();
        // 0x401954
        function_4010d0();
        // UNREACHABLE
    }
    int32_t v4 = a2 | 15; // 0x401872
    int32_t v5 = 0x7fffffff; // 0x40187b
    int32_t v6; // 0x401820
    int32_t v7; // 0x401820
    if (v4 > -1) {
        uint32_t v8 = v2 / 2; // 0x40188b
        v5 = 0x7fffffff;
        if (v2 > (v8 ^ 0x7fffffff)) {
            goto lab_0x4018c3;
        } else {
            int32_t v9 = v8 + v2; // 0x40189a
            int32_t v10 = v4; // 0x401820
            if (v4 < v9) {
                // 0x4018a2
                v10 = v9;
                if (v9 == -1) {
                    // 0x401954
                    function_4010d0();
                    // UNREACHABLE
                }
            }
            uint32_t v11 = v10 + 1;
            if (v11 < 0x1000) {
                // 0x4018e1
                v7 = v10;
                v6 = function_402813(v11);
                goto lab_0x4018ee;
            } else {
                // 0x4018b8
                v5 = v10;
                if (v11 > 0xffffffdc) {
                    // 0x401954
                    function_4010d0();
                    // UNREACHABLE
                }
                goto lab_0x4018c3;
            }
        }
    } else {
        goto lab_0x4018c3;
    }
  lab_0x4018c3:;
    int32_t v12 = function_402813(v5 + 36); // 0x4018c4
    if (v12 == 0) {
        // 0x401949
        _invalid_parameter_noinfo_noreturn();
        // 0x40194f
        function_401170();
        // 0x401954
        function_4010d0();
        // UNREACHABLE
    }
    int32_t v13 = v12 + 35 & -32; // 0x4018d5
    *(int32_t *)(v13 - 4) = v12;
    v7 = v5;
    v6 = v13;
    goto lab_0x4018ee;
  lab_0x4018ee:
    // 0x4018ee
    *(int32_t *)(result + 16) = a2;
    *v1 = v7;
    memcpy((int32_t *)v6, (int32_t *)a1, a2);
    *(char *)(v6 + a2) = 0;
    if (v2 < 16) {
        // 0x40193c
        *(int32_t *)result = v6;
        return result;
    }
    int32_t v14 = v2 + 1; // 0x401913
    if (v14 < 0x1000) {
        // 0x401932
        function_402843(v14);
        // 0x40193c
        *(int32_t *)result = v6;
        return result;
    }
    int32_t v15 = v2 - 3;
    int32_t v16 = *(int32_t *)v15; // 0x401920
    if (v15 - v16 < 32) {
        // 0x401932
        function_402843(v16);
        // 0x40193c
        *(int32_t *)result = v6;
        return result;
    }
    // 0x401949
    _invalid_parameter_noinfo_noreturn();
    // 0x40194f
    function_401170();
    // 0x401954
    function_4010d0();
    // UNREACHABLE
}

// Address range: 0x401960 - 0x401a99
int32_t function_401960(char a1) {
    // 0x401960
    int32_t result; // 0x401960
    int32_t * v1 = (int32_t *)(result + 16); // 0x401972
    int32_t v2 = *v1; // 0x401972
    if (v2 == 0x7fffffff) {
        // 0x401a8f
        function_401170();
        // 0x401a94
        function_4010d0();
        // UNREACHABLE
    }
    int32_t * v3 = (int32_t *)(result + 20); // 0x401983
    uint32_t v4 = *v3; // 0x401983
    int32_t v5 = v2 + 1;
    int32_t v6 = v5 | 15; // 0x401989
    int32_t v7 = -0x7fffffdd; // 0x401991
    int32_t v8 = 0x7fffffff; // 0x401991
    int32_t v9 = -0x80000000; // 0x401991
    int32_t v10; // 0x401960
    int32_t v11; // 0x401960
    int32_t v12; // 0x401960
    int32_t v13; // bp-28, 0x401960
    if (v6 < 0) {
        goto lab_0x4019d0;
    } else {
        uint32_t v14 = v4 / 2; // 0x401999
        v7 = -0x7fffffdd;
        v8 = 0x7fffffff;
        v9 = -0x80000000;
        if (v4 > (v14 ^ 0x7fffffff)) {
            goto lab_0x4019d0;
        } else {
            int32_t v15 = v14 + v4; // 0x4019a8
            int32_t v16 = v6; // 0x401960
            if (v6 < v15) {
                // 0x4019af
                v16 = v15;
                if (v15 == -1) {
                    // 0x401a94
                    function_4010d0();
                    // UNREACHABLE
                }
            }
            int32_t v17 = v16 + 1;
            if (v17 < 0x1000) {
                // 0x4019f3
                v13 = v17;
                int32_t v18 = function_402813(v17); // 0x4019f4
                v11 = v16;
                v10 = v17;
                v12 = v18;
                goto lab_0x401a05;
            } else {
                // 0x4019c5
                v7 = v16 + 36;
                v8 = v16;
                v9 = v17;
                if (v17 > 0xffffffdc) {
                    // 0x401a94
                    function_4010d0();
                    // UNREACHABLE
                }
                goto lab_0x4019d0;
            }
        }
    }
  lab_0x4019d0:
    // 0x4019d0
    v13 = v7;
    int32_t v19 = function_402813(v7); // 0x4019d1
    int32_t v20 = v4; // 0x4019db
    if (v19 == 0) {
        goto lab_0x401a64;
    } else {
        int32_t v21 = v19 + 35 & -32; // 0x4019e7
        *(int32_t *)(v21 - 4) = v19;
        v11 = v8;
        v10 = v9;
        v12 = v21;
        goto lab_0x401a05;
    }
  lab_0x401a64:
    // 0x401a64
    _invalid_parameter_noinfo_noreturn();
    int32_t v22; // bp-24, 0x401960
    int32_t * v23 = &v22; // 0x401a64
    int32_t v24 = v20; // 0x401a64
    goto lab_0x401a6a;
  lab_0x401a6a:
    // 0x401a6a
    *(int32_t *)((int32_t)v23 - 8) = v24;
    memcpy(&g53, &g53, (int32_t)&g53);
    *(char *)(v24 + v2) = a1;
    *(char *)(v24 + v5) = 0;
    *(int32_t *)result = v24;
    return result;
  lab_0x401a05:
    // 0x401a05
    *v1 = v5;
    *v3 = v11;
    v13 = v2;
    v23 = &v13;
    v24 = v12;
    int32_t v25; // 0x401960
    int32_t v26; // 0x401960
    if (v4 < 16) {
        goto lab_0x401a6a;
    } else {
        // 0x401a15
        memcpy((int32_t *)v12, (int32_t *)v10, v2);
        int32_t v27 = v4 + 1; // 0x401a2a
        *(char *)(v12 + v2) = a1;
        *(char *)(v12 + v5) = 0;
        v25 = v27;
        v26 = v10;
        if (v27 < 0x1000) {
            goto lab_0x401a4d;
        } else {
            int32_t v28 = v10 - 4;
            int32_t v29 = *(int32_t *)v28; // 0x401a3b
            v20 = v12;
            if (v28 - v29 < 32) {
                // 0x401a4b
                v25 = v4 + 36;
                v26 = v29;
                goto lab_0x401a4d;
            } else {
                goto lab_0x401a64;
            }
        }
    }
  lab_0x401a4d:
    // 0x401a4d
    v13 = v25;
    function_402843(v26);
    *(int32_t *)result = v12;
    return result;
}

// Address range: 0x401aa0 - 0x401cd2
int32_t function_401aa0(void) {
    // 0x401aa0
    int128_t v1; // 0x401aa0
    int128_t v2 = v1;
    int32_t v3 = __readfsdword(0); // bp-16, 0x401ab0
    int32_t v4; // bp-4, 0x401aa0
    int32_t v5 = g17 ^ (int32_t)&v4; // bp-64, 0x401abe
    __writefsdword(0, (int32_t)&v3);
    int32_t v6; // 0x401aa0
    int32_t v7 = v6;
    int32_t v8 = v7 + 1; // 0x401ae3
    while (*(char *)v7 != 0) {
        // 0x401ae1
        v7 = v8;
        v8 = v7 + 1;
    }
    // 0x401ae8
    int32_t result; // 0x401aa0
    uint32_t v9 = v7 - result; // 0x401aea
    int32_t v10 = *(int32_t *)(v7 + 5) + result; // 0x401af2
    int32_t v11 = *(int32_t *)(v10 + 36); // 0x401af7
    int32_t v12; // 0x401aa0
    int32_t v13; // 0x401aa0
    if (v11 < 0) {
        goto lab_0x401b18;
    } else {
        uint32_t v14 = *(int32_t *)(v10 + 32); // 0x401afa
        if (v11 != 0 || v14 > v9) {
            // 0x401b11
            v13 = v14 - v9;
            v12 = v11 - (int32_t)(v14 < v9);
            goto lab_0x401b26;
        } else {
            goto lab_0x401b18;
        }
    }
  lab_0x401b18:;
    // 0x401b18
    int64_t v15; // 0x401aa0
    __asm_movlpd(0x100000000 * v15 >> 32, __asm_xorps(v2, v2));
    v13 = v15;
    goto lab_0x401b26;
  lab_0x401b26:;
    int32_t v16 = &v5; // 0x401abe
    int32_t v17 = *(int32_t *)(v10 + 56); // 0x401b26
    int32_t v18 = v17 == 0 ? v8 : v17;
    int32_t v19 = *(int32_t *)(v18 + 4); // 0x401b48
    int32_t v20 = v19 + result; // 0x401b4b
    int32_t v21 = 4; // 0x401b51
    int32_t v22 = v16; // 0x401b51
    int32_t v23; // 0x401aa0
    int32_t v24; // 0x401b6e
    if (*(int32_t *)(v20 + 12) == 0) {
        int32_t v25 = *(int32_t *)(v20 + 60); // 0x401b57
        v23 = v18;
        v24 = v19;
        if (v25 == 0 || v25 == result) {
            goto lab_0x401b95;
        } else {
            // 0x401b7d
            _3f_flush_40__3f__24_basic_ostream_40_DU_3f__24_char_traits_40_D_40_std_40__40__40_std_40__40_QAEAAV12_40_XZ();
            v24 = *(int32_t *)(v25 + 4);
            v23 = v25;
            v21 = 4;
            v22 = v16;
            if (*(int32_t *)(result + 12 + v24) == 0) {
                goto lab_0x401b95;
            } else {
                goto lab_0x401c7c;
            }
        }
    } else {
        goto lab_0x401c7c;
    }
  lab_0x401c7c:
    // 0x401c7c
    *(int32_t *)(v22 - 4) = 0;
    *(int32_t *)(v22 - 8) = v21;
    _3f_setstate_40__3f__24_basic_ios_40_DU_3f__24_char_traits_40_D_40_std_40__40__40_std_40__40_QAEXH_N_40_Z(1);
    if ((char)_3f_uncaught_exception_40_std_40__40_YA_NXZ() == 0) {
        // 0x401ca0
        _3f__Osfx_40__3f__24_basic_ostream_40_DU_3f__24_char_traits_40_D_40_std_40__40__40_std_40__40_QAEXXZ();
    }
    // 0x401ca8
    __writefsdword(0, v3);
    return result;
  lab_0x401b95:;
    // 0x401b95
    int32_t v26; // 0x401aa0
    int32_t v27; // 0x401aa0
    int32_t v28; // 0x401aa0
    int32_t v29; // 0x401aa0
    int32_t v30; // 0x401aa0
    int32_t v31; // 0x401aa0
    int32_t v32; // 0x401aa0
    if (v12 < 0 | (*(int32_t *)(result + 20 + v24) & 448) == 64) {
        // 0x401b95
        v27 = result + 56;
        v26 = v23;
        v31 = v16;
        v30 = v13;
        v29 = v12;
    } else {
        int32_t v33 = result + 56;
        int32_t v34 = v12; // 0x401be0
        int32_t v35 = v16; // 0x401aa0
        int32_t v36 = v23; // 0x401bc3
        int32_t v37 = v13;
        v27 = v33;
        v26 = v36;
        v31 = v35;
        v30 = 0;
        v29 = v34;
        while (v37 == 0 != (v34 == 0)) {
            int32_t v38 = *(int32_t *)(v36 + 4); // 0x401bbc
            v36 = *(int32_t *)(v33 + v38);
            int32_t v39 = v35 - 4; // 0x401bca
            *(int32_t *)v39 = (int32_t)*(char *)(result + 64 + v38);
            int32_t v40 = _3f_sputc_40__3f__24_basic_streambuf_40_DU_3f__24_char_traits_40_D_40_std_40__40__40_std_40__40_QAEHD_40_Z(); // 0x401bcd
            if (v40 == -1) {
                // 0x401bd8
                v28 = v40 + 5;
                v32 = v39;
                goto lab_0x401c3e;
            }
            int32_t v41 = v37 - 1; // 0x401bdd
            v34 = v34 - 1 + (int32_t)(v37 != 0);
            v35 = v39;
            v27 = v33;
            v26 = v36;
            v31 = v39;
            v30 = v41;
            v29 = -1;
            if (v34 < 0) {
                // break -> 0x401be7
                break;
            }
            v37 = v41;
            v27 = v33;
            v26 = v36;
            v31 = v35;
            v30 = 0;
            v29 = v34;
        }
    }
    // 0x401be7
    *(int32_t *)(v31 - 4) = 0;
    *(int32_t *)(v31 - 8) = v9;
    int32_t v42 = v31 - 12; // 0x401bef
    v28 = 4;
    v32 = v42;
    if (v23 == 0 == _3f_sputn_40__3f__24_basic_streambuf_40_DU_3f__24_char_traits_40_D_40_std_40__40__40_std_40__40_QAE_JPBD_J_40_Z() == v9) {
        // 0x401c05
        v28 = 0;
        v32 = v42;
        if (v29 >= 0) {
            int32_t v43 = v29; // 0x401c37
            int32_t v44 = v30; // 0x401aa0
            int32_t v45 = v42; // 0x401c1f
            int32_t v46 = *(int32_t *)(*(int32_t *)(v26 + 4) + v27); // 0x401c18
            v28 = 0;
            v32 = v45;
            while (v44 == 0 != (v43 == 0)) {
                int32_t v47 = *(int32_t *)(v46 + 4); // 0x401c11
                v46 = *(int32_t *)(v47 + v27);
                v45 -= 4;
                *(int32_t *)v45 = (int32_t)*(char *)(result + 64 + v47);
                v28 = 4;
                v32 = v45;
                if (_3f_sputc_40__3f__24_basic_streambuf_40_DU_3f__24_char_traits_40_D_40_std_40__40__40_std_40__40_QAEHD_40_Z() == -1) {
                    // break -> 0x401c3e
                    break;
                }
                // 0x401c34
                v43 = v43 - 1 + (int32_t)(v44 != 0);
                v44--;
                v28 = 0;
                v32 = v45;
                if (v43 < 0) {
                    // break -> 0x401c3e
                    break;
                }
                v28 = 0;
                v32 = v45;
            }
        }
    }
    goto lab_0x401c3e;
  lab_0x401c3e:;
    int32_t v48 = *(int32_t *)(v28 + 4) + result;
    *(int32_t *)(v48 + 32) = 0;
    *(int32_t *)(v48 + 36) = 0;
    v21 = v28;
    v22 = v32;
    goto lab_0x401c7c;
}

// Address range: 0x401ce0 - 0x401d42
int32_t function_401ce0(void) {
    int32_t v1 = __readfsdword(0); // bp-16, 0x401cf0
    __writefsdword(0, (int32_t)&v1);
    if ((char)_3f_uncaught_exception_40_std_40__40_YA_NXZ() == 0) {
        // 0x401d0f
        _3f__Osfx_40__3f__24_basic_ostream_40_DU_3f__24_char_traits_40_D_40_std_40__40__40_std_40__40_QAEXXZ();
    }
    // 0x401d17
    int32_t v2; // 0x401ce0
    int32_t v3 = *(int32_t *)(v2 + 4); // 0x401d22
    int32_t v4 = *(int32_t *)(v2 + 56 + v3); // 0x401d25
    int32_t result = v3; // 0x401d2b
    if (v4 != 0) {
        // 0x401d2d
        result = *(int32_t *)v4;
    }
    // 0x401d32
    __writefsdword(0, v1);
    return result;
}

// Address range: 0x401d50 - 0x401d95
int32_t function_401d50(void) {
    int32_t v1 = __readfsdword(0); // bp-16, 0x401d60
    __writefsdword(0, (int32_t)&v1);
    int32_t v2; // 0x401d50
    int32_t v3 = *(int32_t *)(v2 + 4); // 0x401d76
    int32_t v4 = *(int32_t *)(v2 + 56 + v3); // 0x401d79
    int32_t result = v3; // 0x401d7f
    if (v4 != 0) {
        // 0x401d81
        result = *(int32_t *)v4;
    }
    // 0x401d86
    __writefsdword(0, v1);
    return result;
}

// Address range: 0x401da0 - 0x401db8
int32_t function_401da0(void) {
    // 0x401da0
    int128_t v1; // 0x401da0
    int128_t v2 = v1;
    int128_t v3 = __asm_xorps(v2, v2); // 0x401da0
    int32_t result; // 0x401da0
    int32_t v4 = result + 4; // 0x401da5
    __asm_movq(*(int64_t *)v4, v3);
    *(int32_t *)v4 = (int32_t)"bad cast";
    *(int32_t *)result = (int32_t)&g10;
    return result;
}

// Address range: 0x401dc0 - 0x401ddb
int32_t function_401dc0(void) {
    // 0x401dc0
    function_401da0();
    int32_t v1; // bp-16, 0x401dc0
    _CxxThrowException(&v1, &g15);
    // UNREACHABLE
}

// Address range: 0x401de0 - 0x401e14
int32_t function_401de0(int32_t a1) {
    // 0x401de0
    int128_t v1; // 0x401de0
    int128_t v2 = v1;
    int128_t v3 = __asm_xorps(v2, v2); // 0x401de6
    int32_t result; // 0x401de0
    int32_t * v4 = (int32_t *)result; // 0x401ded
    *v4 = (int32_t)&g6;
    __asm_movq(*(int64_t *)(result + 4), v3);
    __std_exception_copy(a1 + 4);
    *v4 = (int32_t)&g10;
    return result;
}

// Address range: 0x401e20 - 0x401e39
int32_t function_401e20(void) {
    // 0x401e20
    int32_t v1; // 0x401e20
    int32_t v2 = *(int32_t *)(v1 + 4); // 0x401e20
    int32_t result; // 0x401e20
    if (v2 != 0) {
        // 0x401e27
        result = *(int32_t *)v2;
    }
    // 0x401e38
    return result;
}

// Address range: 0x401e40 - 0x4023e4
int32_t function_401e40(void) {
    // 0x401e40
    int32_t v1; // 0x401e40
    uint32_t v2 = v1;
    uint32_t v3 = v1;
    int32_t v4 = __readfsdword(0); // bp-16, 0x401e50
    __writefsdword(0, (int32_t)&v4);
    char v5 = 0; // bp-144, 0x401e86
    function_402530(0);
    int32_t * v6 = (int32_t *)32; // bp-120, 0x401eac
    int32_t v7; // bp-118, 0x401e40
    memset(&v7, 0, 98);
    int32_t v8 = &v5; // 0x401eca
    int32_t v9 = v8; // bp-236, 0x401eca
    int32_t v10 = &v9; // 0x401eca
    function_401750(v8);
    int32_t v11; // 0x401e40
    int32_t v12; // 0x401e40
    int32_t v13; // bp-192, 0x401e40
    if (v1 < 1) {
        goto lab_0x401f1e;
    } else {
        int32_t v14 = v1 >= 16 ? v1 : (int32_t)&v13;
        int32_t v15 = 0; // 0x401f19
        while (v1 <= 99) {
            // 0x401ef5
            if (*(char *)(v15 + v14) < 58) {
                // break -> 0x401f54
                break;
            }
            // 0x401f19
            v15++;
            if (v15 >= v1) {
                goto lab_0x401f1e;
            }
        }
        // 0x401f54
        function_401aa0();
        v12 = v10;
        if (v1 < 16) {
            goto lab_0x401f9a;
        } else {
            // 0x401f6f
            v11 = v13;
            if (v1 < 4095) {
                goto lab_0x401f90;
            } else {
                goto lab_0x401f80;
            }
        }
    }
  lab_0x401f1e:;
    int32_t * v16; // 0x401e40
    int32_t v17; // 0x401e40
    int32_t v18; // 0x401e40
    if (v1 < 16) {
        // 0x401f1e
        v16 = (int32_t *)(v10 - 4);
        goto lab_0x401fed;
    } else {
        int32_t v19 = v1 + 1; // 0x401f2b
        v18 = v19;
        if (v19 < 0x1000) {
            goto lab_0x401fe3;
        } else {
            int32_t v20 = v1 - 4;
            int32_t v21 = *(int32_t *)v20; // 0x401f3a
            v17 = v21;
            v18 = v1 + 36;
            if (v20 - v21 < 32) {
                goto lab_0x401fe3;
            } else {
                goto lab_0x401f6f_2;
            }
        }
    }
  lab_0x4020b2:;
    // 0x4020b2
    int32_t v22; // 0x401e40
    int32_t v23 = v22 + 1; // 0x4020b2
    int32_t v24; // 0x401e40
    int32_t v25 = v24; // 0x4020b9
    int32_t v26; // 0x401e40
    int32_t v27 = v26; // 0x4020b9
    int32_t v28; // 0x401e40
    int32_t v29 = v28; // 0x4020b9
    int32_t v30 = v23; // 0x4020b9
    int32_t v31 = v24; // 0x4020b9
    if (v23 == v1) {
        // break -> 0x4020bf
        goto lab_0x4020bf;
    }
    goto lab_0x402020;
  lab_0x402083:;
    // 0x402083
    int32_t v32; // 0x401e40
    int32_t v43 = v32 + 2;
    int32_t v33; // 0x401e40
    int32_t v38; // 0x401e40
    int32_t v41; // 0x401e40
    *(char *)(v43 + v38) = (char)(-10 * v41 + v33) + 48;
    int32_t v36; // bp-216, 0x401e40
    v24 = v36;
    v28 = v43 + 1;
    v26 = 1;
    goto lab_0x4020b2;
  lab_0x401f9a:
    // 0x401f9a
    *(int32_t *)(v12 - 4) = (int32_t)"pause";
    system((char *)&g53);
    // 0x4023c6
    __writefsdword(0, v4);
    return function_402805();
  lab_0x401fed:
    // 0x401fed
    *v16 = v8;
    function_401750((int32_t)&g53);
    int32_t v44 = v36; // 0x401fff
    v31 = v44;
    if (v1 >= 1) {
        // 0x402020
        int32_t v45; // bp-4, 0x401e40
        int32_t v46 = &v45; // 0x401e41
        v38 = v46 - 116;
        int32_t v42 = v46 - 115;
        v25 = v44;
        v27 = 1;
        v29 = 0;
        v30 = 0;
        while (true) {
          lab_0x402020:
            // 0x402020
            v22 = v30;
            v32 = v29;
            v33 = v27;
            int32_t v34 = v25;
            int32_t v35 = v22 + (v1 >= 16 ? v34 : (int32_t)&v36);
            char v37 = *(char *)v35; // 0x402039
            if (v37 != *(char *)(v35 + 1)) {
                // 0x402045
                *(char *)(v32 + v38) = v37;
                if (v33 < 10) {
                    int32_t v39 = v32 + 1; // 0x40207d
                    v24 = v34;
                    v28 = v39;
                    v26 = 1;
                    if (v33 == 1) {
                        goto lab_0x4020b2;
                    } else {
                        // 0x40207d
                        goto lab_0x402083;
                    }
                } else {
                    int32_t v40 = 0x66666667 * (int64_t)v33 / 0x100000000;
                    v41 = (v40 >> 2) + (int32_t)(v40 < 0);
                    *(char *)(v42 + v32) = (char)v41 + 48;
                    goto lab_0x402083;
                }
            } else {
                // 0x402042
                v24 = v34;
                v28 = v32;
                v26 = v33 + 1;
                goto lab_0x4020b2;
            }
        }
    }
  lab_0x4020bf:
    if (v1 >= 16) {
        int32_t v47 = v31;
        int32_t v48 = v1 + 1; // 0x4020ca
        int32_t v49 = v48; // 0x4020d5
        int32_t v50 = v47; // 0x4020d5
        if (v48 >= 0x1000) {
            int32_t v51 = v47 - 4;
            int32_t v52 = *(int32_t *)v51; // 0x4020d7
            int32_t v53 = v1 + 36; // 0x4020da
            v49 = v53;
            v50 = v52;
            if (v51 - v52 >= 32) {
                // 0x4020e7
                _invalid_parameter_noinfo_noreturn();
                v49 = v53;
                v50 = v52;
            }
        }
        // 0x4020ed
        *(int32_t *)(v10 - 8) = v49;
        *(int32_t *)(v10 - 12) = v50;
        function_402843((int32_t)&g53);
    }
    int32_t v54 = (int32_t)&v6; // 0x4020f7
    v13 = 0;
    int32_t v55 = v54;
    int32_t v56 = v55 + 1; // 0x402124
    while (*(char *)v55 != 0) {
        // 0x402122
        v55 = v56;
        v56 = v55 + 1;
    }
    // 0x402129
    int32_t v57; // bp-119, 0x401e40
    int32_t v58 = &v57; // 0x40210e
    *(int32_t *)(v10 - 8) = v56 - v58;
    *(int32_t *)(v10 - 12) = v54;
    function_401820((int32_t)&g53, (int32_t)&g53);
    int32_t * v59 = (int32_t *)(v10 - 16); // 0x40213b
    int32_t v60 = &v13; // 0x40213b
    *v59 = v60;
    function_4014c0();
    *v59 = 28;
    *(int32_t *)(v10 - 20) = (int32_t)"=ITU5NXeyMXVjFWUzZXezJUYyMXV";
    v36 = 0;
    function_401820(0, (int32_t)&g53);
    int32_t * v61 = (int32_t *)(v10 - 24); // 0x4021d2
    *v61 = 98;
    v6 = (int32_t *)32;
    int32_t * v62 = (int32_t *)(v10 - 28); // 0x4021db
    *v62 = 0;
    int32_t v63 = v10 - 32; // 0x4021dd
    int32_t * v64 = (int32_t *)v63; // 0x4021dd
    *v64 = (int32_t)&v7;
    memset(v6, (int32_t)&g53, (int32_t)&g53);
    v13 = 0;
    int32_t v65 = v54;
    int32_t v66 = v65 + 1; // 0x402243
    while (*(char *)v65 != 0) {
        // 0x402241
        v65 = v66;
        v66 = v65 + 1;
    }
    // 0x402248
    *v61 = v66 - v58;
    *v62 = v54;
    function_401820((int32_t)&g53, (int32_t)&g53);
    int32_t v67; // bp-168, 0x401e40
    if (v3 >= 4 && v3 == 0) {
        int32_t v68 = v2 >= 16 ? v67 : (int32_t)&v67; // 0x401e40
        int32_t v69 = v60; // 0x401e40
        while (*(int32_t *)v68 == *(int32_t *)v69) {
            // 0x4022d6
            int32_t v70; // 0x401e40
            int32_t v71 = v70 - 4;
            v69 += 4;
            v68 += 4;
            v70 = v71;
            if (v71 < 4) {
                // break -> 0x402358
                break;
            }
        }
    }
    // 0x402358
    *v64 = 0x4024f0;
    function_401aa0();
    _3f__3f_6_3f__24_basic_ostream_40_DU_3f__24_char_traits_40_D_40_std_40__40__40_std_40__40_QAEAAV01_40_P6AAAV01_40_AAV01_40__40_Z_40_Z();
    v12 = v63;
    int32_t v72; // 0x401e40
    int32_t v73; // 0x401e40
    int32_t v74; // 0x401e40
    if (v2 < 16) {
        goto lab_0x401f9a;
    } else {
        int32_t v75 = v2 + 1; // 0x402393
        v72 = v67;
        v73 = v75;
        v74 = v63;
        if (v75 >= 0x1000) {
            int32_t v76 = v67 - 4;
            int32_t v77 = *(int32_t *)v76; // 0x4023a2
            int32_t v78 = v2 + 36; // 0x4023a5
            v72 = v77;
            v73 = v78;
            v74 = v63;
            if (v76 - v77 >= 32) {
                // 0x4023b6
                _invalid_parameter_noinfo_noreturn();
                *(int32_t *)(v10 - 36) = v78;
                *(int32_t *)(v10 - 40) = v77;
                function_402843((int32_t)&g53);
                // 0x4023c6
                __writefsdword(0, v4);
                return function_402805();
            }
        }
        goto lab_0x401f90;
    }
  lab_0x401fe3:;
    int32_t * v79 = (int32_t *)(v10 - 4);
    *v79 = v18;
    *(int32_t *)(v10 - 8) = v17;
    function_402843((int32_t)&g53);
    v16 = v79;
    goto lab_0x401fed;
  lab_0x401f90:
    // 0x401f90
    *(int32_t *)(v74 - 4) = v73;
    *(int32_t *)(v74 - 8) = v72;
    function_402843((int32_t)&g53);
    v12 = v74;
    goto lab_0x401f9a;
  lab_0x401f80:;
    int32_t v80 = v11 - 4;
    int32_t v81 = *(int32_t *)v80; // 0x401f80
    v72 = v81;
    v73 = v1 + 36;
    v74 = v10;
    if (v80 - v81 < 32) {
        goto lab_0x401f90;
    } else {
        goto lab_0x401f6f_2;
    }
  lab_0x401f6f_2:
    // 0x401f6f
    _invalid_parameter_noinfo_noreturn();
    function_401aa0();
    v11 = v13;
    goto lab_0x401f80;
}

// Address range: 0x4023f0 - 0x4024e0
int32_t function_4023f0(int32_t a1) {
    int32_t v1 = __readfsdword(0); // bp-16, 0x402400
    __writefsdword(0, (int32_t)&v1);
    _3f__3f_0_Lockit_40_std_40__40_QAE_40_H_40_Z(0);
    int32_t v2 = g50; // bp-32, 0x40243b
    uint32_t v3 = _3f__3f_Bid_40_locale_40_std_40__40_QAEIXZ(g50); // 0x40243e
    int32_t v4 = *(int32_t *)(a1 + 4); // 0x402446
    int32_t v5 = 0; // 0x40244c
    if (v3 < *(int32_t *)(v4 + 12)) {
        // 0x40244e
        v5 = *(int32_t *)(*(int32_t *)(v4 + 8) + 4 * v3);
        if (v5 != 0) {
            // 0x4024b4
            _3f__3f_1_Lockit_40_std_40__40_QAE_40_XZ();
            __writefsdword(0, v1);
            return function_402805();
        }
    }
    int32_t v6 = v5; // 0x402460
    if (*(char *)(v4 + 20) == 0) {
        goto lab_0x402473;
    } else {
        int32_t v7 = _3f__Getgloballocale_40_locale_40_std_40__40_CAPAV_Locimp_40_12_40_XZ(); // 0x402462
        if (v3 >= *(int32_t *)(v7 + 12)) {
            goto lab_0x402477;
        } else {
            // 0x40246d
            v6 = *(int32_t *)(*(int32_t *)(v7 + 8) + 4 * v3);
            goto lab_0x402473;
        }
    }
  lab_0x402473:
    // 0x402473
    if (v6 != 0) {
        // 0x4024b4
        _3f__3f_1_Lockit_40_std_40__40_QAE_40_XZ();
        __writefsdword(0, v1);
        return function_402805();
    }
    goto lab_0x402477;
  lab_0x402477:
    // 0x402477
    if (v2 != 0) {
        // 0x4024b4
        _3f__3f_1_Lockit_40_std_40__40_QAE_40_XZ();
        __writefsdword(0, v1);
        return function_402805();
    }
    int32_t v8 = _3f__Getcat_40__3f__24_ctype_40_D_40_std_40__40_SAIPAPBVfacet_40_locale_40_2_40_PBV42_40__40_Z(&v2, a1); // 0x402483
    if (v8 == -1) {
        // 0x4024db
        function_401dc0();
        // UNREACHABLE
    }
    // 0x402491
    function_4027d9(v2);
    g50 = v2;
    // 0x4024b4
    _3f__3f_1_Lockit_40_std_40__40_QAE_40_XZ();
    __writefsdword(0, v1);
    return function_402805();
}

// Address range: 0x4024f0 - 0x40251f
int32_t function_4024f0(int32_t result) {
    // 0x4024f0
    int32_t v1; // 0x4024f0
    _3f_put_40__3f__24_basic_ostream_40_DU_3f__24_char_traits_40_D_40_std_40__40__40_std_40__40_QAEAAV12_40_D_40_Z(_3f_widen_40__3f__24_basic_ios_40_DU_3f__24_char_traits_40_D_40_std_40__40__40_std_40__40_QBEDD_40_Z(10, v1, v1) & 255);
    _3f_flush_40__3f__24_basic_ostream_40_DU_3f__24_char_traits_40_D_40_std_40__40__40_std_40__40_QAEAAV12_40_XZ();
    return result;
}

// Address range: 0x402520 - 0x40252d
int32_t function_402520(void) {
    // 0x402520
    int32_t v1; // 0x402520
    int32_t v2 = v1;
    return v2 == 0 ? v1 : v2;
}

// Address range: 0x402530 - 0x402725
int32_t function_402530(char a1) {
    int32_t v1 = __readfsdword(0); // bp-16, 0x402540
    __writefsdword(0, (int32_t)&v1);
    int32_t v2 = 0; // bp-84, 0x40257f
    int32_t v3 = _3f__Ipfx_40__3f__24_basic_istream_40_DU_3f__24_char_traits_40_D_40_std_40__40__40_std_40__40_QAE_N_N_40_Z(0); // 0x40258a
    char v4 = 0; // 0x40259c
    int32_t v5 = 0; // 0x40259c
    int32_t v6 = &v2; // 0x40259c
    int32_t v7; // 0x402530
    int32_t v8; // 0x402530
    int32_t v9; // 0x4025b8
    int32_t * v10; // 0x4025db
    int32_t v11; // 0x402530
    int32_t result; // 0x402530
    if ((char)v3 == 0) {
        goto lab_0x4026c7;
    } else {
        // 0x4025a2
        int32_t v12; // bp-64, 0x402530
        int32_t v13 = &v12; // bp-88, 0x4025a5
        int32_t v14 = _3f_getloc_40_ios_base_40_std_40__40_QBE_3f_AVlocale_40_2_40_XZ(&v12); // 0x4025ad
        int32_t v15 = v14; // bp-92, 0x4025b3
        v9 = function_4023f0(v14);
        int32_t v16 = &v13; // 0x4025c0
        int32_t * v17 = (int32_t *)4; // 0x4025c8
        v7 = v16;
        if (result != 0) {
            int32_t v18 = *(int32_t *)result; // 0x4025ca
            v17 = (int32_t *)4;
            v7 = v16;
            if (v18 != 0) {
                // 0x4025d5
                v15 = 1;
                v17 = (int32_t *)(v18 + 4);
                v7 = &v15;
            }
        }
        // 0x4025db
        v10 = (int32_t *)(result + 16);
        *v10 = 0;
        *(char *)result = 0;
        v11 = *v17 + result;
        int32_t v19 = *(int32_t *)(v11 + 36); // 0x4025f8
        if (v19 < 0) {
            // 0x402614
            v8 = 0x7fffffff;
            goto lab_0x40261c;
        } else {
            uint32_t v20 = *(int32_t *)(v11 + 32); // 0x4025fd
            v8 = v20;
            if (v20 < 0x7fffffff == (v20 != 0 || v19 != 0)) {
                goto lab_0x40261c;
            } else {
                // 0x402614
                v8 = 0x7fffffff;
                goto lab_0x40261c;
            }
        }
    }
  lab_0x4026c7:;
    int32_t v21 = v5;
    int32_t v22; // 0x402530
    int32_t v23 = *(int32_t *)(v22 + 4) + result;
    *(int32_t *)(v23 + 32) = 0;
    *(int32_t *)(v23 + 36) = 0;
    int32_t v24 = v4 != 0 ? v21 : v21 | 2;
    *(int32_t *)(v6 - 4) = 0;
    *(int32_t *)(v6 - 8) = v24;
    _3f_setstate_40__3f__24_basic_ios_40_DU_3f__24_char_traits_40_D_40_std_40__40__40_std_40__40_QAEXH_N_40_Z(1);
    __writefsdword(0, v1);
    return result;
  lab_0x40261c:;
    int32_t v25 = *(int32_t *)(v11 + 56); // 0x40261c
    int32_t v26 = _3f_sgetc_40__3f__24_basic_streambuf_40_DU_3f__24_char_traits_40_D_40_std_40__40__40_std_40__40_QAEHXZ(v9, v8); // 0x402620
    v4 = 0;
    v22 = v25;
    v5 = 0;
    v6 = v7;
    if (v8 != 0) {
        int32_t v27 = v26; // 0x40262f
        int32_t v28 = v7; // 0x40262f
        int32_t v29 = v25; // 0x40262f
        char v30 = 0; // 0x40262f
        int32_t v31 = v8; // 0x40262f
        if (v26 != -1) {
            int32_t v32 = v26;
            int32_t v33 = v7;
            int32_t v34 = v32 & 255; // 0x40263c
            v4 = 0;
            v22 = v34;
            v5 = 0;
            v6 = v33;
            while ((*(char *)(*(int32_t *)(v9 + 12) + 2 * v34) & 72) == 0) {
                uint32_t v35 = *v10; // 0x402648
                uint32_t v36 = *(int32_t *)(result + 20); // 0x40264b
                int32_t v37; // 0x402530
                int32_t v38; // 0x402530
                if (v35 >= v36) {
                    // 0x40266e
                    *(int32_t *)(v33 - 4) = 0x1000000 * v32 >> 24;
                    *(int32_t *)(v33 - 8) = 0;
                    int32_t v39 = v33 - 12; // 0x402678
                    *(int32_t *)v39 = v35;
                    function_401960(0);
                    v38 = v39;
                } else {
                    int32_t v40 = v35 + 1;
                    *v10 = v40;
                    int32_t v41 = v36 < 16 ? result : v32;
                    *(char *)(v41 + v35) = (char)v32;
                    *(char *)(v41 + v40) = 0;
                    v37 = v35;
                    v38 = v33;
                }
                int32_t v42 = v31 - 1; // 0x402685
                int32_t v43 = *(int32_t *)(result + 56 + *(int32_t *)(v37 + 4)); // 0x402690
                int32_t v44 = _3f_snextc_40__3f__24_basic_streambuf_40_DU_3f__24_char_traits_40_D_40_std_40__40__40_std_40__40_QAEHXZ(v42, 1); // 0x402694
                v4 = 1;
                v22 = v43;
                v5 = 0;
                v6 = v38;
                if (v42 == 0) {
                    // break -> 0x4026c7
                    break;
                }
                // 0x40262c
                v27 = v44;
                v28 = v38;
                v29 = v43;
                v30 = 1;
                v31 = v42;
                if (v44 == -1) {
                    goto lab_0x402631;
                }
                v32 = v44;
                v33 = v38;
                v34 = v32 & 255;
                v4 = 1;
                v22 = v34;
                v5 = 0;
                v6 = v33;
            }
        } else {
          lab_0x402631:
            // 0x402631
            v4 = v30;
            v22 = v29;
            v5 = v27 + 2;
            v6 = v28;
        }
    }
    goto lab_0x4026c7;
}

// Address range: 0x402730 - 0x40277c
int32_t function_402730(void) {
    int32_t v1 = __readfsdword(0); // bp-16, 0x402740
    __writefsdword(0, (int32_t)&v1);
    int32_t v2; // 0x402730
    int32_t v3 = *(int32_t *)(v2 + 4); // 0x40275d
    int32_t v4 = *(int32_t *)(v2 + 56 + v3); // 0x402760
    int32_t result = v3; // 0x402766
    if (v4 != 0) {
        // 0x402768
        result = *(int32_t *)v4;
    }
    // 0x40276d
    __writefsdword(0, v1);
    return result;
}

// Address range: 0x402781 - 0x4027b2
int32_t function_402781(void) {
    int32_t result = 0; // 0x40279b
    if (function_402d16() != 0) {
        // 0x40279d
        result = function_402d16();
    }
    // 0x4027af
    return result;
}

// Address range: 0x4027b2 - 0x4027d9
int32_t function_4027b2(void) {
    // 0x4027b2
    if (g21 == 0) {
        // 0x4027d7
        int32_t result; // 0x4027b2
        return result;
    }
    // 0x4027b5
    int32_t v1; // bp-4, 0x4027b2
    int32_t v2 = &v1; // 0x4027b2
    int32_t v3 = g21; // 0x4027cd
    g21 = *(int32_t *)v3;
    function_402781();
    *(int32_t *)(v2 - 4) = 8;
    *(int32_t *)(v2 - 8) = v3;
    int32_t result2 = function_402843((int32_t)&g53); // 0x4027c6
    v3 = g21;
    while (v3 != 0) {
        // 0x4027b5
        g21 = *(int32_t *)v3;
        function_402781();
        *(int32_t *)(v2 - 4) = 8;
        *(int32_t *)(v2 - 8) = v3;
        result2 = function_402843((int32_t)&g53);
        v3 = g21;
    }
    // 0x4027d7
    return result2;
}

// Address range: 0x4027d9 - 0x402805
int32_t function_4027d9(int32_t a1) {
    int32_t result = function_402813(8); // 0x4027df
    if (result != 0) {
        // 0x4027ec
        *(int32_t *)result = g21;
        *(int32_t *)(result + 4) = a1;
    }
    // 0x4027fe
    g21 = result;
    return result;
}

// Address range: 0x402805 - 0x402813
int32_t function_402805(void) {
    // 0x402805
    int32_t result; // 0x402805
    if (result != g17) {
        // 0x40280e
        return function_402d41((int32_t)&g53);
    }
    // 0x40280d
    return result;
}

// Address range: 0x402813 - 0x402843
int32_t function_402813(int32_t a1) {
    // 0x402813
    int32_t v1; // bp-4, 0x402813
    int32_t * v2 = (int32_t *)((int32_t)&v1 - 4); // 0x402825
    *v2 = a1;
    int32_t * mem = malloc((int32_t)&g53); // 0x402828
    while (mem == NULL) {
        // 0x402818
        *v2 = a1;
        if (_callnewh((int32_t)&g53) == 0) {
            if (a1 != -1) {
                // 0x40283e
                return function_402e53();
            }
            function_4010d0();
            // UNREACHABLE
        }
        *v2 = a1;
        mem = malloc((int32_t)&g53);
    }
    // 0x402832
    return (int32_t)mem;
}

// Address range: 0x402843 - 0x402851
int32_t function_402843(int32_t a1) {
    // 0x402843
    int32_t result; // 0x402843
    return result;
}

// Address range: 0x402851 - 0x402874
int32_t function_402851(char a1) {
    // 0x402851
    int32_t result; // 0x402851
    *(int32_t *)result = (int32_t)&g5;
    if ((a1 & 1) != 0) {
        // 0x402863
        function_402843(result);
    }
    // 0x40286d
    return result;
}

// Address range: 0x402874 - 0x402927
int32_t function_402874(void) {
    // 0x402874
    _set_app_type(1);
    _set_fmode(function_402f14());
    *__p__commode() = function_402f0d();
    if ((char)function_402b74(1) == 0) {
        // 0x402917
        function_402f8b(7, (int32_t)&g53);
        __asm_int3();
        function_402f56();
        return 0;
    }
    // 0x4028a4
    __asm_fnclex();
    function_403158();
    function_402d01(0x403184);
    if (_configure_narrow_argv(function_402f10()) != 0) {
        // 0x402917
        function_402f8b(7, (int32_t)&g53);
        __asm_int3();
        function_402f56();
        return 0;
    }
    // 0x4028c6
    InitializeSListHead(&g53);
    if (function_402f73() != 0) {
        // 0x4028d4
        __setusermatherr(0x402f0d);
    }
    // 0x4028df
    function_402d16();
    function_402d16();
    function_402f29();
    _configthreadlocale(function_402f0d());
    if ((char)function_402f26() != 0) {
        // 0x402903
        _initialize_narrow_environment();
    }
    // 0x402908
    function_402f0d();
    int32_t result = function_402f0d(); // 0x40290d
    if (result == 0) {
        // 0x402916
        return result;
    }
    // 0x402917
    function_402f8b(7, (int32_t)&g53);
    __asm_int3();
    function_402f56();
    return 0;
}

// Address range: 0x402927 - 0x402939
int32_t function_402927(void) {
    // 0x402927
    SetUnhandledExceptionFilter((int32_t (*)(struct _EXCEPTION_POINTERS *))&g53);
    return _set_new_mode(function_402f0d());
}

// Address range: 0x402939 - 0x402aba
int32_t function_402939(void) {
    int32_t v1 = &g11; // bp-8, 0x40293b
    function_4031b0(&g11, 20, (int32_t)&g53);
    int32_t (**v2)() = (int32_t (**)())1; // bp-12, 0x402945
    if ((char)function_402b3b(1) != 0) {
        // 0x402955
        int32_t v3; // 0x402939
        char * v4 = (char *)(v3 - 25); // 0x402957
        *v4 = 0;
        int32_t * v5 = (int32_t *)(v3 - 4); // 0x40295a
        *v5 = 0;
        int32_t v6 = function_402b09(); // 0x40295e
        int32_t v7 = v3 - 36; // 0x402963
        *(char *)v7 = (char)v6;
        if (g22 != 1) {
            char v8; // 0x402939
            if (g22 != 0) {
                // 0x4029c3
                *v4 = 1;
                v8 = 1;
            } else {
                // 0x40297a
                g22 = 1;
                v2 = (int32_t (**)())&g4;
                if (_initterm_e((int32_t (**)())&g3, (int32_t (**)())&g4) != 0) {
                    // 0x402a95
                    *v5 = -2;
                    __writefsdword(0, *(int32_t *)(v3 - 16));
                    return 255;
                }
                // 0x4029a6
                v2 = (int32_t (**)())&g2;
                _initterm((void (**)())&g1, (void (**)())&g2);
                g22 = 2;
                v8 = 0;
            }
            int32_t v9 = *(int32_t *)v7; // 0x4029c8
            v2 = (int32_t (**)())v9;
            function_402c8f(v9);
            int32_t v10 = &v1; // 0x4029d0
            int32_t v11 = function_402f7f(); // 0x4029d1
            int32_t v12 = v10; // 0x4029dc
            if (*(int32_t *)v11 != 0) {
                // 0x4029de
                v2 = (int32_t (**)())v11;
                int32_t v13 = function_402bfb(v11, (int32_t)&g53); // 0x4029df
                v12 = v10;
                if ((char)v13 != 0) {
                    // 0x4029e9
                    v2 = NULL;
                    int32_t v14 = 0; // bp-20, 0x4029ee
                    function_402d16();
                    v12 = &v14;
                }
            }
            int32_t v15 = function_402f85(); // 0x4029f9
            int32_t * v16 = (int32_t *)v15; // 0x402a00
            int32_t * v17 = (int32_t *)(v12 - 4);
            if (*v16 != 0) {
                // 0x402a04
                *v17 = v15;
                if ((char)function_402bfb((int32_t)&g53, (int32_t)&g53) != 0) {
                    // 0x402a0f
                    *v17 = *v16;
                    _register_thread_local_exe_atexit_callback((void (*)(int32_t *, int32_t, int32_t *))&g53);
                }
            }
            char ** v18 = _get_initial_narrow_environment(); // 0x402a17
            char ** v19 = *__p___argv(); // 0x402a23
            int32_t * v20 = __p___argc(); // 0x402a25
            *v17 = (int32_t)v18;
            int32_t * v21 = (int32_t *)(v12 - 8); // 0x402a2b
            *v21 = (int32_t)v19;
            *(int32_t *)(v12 - 12) = *v20;
            int32_t result = function_401e40(); // 0x402a2e
            if ((char)function_4030ab() == 0) {
                // 0x402aac
                *v17 = result;
                exit((int32_t)&g53);
                // UNREACHABLE
            }
            if (v8 == 0) {
                // 0x402a45
                _cexit();
            }
            // 0x402a4a
            *v17 = 0;
            *v21 = 1;
            function_402cac((int32_t)&g53, (int32_t)&g53);
            // 0x402a95
            *v5 = -2;
            __writefsdword(0, *(int32_t *)(v3 - 16));
            return result;
        }
    }
    // 0x402aa5
    v2 = (int32_t (**)())7;
    function_402f8b(7, (int32_t)&g53);
    // 0x402aac
    int32_t v22; // 0x402939
    *(int32_t *)((int32_t)&v2 - 4) = v22;
    exit((int32_t)&g53);
    // UNREACHABLE
}

// Address range: 0x402abb - 0x402ac5
int32_t entry_point(void) {
    // 0x402abb
    function_402ec2();
    return function_402939();
}

// Address range: 0x402ac5 - 0x402b09
int32_t function_402ac5(int32_t a1, uint32_t a2) {
    int32_t v1 = *(int32_t *)(a1 + 60) + a1; // 0x402acf
    int32_t v2 = v1 + 24 + (int32_t)*(int16_t *)(v1 + 20); // 0x402ad8
    uint16_t v3 = *(int16_t *)(v1 + 6); // 0x402ada
    if (v3 == 0) {
        // 0x402b02
        return 0;
    }
    uint32_t v4 = *(int32_t *)(v2 + 12); // 0x402aea
    if (v4 <= a2) {
        // 0x402aef
        if (*(int32_t *)(v2 + 8) + v4 > a2) {
            // break -> 0x402b02
            break;
        }
    }
    int32_t v5 = v2 + 40; // 0x402af9
    int32_t result = 0; // 0x402afe
    while (v5 != 40 * (int32_t)v3 + v2) {
        int32_t v6 = v5;
        v4 = *(int32_t *)(v6 + 12);
        if (v4 <= a2) {
            // 0x402aef
            result = v6;
            if (*(int32_t *)(v6 + 8) + v4 > a2) {
                // break -> 0x402b02
                break;
            }
        }
        // 0x402af9
        v5 = v6 + 40;
        result = 0;
    }
    // 0x402b02
    return result;
}

// Address range: 0x402b09 - 0x402b3b
int32_t function_402b09(void) {
    // 0x402b09
    if (function_4033f5() == 0) {
        // 0x402b33
        return 0;
    }
    int32_t v1 = *(int32_t *)(__readfsdword(24) + 4); // 0x402b1e
    int32_t v2 = g23;
    while (v2 != 0) {
        if (v1 == v2) {
            // 0x402b37
            g23 = v1;
            return v1 & -256 | 1;
        }
    }
    // 0x402b33
    g23 = v1;
    // 0x402b33
    return v2 & -256;
}

// Address range: 0x402b3b - 0x402b74
int32_t function_402b3b(int32_t a1) {
    if (a1 == 0) {
        // 0x402b44
        g24 = 1;
    }
    // 0x402b4b
    function_403224();
    int32_t v1 = function_402f26(); // 0x402b50
    if ((char)v1 == 0) {
        // 0x402b59
        return v1 & -256;
    }
    int32_t v2 = function_402f26(); // 0x402b5d
    if ((char)v2 != 0) {
        // 0x402b70
        return v2 & -256 | 1;
    }
    // 0x402b59
    return function_402f26() & -256;
}

// Address range: 0x402b74 - 0x402bfb
int32_t function_402b74(int32_t a1) {
    // 0x402b74
    int32_t v1; // 0x402b74
    if (g25 != 0) {
        // 0x402b80
        return v1 & -256 | 1;
    }
    if (a1 != 0 == (a1 != 1)) {
        // 0x402bf3
        function_402f8b(5, v1);
        return __asm_int3();
    }
    int32_t v2 = function_4033f5(); // 0x402b91
    if (a1 != 0 || v2 == 0) {
        // 0x402bc0
        g26 = (struct _onexit_table_t *)-1;
        g27 = -1;
        g28 = -1;
        g29 = -1;
        g30 = -1;
        g31 = -1;
        // 0x402be7
        g25 = 1;
        // 0x402bf0
        return v2 & -256 | 1;
    }
    int32_t v3 = _initialize_onexit_table((struct _onexit_table_t *)&g26); // 0x402ba3
    int32_t v4 = v3; // 0x402bab
    if (v3 == 0) {
        // 0x402bad
        v4 = _initialize_onexit_table((struct _onexit_table_t *)&g29);
        if (v4 == 0) {
            // 0x402be7
            g25 = 1;
            // 0x402bf0
            return 1;
        }
    }
    // 0x402bf0
    return v4 & -256;
}

// Address range: 0x402bfb - 0x402c8f
int32_t function_402bfb(int32_t a1, int32_t a2) {
    // 0x402bfb
    function_4031b0(&g12, 8, (int32_t)&g53);
    int32_t v1; // 0x402bfb
    int32_t * v2 = (int32_t *)(v1 - 4); // 0x402c07
    *v2 = 0;
    int32_t v3 = 0x5a4d; // 0x402c17
    if (*(int16_t *)0x400000 == 0x5a4d) {
        int32_t v4 = *(int32_t *)0x40003c; // 0x402c19
        v3 = v4;
        if (*(int32_t *)(v4 + 0x400000) == 0x4550) {
            // 0x402c2a
            v3 = v4;
            if (*(int16_t *)(v4 + 0x400018) == 267) {
                int32_t v5 = function_402ac5(0x400000, *(int32_t *)(v1 + 8) - 0x400000); // 0x402c44
                v3 = 0;
                if (v5 != 0) {
                    // 0x402c4f
                    v3 = v5;
                    if (*(int32_t *)(v5 + 36) >= 0) {
                        // 0x402c55
                        *v2 = -2;
                        // 0x402c7f
                        __writefsdword(0, *(int32_t *)(v1 - 16));
                        return v5 & -256 | 1;
                    }
                }
            }
        }
    }
    // 0x402c76
    *v2 = -2;
    // 0x402c7f
    __writefsdword(0, *(int32_t *)(v1 - 16));
    return v3 & -256;
}

// Address range: 0x402c8f - 0x402cac
int32_t function_402c8f(int32_t a1) {
    int32_t v1 = function_4033f5(); // 0x402c92
    if (v1 == 0) {
        // 0x402caa
        return 0;
    }
    int32_t result = v1; // 0x402c9f
    if ((char)a1 == 0) {
        // 0x402ca1
        result = g23;
        g23 = 0;
    }
    // 0x402caa
    return result;
}

// Address range: 0x402cac - 0x402cd4
int32_t function_402cac(int32_t a1, int32_t a2) {
    // 0x402cac
    if (g24 != 0) {
        if ((char)a2 != 0) {
            // 0x402cd0
            int32_t v1; // 0x402cac
            return v1 & -256 | 1;
        }
    }
    // 0x402cbe
    function_402f26();
    // 0x402cd0
    return function_402f26() & -256 | 1;
}

// Address range: 0x402cd4 - 0x402d01
int32_t function_402cd4(int32_t a1) {
    // 0x402cd4
    int32_t v1; // 0x402cd4
    if (g26 != (struct _onexit_table_t *)-1) {
        // 0x402cea
        v1 = _register_onexit_function((struct _onexit_table_t *)&g26, (int32_t (*)())a1);
    } else {
        // 0x402ce3
        int32_t v2; // 0x402cd4
        v1 = _crt_atexit(a1, v2);
    }
    // 0x402cf5
    return v1 == 0 ? a1 : 0;
}

// Address range: 0x402d01 - 0x402d16
int32_t function_402d01(int32_t a1) {
    // 0x402d01
    return function_402cd4(a1) == 0;
}

// Address range: 0x402d16 - 0x402d19
int32_t function_402d16(void) {
    // 0x402d16
    int32_t result; // 0x402d16
    return result;
}

// Address range: 0x402d19 - 0x402d41
int32_t function_402d19(int32_t ExceptionInfo) {
    // 0x402d19
    SetUnhandledExceptionFilter(NULL);
    UnhandledExceptionFilter((struct _EXCEPTION_POINTERS *)ExceptionInfo);
    return TerminateProcess(GetCurrentProcess(), (int32_t)&g53);
}

// Address range: 0x402d41 - 0x402e3b
int32_t function_402d41(int32_t a1) {
    bool v1 = IsProcessorFeaturePresent(23); // 0x402d4c
    int32_t v2; // 0x402d41
    if (v1) {
        // 0x402d56
        __asm_int(41);
        v2 = 2;
    }
    // 0x402d5b
    int32_t v3; // bp-4, 0x402d41
    int32_t v4 = &v3; // 0x402d42
    char v5 = llvm_ctpop_i8((char)v1); // 0x402d52
    g39 = v1;
    g38 = v2;
    bool v6; // 0x402d41
    g42 = 0x4000 * (int32_t)(bool)v6 | 1024 * (int32_t)v6 | 512 * (int32_t)v6 | 256 * (int32_t)v6 | 128 * (int32_t)v1 | 64 * (int32_t)!v1 | 4 * (int32_t)((v5 & 1) == 0) | 2;
    g40 = v3;
    g41 = a1;
    int32_t v7; // 0x402d41
    g43 = &v7;
    g37 = 0x10001;
    g34 = a1;
    g32 = -0x3ffffbf7;
    g33 = 1;
    g35 = 1;
    g36 = 2;
    *(int32_t *)(v4 - 8) = g17;
    *(int32_t *)(v4 - 4) = g16;
    return function_402d19(0x404188);
}

// Address range: 0x402e3b - 0x402e53
int32_t function_402e3b(void) {
    // 0x402e3b
    int32_t result; // 0x402e3b
    *(int32_t *)(result + 8) = 0;
    *(int32_t *)(result + 4) = (int32_t)"bad allocation";
    *(int32_t *)result = (int32_t)&g7;
    return result;
}

// Address range: 0x402e53 - 0x402e6f
int32_t function_402e53(void) {
    // 0x402e53
    function_402e3b();
    int32_t v1; // bp-16, 0x402e53
    _CxxThrowException(&v1, &g13);
    // UNREACHABLE
}

// Address range: 0x402e70 - 0x402e75
int32_t function_402e70(void) {
    // 0x402e70
    free(&g53);
    return &g53;
}

// Address range: 0x402e75 - 0x402ec2
int32_t function_402e75(void) {
    int32_t lpSystemTimeAsFileTime = 0; // bp-16, 0x402e7b
    GetSystemTimeAsFileTime((struct _FILETIME *)&lpSystemTimeAsFileTime);
    int32_t v1 = GetCurrentThreadId() ^ lpSystemTimeAsFileTime ^ GetCurrentProcessId();
    int32_t v2 = v1; // bp-8, 0x402ea5
    int32_t lpPerformanceCount; // bp-24, 0x402e75
    QueryPerformanceCounter((struct _LARGE_INTEGER *)&lpPerformanceCount);
    int32_t v3; // 0x402e75
    return v3 ^ (int32_t)&v2 ^ v1 ^ lpPerformanceCount;
}

// Address range: 0x402ec2 - 0x402f0d
int32_t function_402ec2(void) {
    int32_t v1 = g17; // 0x402ec2
    if (v1 != -0x44bf19b2 == v1 >= 0x10000) {
        // 0x402f02
        g16 = v1 ^ -1;
        int32_t result; // 0x402ec2
        return result;
    }
    int32_t v2 = function_402e75(); // 0x402edc
    int32_t result2 = v2; // 0x402ee5
    int32_t v3 = -0x44bf19b1; // 0x402ee5
    if (v2 != -0x44bf19b2) {
        // 0x402eee
        result2 = v2;
        v3 = v2;
        if (v2 < 0x10000) {
            int32_t v4 = 0x10000 * v2 | 0x47110000; // 0x402ef7
            result2 = v4;
            v3 = v4 | v2;
        }
    }
    // 0x402efc
    g17 = v3;
    // 0x402f02
    g16 = v3 ^ -1;
    return result2;
}

// Address range: 0x402f0d - 0x402f10
int32_t function_402f0d(void) {
    // 0x402f0d
    return 0;
}

// Address range: 0x402f10 - 0x402f14
int32_t function_402f10(void) {
    // 0x402f10
    return 1;
}

// Address range: 0x402f14 - 0x402f1a
int32_t function_402f14(void) {
    // 0x402f14
    return 0x4000;
}

// Address range: 0x402f1a - 0x402f26
void function_402f1a(int32_t * ListHead) {
    // 0x402f1a
    InitializeSListHead(&g44);
}

// Address range: 0x402f26 - 0x402f29
int32_t function_402f26(void) {
    // 0x402f26
    int32_t v1; // 0x402f26
    return v1 & -256 | 1;
}

// Address range: 0x402f29 - 0x402f50
int32_t function_402f29(void) {
    int32_t result = _controlfp_s(NULL, 0x10000, 0x30000); // 0x402f35
    if (result == 0) {
        // 0x402f41
        return result;
    }
    // 0x402f42
    function_402f8b(7, (int32_t)&g53);
    __asm_int3();
    return &g45;
}

// Address range: 0x402f50 - 0x402f56
int32_t function_402f50(void) {
    // 0x402f50
    return &g46;
}

// Address range: 0x402f56 - 0x402f73
int32_t function_402f56(void) {
    // 0x402f56
    int32_t v1; // 0x402f56
    int32_t v2 = v1;
    int32_t * v3 = (int32_t *)(v2 + 4); // 0x402f5b
    *(int32_t *)v2 = v2 | 36;
    int32_t result = function_402f50(); // 0x402f64
    int32_t * v4 = (int32_t *)(result + 4); // 0x402f69
    int32_t * v5 = (int32_t *)result; // 0x402f6c
    *v5 = *v5 | 2;
    return result;
}

// Address range: 0x402f73 - 0x402f7f
int32_t function_402f73(void) {
    // 0x402f73
    return g18 == 0;
}

// Address range: 0x402f7f - 0x402f85
int32_t function_402f7f(void) {
    // 0x402f7f
    return &g52;
}

// Address range: 0x402f85 - 0x402f8b
int32_t function_402f85(void) {
    // 0x402f85
    return &g51;
}

// Address range: 0x402f8b - 0x4030a6
int32_t function_402f8b(int32_t a1, int32_t a2) {
    // 0x402f8b
    if (IsProcessorFeaturePresent(23)) {
        // 0x402fa1
        __asm_int(41);
    }
    // 0x402fa6
    function_403150();
    int32_t v1; // bp-808, 0x402f8b
    memset(&v1, 0, 716);
    v1 = 0x10001;
    int32_t v2; // bp-92, 0x402f8b
    memset(&v2, 0, 80);
    v2 = 0x40000015;
    IsDebuggerPresent();
    int32_t ExceptionInfo = &v2; // bp-12, 0x403073
    SetUnhandledExceptionFilter(NULL);
    int32_t v3 = UnhandledExceptionFilter((struct _EXCEPTION_POINTERS *)&ExceptionInfo); // 0x40308d
    int32_t result = v3; // 0x403095
    if (v3 == 0) {
        // 0x40309b
        result = function_403150();
    }
    // 0x4030a3
    return result;
}

// Address range: 0x4030a6 - 0x4030ab
int32_t function_4030a6(void) {
    // 0x4030a6
    return function_402f0d();
}

// Address range: 0x4030ab - 0x4030ee
int32_t function_4030ab(void) {
    int32_t * v1 = GetModuleHandleW(NULL); // 0x4030ad
    int32_t v2 = (int32_t)v1; // 0x4030ad
    if (v1 == NULL || *(int16_t *)v1 != 0x5a4d) {
        // 0x4030eb
        return v2 & -256;
    }
    int32_t v3 = *(int32_t *)(v2 + 60) + v2; // 0x4030c4
    if (*(int32_t *)v3 != 0x4550) {
        // 0x4030eb
        return v2 & -256;
    }
    // 0x4030ce
    if (*(int16_t *)(v3 + 24) != 267 || *(int32_t *)(v3 + 116) < 15 || *(int32_t *)(v3 + 232) == 0) {
        // 0x4030eb
        return 256;
    }
    // 0x4030e8
    return 257;
}

// Address range: 0x4030ee - 0x4030fa
int32_t (*function_4030ee(int32_t (*lpTopLevelExceptionFilter)(struct _EXCEPTION_POINTERS *)))(struct _EXCEPTION_POINTERS *) {
    // 0x4030ee
    return SetUnhandledExceptionFilter((int32_t (*)(struct _EXCEPTION_POINTERS *))0x4030fa);
}

// Address range: 0x4030fa - 0x403150
int32_t function_4030fa(int32_t a1) {
    int32_t v1 = *(int32_t *)a1; // 0x403102
    if (*(int32_t *)v1 != -0x1f928c9d || *(int32_t *)(v1 + 16) != 3) {
        // 0x403131
        return 0;
    }
    // 0x403112
    switch (*(int32_t *)(v1 + 20)) {
        case 0x19930522: {
        }
        case 0x19930521: {
        }
        case 0x19930520: {
        }
        case 0x1994000: {
            // 0x403139
            int32_t v2; // 0x4030fa
            *(int32_t *)__current_exception(v2, v2, v2) = v1;
            *(int32_t *)__current_exception_context() = *(int32_t *)(a1 + 4);
            terminate();
            return __asm_int3();
        }
    }
    // 0x403131
    return 0;
}

// Address range: 0x403150 - 0x403158
int32_t function_403150(void) {
    // 0x403150
    g47 = 0;
    int32_t result; // 0x403150
    return result;
}

// Address range: 0x403158 - 0x403184
int32_t function_403158(void) {
    // 0x403158
    int32_t result; // 0x403158
    return result;
}

// Address range: 0x403184 - 0x4031b0
int32_t function_403184(void) {
    // 0x403184
    int32_t result; // 0x403184
    return result;
}

// Address range: 0x4031b0 - 0x4031f5
int32_t function_4031b0(int32_t * a1, int32_t a2, int32_t a3) {
    int32_t v1 = __readfsdword(0); // bp-8, 0x4031b5
    int32_t result = &v1; // 0x4031b5
    int32_t v2 = result - a3; // 0x4031c8
    int32_t v3; // 0x4031b0
    *(int32_t *)(v2 - 16) = g17 ^ (int32_t)&v3;
    *(int32_t *)(v2 - 20) = (int32_t)a1;
    __writefsdword(0, result);
    return result;
}

// Address range: 0x4031f5 - 0x403224
int32_t function_4031f5(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t * v1 = (int32_t *)a1; // 0x4031fc
    *v1 = function_4034cd(*v1);
    return _except_handler4_common();
}

// Address range: 0x403224 - 0x4033f5
int32_t function_403224(void) {
    struct struct3 v1; // 0x403257
    struct struct2 v2; // 0x403292
    // 0x403224
    g48 = 0;
    g19 |= 1;
    if (!IsProcessorFeaturePresent(10)) {
        // 0x4033f1
        return 0;
    }
    // 0x403248
    v1 = __asm_cpuid(0);
    v2 = __asm_cpuid_2(1);
    int32_t v3; // 0x403224
    if ((v1.e1 ^ 0x756e6547 || v1.e2 ^ 0x6c65746e || v1.e3 ^ 0x49656e69) != 0) {
        // 0x4032f2
        v3 = g49;
        goto lab_0x4032f8;
    } else {
        int32_t v4 = v2.e0 & 0xfff3ff0; // 0x4032b2
        switch (v4) {
            case 0x30660: {
                goto lab_0x4032e1;
            }
            case 0x30650: {
                goto lab_0x4032e1;
            }
            case 0x20670: {
                goto lab_0x4032e1;
            }
            case 0x20660: {
                goto lab_0x4032e1;
            }
            case 0x106c0: {
                goto lab_0x4032e1;
            }
            default: {
                if (v4 != 0x30670) {
                    // 0x4032f2
                    v3 = g49;
                    goto lab_0x4032f8;
                } else {
                    goto lab_0x4032e1;
                }
            }
        }
    }
  lab_0x4032f8:
    if (v1.e0 >= 7) {
        // 0x403306
        if ((__asm_cpuid_3(7).e1 & 512) != 0) {
            // 0x40332a
            g49 = v3 | 2;
        }
    }
    int32_t v5 = v2.e2; // 0x403292
    int32_t v6 = g19; // 0x403338
    g48 = 1;
    g19 = v6 | 2;
    if ((v5 & 0x100000) == 0) {
        // 0x4033f1
        return 0;
    }
    // 0x40335b
    g48 = 2;
    g19 = v6 | 6;
    if ((v5 & 0x18000000) == 0x18000000) {
        // 0x40337d
        __asm_xgetbv(0);
    }
    // 0x4033f1
    return 0;
  lab_0x4032e1:;
    int32_t v7 = g49 | 1; // 0x4032e7
    g49 = v7;
    v3 = v7;
    goto lab_0x4032f8;
}

// Address range: 0x4033f5 - 0x403401
int32_t function_4033f5(void) {
    // 0x4033f5
    return g20 != 0;
}

// Address range: 0x403401 - 0x403407
int32_t function_403401(void) {
    // 0x403401
    return __CxxFrameHandler3();
}

// Address range: 0x403407 - 0x40340d
int32_t function_403407(void) {
    // 0x403407
    return __std_terminate();
}

// Address range: 0x40340d - 0x403413
void function_40340d(int32_t * pExceptionObject, int32_t * pThrowInfo) {
    // 0x40340d
    _CxxThrowException(pExceptionObject, pThrowInfo);
}

// Address range: 0x403413 - 0x403419
int32_t function_403413(int32_t a1, int32_t a2, int32_t a3) {
    // 0x403413
    return __current_exception(a1, a2, a3);
}

// Address range: 0x403419 - 0x40341f
int32_t function_403419(void) {
    // 0x403419
    return __current_exception_context();
}

// Address range: 0x40341f - 0x403425
int32_t * function_40341f(int32_t * s, int32_t c, int32_t n) {
    // 0x40341f
    return memset(s, c, n);
}

// Address range: 0x403425 - 0x40342b
int32_t function_403425(void) {
    // 0x403425
    return _except_handler4_common();
}

// Address range: 0x40342b - 0x403431
int32_t function_40342b(int32_t Size) {
    // 0x40342b
    return _callnewh(Size);
}

// Address range: 0x403431 - 0x403437
int32_t * function_403431(int32_t size) {
    // 0x403431
    return malloc(size);
}

// Address range: 0x403437 - 0x40343d
int32_t function_403437(int32_t ExceptionNum, struct _EXCEPTION_POINTERS * ExceptionPtr) {
    // 0x403437
    return _seh_filter_exe(ExceptionNum, ExceptionPtr);
}

// Address range: 0x40343d - 0x403443
void function_40343d(int32_t a1) {
    // 0x40343d
    _set_app_type(a1);
}

// Address range: 0x403443 - 0x403449
void function_403443(int32_t pf) {
    // 0x403443
    __setusermatherr(pf);
}

// Address range: 0x403449 - 0x40344f
int32_t function_403449(int32_t a1) {
    // 0x403449
    return _configure_narrow_argv(a1);
}

// Address range: 0x40344f - 0x403455
int32_t function_40344f(void) {
    // 0x40344f
    return _initialize_narrow_environment();
}

// Address range: 0x403455 - 0x40345b
char ** function_403455(void) {
    // 0x403455
    return _get_initial_narrow_environment();
}

// Address range: 0x40345b - 0x403461
void function_40345b(void (**First)(), void (**Last)()) {
    // 0x40345b
    _initterm(First, Last);
}

// Address range: 0x403461 - 0x403467
int32_t function_403461(int32_t (**First)(), int32_t (**Last)()) {
    // 0x403461
    return _initterm_e(First, Last);
}

// Address range: 0x403467 - 0x40346d
void function_403467(int32_t status) {
    // 0x403467
    exit(status);
}

// Address range: 0x40346d - 0x403473
void function_40346d(int32_t Code) {
    // 0x40346d
    _exit(Code);
}

// Address range: 0x403473 - 0x403479
int32_t function_403473(int32_t Mode) {
    // 0x403473
    return _set_fmode(Mode);
}

// Address range: 0x403479 - 0x40347f
int32_t * function_403479(void) {
    // 0x403479
    return __p___argc();
}

// Address range: 0x40347f - 0x403485
char *** function_40347f(void) {
    // 0x40347f
    return __p___argv();
}

// Address range: 0x403485 - 0x40348b
void function_403485(void) {
    // 0x403485
    _cexit();
}

// Address range: 0x40348b - 0x403491
void function_40348b(void) {
    // 0x40348b
    _c_exit();
}

// Address range: 0x403491 - 0x403497
void function_403491(void (*Callback)(int32_t *, int32_t, int32_t *)) {
    // 0x403491
    _register_thread_local_exe_atexit_callback(Callback);
}

// Address range: 0x403497 - 0x40349d
int32_t function_403497(int32_t Flag) {
    // 0x403497
    return _configthreadlocale(Flag);
}

// Address range: 0x40349d - 0x4034a3
int32_t function_40349d(int32_t NewMode) {
    // 0x40349d
    return _set_new_mode(NewMode);
}

// Address range: 0x4034a3 - 0x4034a9
int32_t * function_4034a3(void) {
    // 0x4034a3
    return __p__commode();
}

// Address range: 0x4034a9 - 0x4034af
int32_t function_4034a9(struct _onexit_table_t * Table) {
    // 0x4034a9
    return _initialize_onexit_table(Table);
}

// Address range: 0x4034af - 0x4034b5
int32_t function_4034af(struct _onexit_table_t * Table, int32_t (*Function)()) {
    // 0x4034af
    return _register_onexit_function(Table, Function);
}

// Address range: 0x4034b5 - 0x4034bb
int32_t function_4034b5(int32_t a1, int32_t a2) {
    // 0x4034b5
    return _crt_atexit(a1, a2);
}

// Address range: 0x4034bb - 0x4034c1
void function_4034bb(int32_t * ptr) {
    // 0x4034bb
    free(ptr);
}

// Address range: 0x4034c1 - 0x4034c7
int32_t function_4034c1(int32_t * CurrentState, int32_t NewValue, int32_t Mask) {
    // 0x4034c1
    return _controlfp_s(CurrentState, NewValue, Mask);
}

// Address range: 0x4034c7 - 0x4034cd
int32_t function_4034c7(void) {
    // 0x4034c7
    return terminate();
}

// Address range: 0x4034cd - 0x403545
int32_t function_4034cd(int32_t result) {
    // 0x4034cd
    if (g48 < 1) {
        // 0x403501
        return result;
    }
    if (result != -0x3ffffd4c == (result != -0x3ffffd4b)) {
        // 0x403501
        return result;
    }
    // 0x4034ec
    int32_t v1; // 0x4034cd
    __asm_stmxcsr(v1);
    int32_t v2 = v1 ^ 63; // 0x4034f3
    if ((v2 & 129) == 0) {
        // 0x403501
        return -0x3fffff70;
    }
    // 0x4034fa
    if ((v2 & 516) == 0) {
        // 0x403501
        return -0x3fffff72;
    }
    // 0x403508
    if ((v2 & 258) == 0) {
        // 0x403501
        return -0x3fffff70;
    }
    // 0x40350f
    if ((v2 & 1032) == 0) {
        // 0x403501
        return -0x3fffff6f;
    }
    // 0x40351d
    if ((v2 & 2064) == 0) {
        // 0x403501
        return -0x3fffff6d;
    }
    // 0x40352b
    if ((v2 & 0x1020) == 0) {
        // 0x403501
        return -0x3fffff71;
    }
    // 0x403501
    return result;
}

// Address range: 0x403545 - 0x40354b
int32_t * function_403545(int32_t * dest, int32_t * src, int32_t n) {
    // 0x403545
    return memcpy(dest, src, n);
}

// Address range: 0x40354b - 0x403551
int32_t * function_40354b(int32_t * dest, int32_t * src, int32_t n) {
    // 0x40354b
    return memmove(dest, src, n);
}

// Address range: 0x403560 - 0x403579
int32_t function_403560(void) {
    // 0x403560
    int32_t v1; // 0x403560
    int32_t * v2 = (int32_t *)(v1 - 68); // 0x403560
    int32_t v3 = *v2; // 0x403560
    if ((v3 & 1) == 0) {
        // 0x403578
        return 0;
    }
    // 0x40356c
    *v2 = v3 & -2;
    return 1;
}

// Address range: 0x403580 - 0x40359b
int32_t function_403580(int32_t a1) {
    // 0x403580
    function_402805();
    return __CxxFrameHandler3();
}

// Address range: 0x4035a0 - 0x4035a8
int32_t function_4035a0(void) {
    // 0x4035a0
    int32_t result; // 0x4035a0
    return result;
}

// Address range: 0x4035af - 0x4035ca
int32_t function_4035af(int32_t a1) {
    // 0x4035af
    function_402805();
    return __CxxFrameHandler3();
}

// Address range: 0x4035d0 - 0x4035d8
int32_t function_4035d0(void) {
    // 0x4035d0
    return function_401d50();
}

// Address range: 0x4035d8 - 0x4035e0
int32_t function_4035d8(void) {
    // 0x4035d8
    return function_401ce0();
}

// Address range: 0x4035e7 - 0x403602
int32_t function_4035e7(int32_t a1) {
    // 0x4035e7
    function_402805();
    return __CxxFrameHandler3();
}

// Address range: 0x403612 - 0x40362d
int32_t function_403612(int32_t a1) {
    // 0x403612
    function_402805();
    return __CxxFrameHandler3();
}

// Address range: 0x403632 - 0x40364d
int32_t function_403632(int32_t a1) {
    // 0x403632
    function_402805();
    return __CxxFrameHandler3();
}

// Address range: 0x403650 - 0x40365b
int32_t function_403650(void) {
    // 0x403650
    int32_t result; // 0x403650
    return result;
}

// Address range: 0x40365b - 0x403666
int32_t function_40365b(void) {
    // 0x40365b
    int32_t result; // 0x40365b
    return result;
}

// Address range: 0x403666 - 0x403671
int32_t function_403666(void) {
    // 0x403666
    int32_t result; // 0x403666
    return result;
}

// Address range: 0x403671 - 0x40367c
int32_t function_403671(void) {
    // 0x403671
    int32_t result; // 0x403671
    return result;
}

// Address range: 0x40367c - 0x403687
int32_t function_40367c(void) {
    // 0x40367c
    int32_t result; // 0x40367c
    return result;
}

// Address range: 0x40368e - 0x4036b6
int32_t function_40368e(int32_t a1) {
    // 0x40368e
    function_402805();
    function_402805();
    return __CxxFrameHandler3();
}

// Address range: 0x4036c0 - 0x4036c9
int32_t function_4036c0(void) {
    // 0x4036c0
    return _3f__3f_1_Lockit_40_std_40__40_QAE_40_XZ();
}

// Address range: 0x4036c9 - 0x4036d1
int32_t function_4036c9(void) {
    // 0x4036c9
    return function_402520();
}

// Address range: 0x4036d8 - 0x4036fd
int32_t function_4036d8(int32_t a1) {
    // 0x4036d8
    function_402805();
    function_402805();
    return __CxxFrameHandler3();
}

// Address range: 0x403700 - 0x403708
int32_t function_403700(void) {
    // 0x403700
    return function_401d50();
}

// Address range: 0x403708 - 0x403710
int32_t function_403708(void) {
    // 0x403708
    return function_402730();
}

// Address range: 0x403710 - 0x403718
int32_t function_403710(void) {
    // 0x403710
    return function_401e20();
}

// Address range: 0x40371f - 0x40373a
int32_t function_40371f(int32_t a1) {
    // 0x40371f
    function_402805();
    return __CxxFrameHandler3();
}

// Address range: 0x403742 - 0x40375d
int32_t function_403742(int32_t a1) {
    // 0x403742
    function_402805();
    return __CxxFrameHandler3();
}

// Address range: 0x40375d - 0x403767
int32_t function_40375d(void) {
    // 0x40375d
    return function_4027b2();
}

// --------------------- Meta-Information ---------------------

// Detected compiler/packer: microsoft
// Detected functions: 142



This is example3/attachment-9.exe.ll.
source_filename = "test"
target datalayout = "e-p:32:32-f64:32:64-f80:32-n8:16:32-S128"

%0 = type { i32, i32, i32, i32 }
%1 = type { i32, i32, i32, i32 }
%2 = type { i32, i32, i32, i32 }
%_onexit_table_t = type { void ()**, void ()**, void ()** }
%_EXCEPTION_POINTERS = type { %_EXCEPTION_RECORD*, %_CONTEXT* }
%_EXCEPTION_RECORD = type { i32, i32, %_EXCEPTION_RECORD*, i32*, i32, [1 x i32] }
%_CONTEXT = type { i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i16, i16, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [26 x %_M128A], i32, i32, i32, i32, i32, i32 }
%_M128A = type { i32, i64 }
%_FILETIME = type { i32, i32 }
%_LARGE_INTEGER = type { i64 }

@global_var_404194 = constant i32 4198480
@global_var_4041c4 = constant [18 x i8] c"Unknown exception\00"
@global_var_4041d8 = constant [21 x i8] c"bad array new length\00"
@global_var_4041bc = constant i32 4198480
@global_var_404c20 = constant i32 0
@global_var_4041a0 = constant i32 4198480
@global_var_4041f0 = constant [16 x i8] c"string too long\00"
@global_var_406008 = local_unnamed_addr global i32 -1153374642
@B64EncodeTable_at_404200 = constant [64 x i8] c"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
@rfc3548_Base_64_Encoding_with_URL_and_Filename_Safe_Alphabet_at_404248 = constant [62 x i8] c"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"
@global_var_40428c = constant [2 x i8*] [i8* getelementptr inbounds ([64 x i8], [64 x i8]* @B64EncodeTable_at_404200, i32 0, i32 0), i8* getelementptr inbounds ([62 x i8], [62 x i8]* @rfc3548_Base_64_Encoding_with_URL_and_Filename_Safe_Alphabet_at_404248, i32 0, i32 0)]
@global_var_4042a0 = constant [9 x i8] c"bad cast\00"
@global_var_404304 = constant i32 4198480
@global_var_404c74 = constant i32 0
@global_var_404298 = local_unnamed_addr constant [8 x i8] c"error!\0A\00"
@global_var_4042f8 = constant [6 x i8] c"pause\00"
@global_var_4042ac = constant [29 x i8] c"=ITU5NXeyMXVjFWUzZXezJUYyMXV\00"
@global_var_4042cc = local_unnamed_addr constant [36 x i8] c"Congratulations! Fill in your flag!\00"
@global_var_4042f0 = local_unnamed_addr constant [7 x i8] c"error!\00"
@global_var_406424 = local_unnamed_addr global i32 0
@global_var_4060b0 = local_unnamed_addr global i32 0
@global_var_404184 = constant i32 4204625
@global_var_404b80 = constant i32 -2
@global_var_4060b8 = local_unnamed_addr global i32 0
@global_var_404158 = constant i32 0
@global_var_40414c = constant i32 0
@global_var_4060bc = local_unnamed_addr global i32 0
@global_var_4060d0 = global i32 0
@global_var_4060c8 = local_unnamed_addr global i32 0
@global_var_4060cc = local_unnamed_addr global i32 0
@global_var_4060d4 = local_unnamed_addr global i32 0
@global_var_4060d8 = local_unnamed_addr global i32 0
@global_var_404ba0 = constant i32 -2
@global_var_4061e0 = local_unnamed_addr global i32 0
@global_var_4061dc = local_unnamed_addr global i32 0
@global_var_4061d8 = local_unnamed_addr global i32 0
@global_var_4061d4 = local_unnamed_addr global i32 0
@global_var_4061d0 = local_unnamed_addr global i32 0
@global_var_4061cc = local_unnamed_addr global i32 0
@global_var_4061f8 = local_unnamed_addr global i32 0
@global_var_4061ec = local_unnamed_addr global i32 0
@global_var_4061c8 = local_unnamed_addr global i32 0
@global_var_4061c4 = local_unnamed_addr global i32 0
@global_var_4061c0 = local_unnamed_addr global i32 0
@global_var_4061bc = local_unnamed_addr global i32 0
@global_var_4061f0 = local_unnamed_addr global i32 0
@global_var_4061e4 = local_unnamed_addr global i32 0
@global_var_4061e8 = local_unnamed_addr global i32 0
@global_var_4061f4 = local_unnamed_addr global i32 0
@global_var_406130 = local_unnamed_addr global i32 0
@global_var_4060ec = local_unnamed_addr global i32 0
@global_var_4060e0 = local_unnamed_addr global i32 0
@global_var_4060e4 = local_unnamed_addr global i32 0
@global_var_4060f0 = local_unnamed_addr global i32 0
@global_var_4060f4 = local_unnamed_addr global i32 0
@global_var_406004 = local_unnamed_addr global i32 1153374641
@global_var_404488 = local_unnamed_addr constant i32 0
@global_var_4041a8 = constant [15 x i8] c"bad allocation\00"
@global_var_404bbc = constant i32 0
@global_var_406400 = global i32 0
@global_var_406408 = global i32 0
@global_var_406410 = global i32 0
@global_var_40600c = local_unnamed_addr global i32 1
@global_var_40642c = global i32 0
@global_var_406428 = global i32 0
@global_var_406418 = local_unnamed_addr global i32 0
@global_var_404950 = local_unnamed_addr constant i32 0
@global_var_404958 = local_unnamed_addr constant i32 0
@global_var_402805 = local_unnamed_addr constant [6 x i8] c";\0D\08`@\00"
@global_var_40641c = local_unnamed_addr global i32 0
@global_var_406010 = local_unnamed_addr global i32 1
@global_var_406420 = local_unnamed_addr global i32 0
@global_var_406014 = local_unnamed_addr global i32 1
@global_var_404960 = local_unnamed_addr constant i32 429065506
@global_var_40498c = local_unnamed_addr constant i32 429065506
@global_var_4049b8 = local_unnamed_addr constant i32 429065506
@global_var_404a30 = local_unnamed_addr constant i32 429065506
@global_var_404a5c = local_unnamed_addr constant i32 429065506
@global_var_404a80 = local_unnamed_addr constant i32 429065506
@global_var_404ad4 = local_unnamed_addr constant i32 429065506
@global_var_404b08 = local_unnamed_addr constant i32 429065506
@global_var_4060b4 = local_unnamed_addr global i32 0
@0 = external global i32
@global_var_404168 = constant i32 ()** null
@global_var_40415c = constant i32 ()** null
@global_var_4060c0 = local_unnamed_addr global i8 0
@global_var_4060c1 = local_unnamed_addr global i8 0
@global_var_4060c4 = global %_onexit_table_t* null

define i32 @function_401000() local_unnamed_addr {
dec_label_pc_401000:
  %0 = call i32 @function_402d01(i32 4208477), !insn.addr !0
  ret i32 %0, !insn.addr !1
}

define i32 @function_401010(i32 %arg1) local_unnamed_addr {
dec_label_pc_401010:
  %0 = alloca i128
  %1 = alloca i32
  %2 = load i32, i32* %1
  %3 = load i128, i128* %0
  %4 = call i128 @__asm_xorps(i128 %3, i128 %3), !insn.addr !2
  %5 = add i32 %2, 4, !insn.addr !3
  %6 = inttoptr i32 %2 to i32*, !insn.addr !4
  store i32 ptrtoint (i32* @global_var_404194 to i32), i32* %6, align 4, !insn.addr !4
  %7 = inttoptr i32 %5 to i64*, !insn.addr !5
  %8 = load i64, i64* %7, align 4, !insn.addr !5
  call void @__asm_movq(i64 %8, i128 %4), !insn.addr !5
  %9 = add i32 %arg1, 4, !insn.addr !6
  %10 = call i32 @__std_exception_copy(i32 %9), !insn.addr !7
  ret i32 %2, !insn.addr !8

; uselistorder directives
  uselistorder i32 %2, { 0, 2, 1 }
}

define i32 @function_401040() local_unnamed_addr {
dec_label_pc_401040:
  %0 = alloca i32
  %1 = load i32, i32* %0
  %2 = add i32 %1, 4, !insn.addr !9
  %3 = inttoptr i32 %2 to i32*, !insn.addr !9
  %4 = load i32, i32* %3, align 4, !insn.addr !9
  %5 = icmp eq i32 %4, 0, !insn.addr !10
  %6 = icmp eq i1 %5, false, !insn.addr !11
  %7 = select i1 %6, i32 %4, i32 ptrtoint ([18 x i8]* @global_var_4041c4 to i32), !insn.addr !11
  ret i32 %7, !insn.addr !12

; uselistorder directives
  uselistorder i32 %4, { 1, 0 }
}

define i32 @function_401050(i8 %arg1) local_unnamed_addr {
dec_label_pc_401050:
  %0 = alloca i32
  %1 = load i32, i32* %0
  %2 = add i32 %1, 4, !insn.addr !13
  %3 = inttoptr i32 %1 to i32*, !insn.addr !14
  store i32 ptrtoint (i32* @global_var_404194 to i32), i32* %3, align 4, !insn.addr !14
  %4 = call i32 @__std_exception_destroy(i32 %2), !insn.addr !15
  %5 = and i8 %arg1, 1, !insn.addr !16
  %6 = icmp eq i8 %5, 0, !insn.addr !16
  br i1 %6, label %dec_label_pc_40107a, label %dec_label_pc_40106f, !insn.addr !17

dec_label_pc_40106f:                              ; preds = %dec_label_pc_401050
  %7 = call i32 @function_402843(i32 %1), !insn.addr !18
  br label %dec_label_pc_40107a, !insn.addr !19

dec_label_pc_40107a:                              ; preds = %dec_label_pc_40106f, %dec_label_pc_401050
  ret i32 %1, !insn.addr !20

; uselistorder directives
  uselistorder i32 %1, { 2, 3, 1, 0 }
}

define i32 @function_401090() local_unnamed_addr {
dec_label_pc_401090:
  %0 = alloca i32
  %1 = load i32, i32* %0
  %2 = add i32 %1, 4, !insn.addr !21
  %3 = inttoptr i32 %1 to i32*, !insn.addr !22
  store i32 ptrtoint (i32* @global_var_404194 to i32), i32* %3, align 4, !insn.addr !22
  %4 = call i32 @__std_exception_destroy(i32 %2), !insn.addr !23
  ret i32 %4, !insn.addr !24

; uselistorder directives
  uselistorder i32 %1, { 1, 0 }
  uselistorder i32 (i32)* @__std_exception_destroy, { 1, 0 }
}

define i32 @function_4010b0() local_unnamed_addr {
dec_label_pc_4010b0:
  %0 = alloca i128
  %1 = alloca i32
  %2 = load i32, i32* %1
  %3 = load i128, i128* %0
  %4 = call i128 @__asm_xorps(i128 %3, i128 %3), !insn.addr !25
  %5 = add i32 %2, 4, !insn.addr !26
  %6 = inttoptr i32 %5 to i64*, !insn.addr !26
  %7 = load i64, i64* %6, align 4, !insn.addr !26
  call void @__asm_movq(i64 %7, i128 %4), !insn.addr !26
  %8 = inttoptr i32 %5 to i32*, !insn.addr !27
  store i32 ptrtoint ([21 x i8]* @global_var_4041d8 to i32), i32* %8, align 4, !insn.addr !27
  %9 = inttoptr i32 %2 to i32*, !insn.addr !28
  store i32 ptrtoint (i32* @global_var_4041bc to i32), i32* %9, align 4, !insn.addr !28
  ret i32 %2, !insn.addr !29

; uselistorder directives
  uselistorder i128 %3, { 1, 0 }
  uselistorder i32 %2, { 0, 2, 1 }
}

define i32 @function_4010d0() local_unnamed_addr {
dec_label_pc_4010d0:
  %stack_var_-16 = alloca i32, align 4
  %0 = call i32 @function_4010b0(), !insn.addr !30
  call void @_CxxThrowException(i32* nonnull %stack_var_-16, i32* nonnull @global_var_404c20), !insn.addr !31
  unreachable, !insn.addr !31
}

define i32 @function_4010f0(i32 %arg1) local_unnamed_addr {
dec_label_pc_4010f0:
  %0 = alloca i128
  %1 = alloca i32
  %2 = load i32, i32* %1
  %3 = load i128, i128* %0
  %4 = call i128 @__asm_xorps(i128 %3, i128 %3), !insn.addr !32
  %5 = add i32 %2, 4, !insn.addr !33
  %6 = inttoptr i32 %2 to i32*, !insn.addr !34
  store i32 ptrtoint (i32* @global_var_404194 to i32), i32* %6, align 4, !insn.addr !34
  %7 = inttoptr i32 %5 to i64*, !insn.addr !35
  %8 = load i64, i64* %7, align 4, !insn.addr !35
  call void @__asm_movq(i64 %8, i128 %4), !insn.addr !35
  %9 = add i32 %arg1, 4, !insn.addr !36
  %10 = call i32 @__std_exception_copy(i32 %9), !insn.addr !37
  store i32 ptrtoint (i32* @global_var_4041bc to i32), i32* %6, align 4, !insn.addr !38
  ret i32 %2, !insn.addr !39

; uselistorder directives
  uselistorder i32 %2, { 0, 2, 1 }
}

define i32 @function_401130(i32 %arg1) local_unnamed_addr {
dec_label_pc_401130:
  %0 = alloca i128
  %1 = alloca i32
  %2 = load i32, i32* %1
  %3 = load i128, i128* %0
  %4 = call i128 @__asm_xorps(i128 %3, i128 %3), !insn.addr !40
  %5 = add i32 %2, 4, !insn.addr !41
  %6 = inttoptr i32 %2 to i32*, !insn.addr !42
  store i32 ptrtoint (i32* @global_var_404194 to i32), i32* %6, align 4, !insn.addr !42
  %7 = inttoptr i32 %5 to i64*, !insn.addr !43
  %8 = load i64, i64* %7, align 4, !insn.addr !43
  call void @__asm_movq(i64 %8, i128 %4), !insn.addr !43
  %9 = add i32 %arg1, 4, !insn.addr !44
  %10 = call i32 @__std_exception_copy(i32 %9), !insn.addr !45
  store i32 ptrtoint (i32* @global_var_4041a0 to i32), i32* %6, align 4, !insn.addr !46
  ret i32 %2, !insn.addr !47

; uselistorder directives
  uselistorder i32 %2, { 0, 2, 1 }
}

define i32 @function_401170() local_unnamed_addr {
dec_label_pc_401170:
  %0 = call i32 @"?_Xlength_error@std@@YAXPBD@Z"(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @global_var_4041f0, i32 0, i32 0)), !insn.addr !48
  %1 = call i32 @__asm_int3(), !insn.addr !49
  %2 = call i32 @__asm_int3(), !insn.addr !50
  %3 = call i32 @__asm_int3(), !insn.addr !51
  %4 = call i32 @__asm_int3(), !insn.addr !52
  %5 = call i32 @__asm_int3(), !insn.addr !53
  ret i32 %5, !insn.addr !53
}

define i32 @function_401180(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_401180:
  %0 = alloca i32
  %esp.9.reg2mem = alloca i32, !insn.addr !54
  %esp.8.reg2mem = alloca i32, !insn.addr !54
  %ecx.1.reg2mem = alloca i32, !insn.addr !54
  %esp.7.reg2mem = alloca i32, !insn.addr !54
  %edx.0.reg2mem = alloca i32, !insn.addr !54
  %ecx.0.reg2mem = alloca i32, !insn.addr !54
  %esp.6.reg2mem = alloca i32, !insn.addr !54
  %esp.5.reg2mem = alloca i32, !insn.addr !54
  %esp.4.reg2mem = alloca i32, !insn.addr !54
  %esp.3.reg2mem = alloca i32, !insn.addr !54
  %esp.2.reg2mem = alloca i32, !insn.addr !54
  %esp.1.reg2mem = alloca i32, !insn.addr !54
  %edi.0.reg2mem = alloca i32, !insn.addr !54
  %esp.0.reg2mem = alloca i32, !insn.addr !54
  %stack_var_-64.0.reg2mem = alloca i32, !insn.addr !54
  %stack_var_-60.0.reg2mem = alloca i32, !insn.addr !54
  %1 = load i32, i32* %0
  %2 = load i32, i32* %0
  %stack_var_-128 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %3 = call i32 @__readfsdword(i32 0), !insn.addr !55
  store i32 %3, i32* %stack_var_-16, align 4, !insn.addr !56
  %4 = ptrtoint i32* %stack_var_-16 to i32, !insn.addr !57
  call void @__writefsdword(i32 0, i32 %4), !insn.addr !58
  %5 = inttoptr i32 %2 to i32*, !insn.addr !59
  store i32 0, i32* %5, align 4, !insn.addr !59
  %6 = add i32 %arg1, 2, !insn.addr !60
  %7 = add i32 %2, 16, !insn.addr !61
  %8 = inttoptr i32 %7 to i32*, !insn.addr !61
  store i32 0, i32* %8, align 4, !insn.addr !61
  %9 = and i32 %6, -4, !insn.addr !62
  %10 = add i32 %2, 20, !insn.addr !63
  %11 = inttoptr i32 %10 to i32*, !insn.addr !63
  store i32 15, i32* %11, align 4, !insn.addr !63
  %12 = mul i32 %arg2, 4, !insn.addr !64
  %13 = and i32 %12, 1020, !insn.addr !65
  %14 = add i32 %13, ptrtoint ([2 x i8*]* @global_var_40428c to i32), !insn.addr !65
  %15 = inttoptr i32 %14 to i32*, !insn.addr !65
  %16 = load i32, i32* %15, align 4, !insn.addr !65
  %17 = inttoptr i32 %2 to i8*, !insn.addr !66
  store i8 0, i8* %17, align 1, !insn.addr !66
  store i32 %9, i32* %stack_var_-128, align 4, !insn.addr !67
  %18 = call i32 @function_401560(i32 %9), !insn.addr !68
  %19 = icmp eq i32 %arg1, 0, !insn.addr !69
  br i1 %19, label %dec_label_pc_4014aa, label %dec_label_pc_401229, !insn.addr !70

dec_label_pc_401229:                              ; preds = %dec_label_pc_401180
  %20 = trunc i32 %arg2 to i8, !insn.addr !71
  %21 = icmp eq i8 %20, 0, !insn.addr !71
  %22 = icmp eq i1 %21, false, !insn.addr !72
  %23 = select i1 %22, i8 46, i8 61, !insn.addr !73
  %24 = ptrtoint i32* %stack_var_-128 to i32, !insn.addr !67
  %25 = add i32 %1, 2, !insn.addr !74
  %26 = xor i32 %1, -1, !insn.addr !75
  %27 = add i32 %arg1, -1, !insn.addr !76
  %28 = udiv i32 %27, 3, !insn.addr !77
  %29 = add nuw i32 %28, 1, !insn.addr !78
  %30 = zext i8 %23 to i32
  store i32 2, i32* %stack_var_-60.0.reg2mem, !insn.addr !79
  store i32 %29, i32* %stack_var_-64.0.reg2mem, !insn.addr !79
  store i32 %24, i32* %esp.0.reg2mem, !insn.addr !79
  store i32 %25, i32* %edi.0.reg2mem, !insn.addr !79
  br label %dec_label_pc_401250, !insn.addr !79

dec_label_pc_401250:                              ; preds = %dec_label_pc_401496, %dec_label_pc_401229
  %edi.0.reload = load i32, i32* %edi.0.reg2mem
  %esp.0.reload = load i32, i32* %esp.0.reg2mem
  %stack_var_-64.0.reload = load i32, i32* %stack_var_-64.0.reg2mem
  %stack_var_-60.0.reload = load i32, i32* %stack_var_-60.0.reg2mem
  %31 = add i32 %edi.0.reload, -2, !insn.addr !80
  %32 = inttoptr i32 %31 to i8*, !insn.addr !80
  %33 = load i8, i8* %32, align 1, !insn.addr !80
  %34 = load i32, i32* %8, align 4, !insn.addr !81
  %35 = load i32, i32* %11, align 4, !insn.addr !82
  %36 = udiv i8 %33, 4
  %37 = zext i8 %36 to i32, !insn.addr !83
  %38 = add i32 %16, %37, !insn.addr !84
  %39 = inttoptr i32 %38 to i8*, !insn.addr !84
  %40 = load i8, i8* %39, align 1, !insn.addr !84
  %41 = icmp ult i32 %34, %35, !insn.addr !85
  %42 = icmp eq i1 %41, false, !insn.addr !86
  br i1 %42, label %dec_label_pc_401280, label %dec_label_pc_401267, !insn.addr !86

dec_label_pc_401267:                              ; preds = %dec_label_pc_401250
  %43 = add i32 %34, 1
  store i32 %43, i32* %8, align 4, !insn.addr !87
  %44 = icmp ult i32 %35, 16, !insn.addr !88
  %spec.select = select i1 %44, i32 %2, i32 %34
  %45 = add i32 %spec.select, %34, !insn.addr !89
  %46 = inttoptr i32 %45 to i8*, !insn.addr !89
  store i8 %40, i8* %46, align 1, !insn.addr !89
  %47 = add i32 %spec.select, %43, !insn.addr !90
  %48 = inttoptr i32 %47 to i8*, !insn.addr !90
  store i8 0, i8* %48, align 1, !insn.addr !90
  store i32 %esp.0.reload, i32* %esp.1.reg2mem, !insn.addr !91
  br label %dec_label_pc_401292, !insn.addr !91

dec_label_pc_401280:                              ; preds = %dec_label_pc_401250
  %49 = sext i8 %40 to i32, !insn.addr !92
  %50 = add i32 %esp.0.reload, -4, !insn.addr !92
  %51 = inttoptr i32 %50 to i32*, !insn.addr !92
  store i32 %49, i32* %51, align 4, !insn.addr !92
  %52 = add i32 %esp.0.reload, -8, !insn.addr !93
  %53 = inttoptr i32 %52 to i32*, !insn.addr !93
  store i32 0, i32* %53, align 4, !insn.addr !93
  %54 = add i32 %esp.0.reload, -12, !insn.addr !94
  %55 = inttoptr i32 %54 to i32*, !insn.addr !94
  store i32 %34, i32* %55, align 4, !insn.addr !94
  %56 = call i32 @function_401960(i8 0), !insn.addr !95
  store i32 %54, i32* %esp.1.reg2mem, !insn.addr !95
  br label %dec_label_pc_401292, !insn.addr !95

dec_label_pc_401292:                              ; preds = %dec_label_pc_401280, %dec_label_pc_401267
  %esp.1.reload = load i32, i32* %esp.1.reg2mem
  %57 = load i8, i8* %32, align 1, !insn.addr !96
  %58 = load i32, i32* %11, align 4, !insn.addr !97
  %59 = add i32 %edi.0.reload, %26, !insn.addr !98
  %60 = mul i8 %57, 16
  %61 = and i8 %60, 48
  %62 = icmp ult i32 %59, %arg1, !insn.addr !99
  %63 = icmp eq i1 %62, false, !insn.addr !100
  br i1 %63, label %dec_label_pc_4013e9, label %dec_label_pc_4012ad, !insn.addr !100

dec_label_pc_4012ad:                              ; preds = %dec_label_pc_401292
  %64 = add i32 %edi.0.reload, -1, !insn.addr !101
  %65 = inttoptr i32 %64 to i8*, !insn.addr !101
  %66 = load i8, i8* %65, align 1, !insn.addr !101
  %67 = udiv i8 %66, 16
  %68 = or i8 %67, %61
  %69 = zext i8 %68 to i32, !insn.addr !102
  %70 = add i32 %16, %69, !insn.addr !103
  %71 = inttoptr i32 %70 to i8*, !insn.addr !103
  %72 = load i8, i8* %71, align 1, !insn.addr !103
  %73 = load i32, i32* %8, align 4, !insn.addr !104
  %74 = icmp ult i32 %73, %58, !insn.addr !105
  %75 = icmp eq i1 %74, false, !insn.addr !106
  br i1 %75, label %dec_label_pc_4012df, label %dec_label_pc_4012c6, !insn.addr !106

dec_label_pc_4012c6:                              ; preds = %dec_label_pc_4012ad
  %76 = add i32 %73, 1
  store i32 %76, i32* %8, align 4, !insn.addr !107
  %77 = icmp ult i32 %58, 16, !insn.addr !108
  %spec.select2 = select i1 %77, i32 %2, i32 %73
  %78 = add i32 %spec.select2, %73, !insn.addr !109
  %79 = inttoptr i32 %78 to i8*, !insn.addr !109
  store i8 %72, i8* %79, align 1, !insn.addr !109
  %80 = add i32 %76, %spec.select2, !insn.addr !110
  %81 = inttoptr i32 %80 to i8*, !insn.addr !110
  store i8 0, i8* %81, align 1, !insn.addr !110
  store i32 %esp.1.reload, i32* %esp.2.reg2mem, !insn.addr !111
  br label %dec_label_pc_4012f1, !insn.addr !111

dec_label_pc_4012df:                              ; preds = %dec_label_pc_4012ad
  %82 = sext i8 %72 to i32, !insn.addr !112
  %83 = add i32 %esp.1.reload, -4, !insn.addr !112
  %84 = inttoptr i32 %83 to i32*, !insn.addr !112
  store i32 %82, i32* %84, align 4, !insn.addr !112
  %85 = add i32 %esp.1.reload, -8, !insn.addr !113
  %86 = inttoptr i32 %85 to i32*, !insn.addr !113
  store i32 0, i32* %86, align 4, !insn.addr !113
  %87 = add i32 %esp.1.reload, -12, !insn.addr !114
  %88 = inttoptr i32 %87 to i32*, !insn.addr !114
  store i32 %73, i32* %88, align 4, !insn.addr !114
  %89 = call i32 @function_401960(i8 0), !insn.addr !115
  store i32 %87, i32* %esp.2.reg2mem, !insn.addr !115
  br label %dec_label_pc_4012f1, !insn.addr !115

dec_label_pc_4012f1:                              ; preds = %dec_label_pc_4012df, %dec_label_pc_4012c6
  %esp.2.reload = load i32, i32* %esp.2.reg2mem
  %90 = load i8, i8* %65, align 1, !insn.addr !116
  %91 = load i32, i32* %11, align 4, !insn.addr !117
  %92 = mul i8 %90, 4
  %93 = and i8 %92, 60
  %94 = icmp ult i32 %stack_var_-60.0.reload, %arg1, !insn.addr !118
  %95 = icmp eq i1 %94, false, !insn.addr !119
  br i1 %95, label %dec_label_pc_401391, label %dec_label_pc_40130a, !insn.addr !119

dec_label_pc_40130a:                              ; preds = %dec_label_pc_4012f1
  %96 = inttoptr i32 %edi.0.reload to i8*, !insn.addr !120
  %97 = load i8, i8* %96, align 1, !insn.addr !120
  %98 = udiv i8 %97, 64
  %99 = or i8 %98, %93
  %100 = zext i8 %99 to i32, !insn.addr !121
  %101 = add i32 %16, %100, !insn.addr !122
  %102 = inttoptr i32 %101 to i8*, !insn.addr !122
  %103 = load i8, i8* %102, align 1, !insn.addr !122
  %104 = load i32, i32* %8, align 4, !insn.addr !123
  %105 = icmp ult i32 %104, %91, !insn.addr !124
  %106 = icmp eq i1 %105, false, !insn.addr !125
  br i1 %106, label %dec_label_pc_40133b, label %dec_label_pc_401322, !insn.addr !125

dec_label_pc_401322:                              ; preds = %dec_label_pc_40130a
  %107 = add i32 %104, 1
  store i32 %107, i32* %8, align 4, !insn.addr !126
  %108 = icmp ult i32 %91, 16, !insn.addr !127
  %spec.select3 = select i1 %108, i32 %2, i32 %104
  %109 = add i32 %spec.select3, %104, !insn.addr !128
  %110 = inttoptr i32 %109 to i8*, !insn.addr !128
  store i8 %103, i8* %110, align 1, !insn.addr !128
  %111 = add i32 %107, %spec.select3, !insn.addr !129
  %112 = inttoptr i32 %111 to i8*, !insn.addr !129
  store i8 0, i8* %112, align 1, !insn.addr !129
  store i32 %esp.2.reload, i32* %esp.3.reg2mem, !insn.addr !130
  br label %dec_label_pc_40134d, !insn.addr !130

dec_label_pc_40133b:                              ; preds = %dec_label_pc_40130a
  %113 = sext i8 %103 to i32, !insn.addr !131
  %114 = add i32 %esp.2.reload, -4, !insn.addr !131
  %115 = inttoptr i32 %114 to i32*, !insn.addr !131
  store i32 %113, i32* %115, align 4, !insn.addr !131
  %116 = add i32 %esp.2.reload, -8, !insn.addr !132
  %117 = inttoptr i32 %116 to i32*, !insn.addr !132
  store i32 0, i32* %117, align 4, !insn.addr !132
  %118 = add i32 %esp.2.reload, -12, !insn.addr !133
  %119 = inttoptr i32 %118 to i32*, !insn.addr !133
  store i32 %104, i32* %119, align 4, !insn.addr !133
  %120 = call i32 @function_401960(i8 0), !insn.addr !134
  store i32 %118, i32* %esp.3.reg2mem, !insn.addr !134
  br label %dec_label_pc_40134d, !insn.addr !134

dec_label_pc_40134d:                              ; preds = %dec_label_pc_40133b, %dec_label_pc_401322
  %esp.3.reload = load i32, i32* %esp.3.reg2mem
  %121 = load i8, i8* %96, align 1, !insn.addr !135
  %122 = and i8 %121, 63
  %123 = zext i8 %122 to i32, !insn.addr !136
  %124 = load i32, i32* %11, align 4, !insn.addr !137
  %125 = add i32 %16, %123, !insn.addr !138
  %126 = inttoptr i32 %125 to i8*, !insn.addr !138
  %127 = load i8, i8* %126, align 1, !insn.addr !138
  %128 = load i32, i32* %8, align 4, !insn.addr !139
  %129 = icmp ult i32 %128, %124, !insn.addr !140
  %130 = icmp eq i1 %129, false, !insn.addr !141
  br i1 %130, label %dec_label_pc_401382, label %dec_label_pc_401366, !insn.addr !141

dec_label_pc_401366:                              ; preds = %dec_label_pc_40134d
  %131 = add i32 %128, 1
  store i32 %131, i32* %8, align 4, !insn.addr !142
  %132 = icmp ult i32 %124, 16, !insn.addr !143
  %spec.select4 = select i1 %132, i32 %2, i32 %128
  %133 = add i32 %spec.select4, %128, !insn.addr !144
  %134 = inttoptr i32 %133 to i8*, !insn.addr !144
  store i8 %127, i8* %134, align 1, !insn.addr !144
  %135 = add i32 %131, %spec.select4, !insn.addr !145
  %136 = inttoptr i32 %135 to i8*, !insn.addr !145
  store i8 0, i8* %136, align 1, !insn.addr !145
  store i32 %esp.3.reload, i32* %esp.9.reg2mem, !insn.addr !146
  br label %dec_label_pc_401496, !insn.addr !146

dec_label_pc_401382:                              ; preds = %dec_label_pc_40134d
  %137 = sext i8 %127 to i32, !insn.addr !147
  %138 = add i32 %esp.3.reload, -4, !insn.addr !147
  %139 = inttoptr i32 %138 to i32*, !insn.addr !147
  store i32 %137, i32* %139, align 4, !insn.addr !147
  %140 = add i32 %esp.3.reload, -8, !insn.addr !148
  %141 = inttoptr i32 %140 to i32*, !insn.addr !148
  store i32 0, i32* %141, align 4, !insn.addr !148
  store i32 %128, i32* %ecx.1.reg2mem, !insn.addr !149
  store i32 %140, i32* %esp.8.reg2mem, !insn.addr !149
  br label %dec_label_pc_40148e, !insn.addr !149

dec_label_pc_401391:                              ; preds = %dec_label_pc_4012f1
  %142 = zext i8 %93 to i32, !insn.addr !150
  %143 = add i32 %16, %142, !insn.addr !151
  %144 = inttoptr i32 %143 to i8*, !insn.addr !151
  %145 = load i8, i8* %144, align 1, !insn.addr !151
  %146 = load i32, i32* %8, align 4, !insn.addr !152
  %147 = icmp ult i32 %146, %91, !insn.addr !153
  %148 = icmp eq i1 %147, false, !insn.addr !154
  br i1 %148, label %dec_label_pc_4013ba, label %dec_label_pc_4013a1, !insn.addr !154

dec_label_pc_4013a1:                              ; preds = %dec_label_pc_401391
  %149 = add i32 %146, 1
  store i32 %149, i32* %8, align 4, !insn.addr !155
  %150 = icmp ult i32 %91, 16, !insn.addr !156
  %spec.select5 = select i1 %150, i32 %2, i32 %146
  %151 = add i32 %spec.select5, %146, !insn.addr !157
  %152 = inttoptr i32 %151 to i8*, !insn.addr !157
  store i8 %145, i8* %152, align 1, !insn.addr !157
  %153 = add i32 %149, %spec.select5, !insn.addr !158
  %154 = inttoptr i32 %153 to i8*, !insn.addr !158
  store i8 0, i8* %154, align 1, !insn.addr !158
  store i32 %esp.2.reload, i32* %esp.4.reg2mem, !insn.addr !159
  br label %dec_label_pc_4013cc, !insn.addr !159

dec_label_pc_4013ba:                              ; preds = %dec_label_pc_401391
  %155 = sext i8 %145 to i32, !insn.addr !160
  %156 = add i32 %esp.2.reload, -4, !insn.addr !160
  %157 = inttoptr i32 %156 to i32*, !insn.addr !160
  store i32 %155, i32* %157, align 4, !insn.addr !160
  %158 = add i32 %esp.2.reload, -8, !insn.addr !161
  %159 = inttoptr i32 %158 to i32*, !insn.addr !161
  store i32 0, i32* %159, align 4, !insn.addr !161
  %160 = add i32 %esp.2.reload, -12, !insn.addr !162
  %161 = inttoptr i32 %160 to i32*, !insn.addr !162
  store i32 %146, i32* %161, align 4, !insn.addr !162
  %162 = call i32 @function_401960(i8 0), !insn.addr !163
  store i32 %160, i32* %esp.4.reg2mem, !insn.addr !163
  br label %dec_label_pc_4013cc, !insn.addr !163

dec_label_pc_4013cc:                              ; preds = %dec_label_pc_4013ba, %dec_label_pc_4013a1
  %esp.4.reload = load i32, i32* %esp.4.reg2mem
  %163 = load i32, i32* %8, align 4, !insn.addr !164
  %164 = load i32, i32* %11, align 4, !insn.addr !165
  %165 = icmp ult i32 %163, %164, !insn.addr !166
  store i32 %163, i32* %ecx.0.reg2mem, !insn.addr !167
  store i32 %164, i32* %edx.0.reg2mem, !insn.addr !167
  store i32 %esp.4.reload, i32* %esp.7.reg2mem, !insn.addr !167
  br i1 %165, label %dec_label_pc_40146a, label %dec_label_pc_4013da, !insn.addr !167

dec_label_pc_4013da:                              ; preds = %dec_label_pc_4013cc
  %166 = add i32 %esp.4.reload, -4, !insn.addr !168
  %167 = inttoptr i32 %166 to i32*, !insn.addr !168
  store i32 %30, i32* %167, align 4, !insn.addr !168
  %168 = add i32 %esp.4.reload, -8, !insn.addr !169
  %169 = inttoptr i32 %168 to i32*, !insn.addr !169
  store i32 0, i32* %169, align 4, !insn.addr !169
  store i32 %163, i32* %ecx.1.reg2mem, !insn.addr !170
  store i32 %168, i32* %esp.8.reg2mem, !insn.addr !170
  br label %dec_label_pc_40148e, !insn.addr !170

dec_label_pc_4013e9:                              ; preds = %dec_label_pc_401292
  %170 = zext i8 %61 to i32, !insn.addr !171
  %171 = add i32 %16, %170, !insn.addr !172
  %172 = inttoptr i32 %171 to i8*, !insn.addr !172
  %173 = load i8, i8* %172, align 1, !insn.addr !172
  %174 = load i32, i32* %8, align 4, !insn.addr !173
  %175 = icmp ult i32 %174, %58, !insn.addr !174
  %176 = icmp eq i1 %175, false, !insn.addr !175
  br i1 %176, label %dec_label_pc_401412, label %dec_label_pc_4013f9, !insn.addr !175

dec_label_pc_4013f9:                              ; preds = %dec_label_pc_4013e9
  %177 = add i32 %174, 1
  store i32 %177, i32* %8, align 4, !insn.addr !176
  %178 = icmp ult i32 %58, 16, !insn.addr !177
  %spec.select6 = select i1 %178, i32 %2, i32 %174
  %179 = add i32 %spec.select6, %174, !insn.addr !178
  %180 = inttoptr i32 %179 to i8*, !insn.addr !178
  store i8 %173, i8* %180, align 1, !insn.addr !178
  %181 = add i32 %177, %spec.select6, !insn.addr !179
  %182 = inttoptr i32 %181 to i8*, !insn.addr !179
  store i8 0, i8* %182, align 1, !insn.addr !179
  store i32 %esp.1.reload, i32* %esp.5.reg2mem, !insn.addr !180
  br label %dec_label_pc_401424, !insn.addr !180

dec_label_pc_401412:                              ; preds = %dec_label_pc_4013e9
  %183 = sext i8 %173 to i32, !insn.addr !181
  %184 = add i32 %esp.1.reload, -4, !insn.addr !181
  %185 = inttoptr i32 %184 to i32*, !insn.addr !181
  store i32 %183, i32* %185, align 4, !insn.addr !181
  %186 = add i32 %esp.1.reload, -8, !insn.addr !182
  %187 = inttoptr i32 %186 to i32*, !insn.addr !182
  store i32 0, i32* %187, align 4, !insn.addr !182
  %188 = add i32 %esp.1.reload, -12, !insn.addr !183
  %189 = inttoptr i32 %188 to i32*, !insn.addr !183
  store i32 %174, i32* %189, align 4, !insn.addr !183
  %190 = call i32 @function_401960(i8 0), !insn.addr !184
  store i32 %188, i32* %esp.5.reg2mem, !insn.addr !184
  br label %dec_label_pc_401424, !insn.addr !184

dec_label_pc_401424:                              ; preds = %dec_label_pc_401412, %dec_label_pc_4013f9
  %esp.5.reload = load i32, i32* %esp.5.reg2mem
  %191 = load i32, i32* %8, align 4, !insn.addr !185
  %192 = load i32, i32* %11, align 4, !insn.addr !186
  %193 = icmp ult i32 %191, %192, !insn.addr !187
  %194 = icmp eq i1 %193, false, !insn.addr !188
  br i1 %194, label %dec_label_pc_40144d, label %dec_label_pc_40142e, !insn.addr !188

dec_label_pc_40142e:                              ; preds = %dec_label_pc_401424
  %195 = add i32 %191, 1
  store i32 %195, i32* %8, align 4, !insn.addr !189
  %196 = icmp ult i32 %192, 16, !insn.addr !190
  %spec.select7 = select i1 %196, i32 %2, i32 %191
  %197 = add i32 %spec.select7, %191, !insn.addr !191
  %198 = inttoptr i32 %197 to i8*, !insn.addr !191
  store i8 %23, i8* %198, align 1, !insn.addr !191
  %199 = add i32 %spec.select7, %195, !insn.addr !192
  %200 = inttoptr i32 %199 to i8*, !insn.addr !192
  store i8 0, i8* %200, align 1, !insn.addr !192
  store i32 %esp.5.reload, i32* %esp.6.reg2mem, !insn.addr !193
  br label %dec_label_pc_401460, !insn.addr !193

dec_label_pc_40144d:                              ; preds = %dec_label_pc_401424
  %201 = add i32 %esp.5.reload, -4, !insn.addr !194
  %202 = inttoptr i32 %201 to i32*, !insn.addr !194
  store i32 %30, i32* %202, align 4, !insn.addr !194
  %203 = add i32 %esp.5.reload, -8, !insn.addr !195
  %204 = inttoptr i32 %203 to i32*, !insn.addr !195
  store i32 0, i32* %204, align 4, !insn.addr !195
  %205 = add i32 %esp.5.reload, -12, !insn.addr !196
  %206 = inttoptr i32 %205 to i32*, !insn.addr !196
  store i32 %191, i32* %206, align 4, !insn.addr !196
  %207 = call i32 @function_401960(i8 0), !insn.addr !197
  store i32 %205, i32* %esp.6.reg2mem, !insn.addr !197
  br label %dec_label_pc_401460, !insn.addr !197

dec_label_pc_401460:                              ; preds = %dec_label_pc_40144d, %dec_label_pc_40142e
  %esp.6.reload = load i32, i32* %esp.6.reg2mem
  %208 = load i32, i32* %8, align 4, !insn.addr !198
  %209 = load i32, i32* %11, align 4, !insn.addr !199
  %210 = icmp ult i32 %208, %209, !insn.addr !200
  %211 = icmp eq i1 %210, false, !insn.addr !201
  store i32 %208, i32* %ecx.0.reg2mem, !insn.addr !201
  store i32 %209, i32* %edx.0.reg2mem, !insn.addr !201
  store i32 %esp.6.reload, i32* %esp.7.reg2mem, !insn.addr !201
  br i1 %211, label %dec_label_pc_401486, label %dec_label_pc_40146a, !insn.addr !201

dec_label_pc_40146a:                              ; preds = %dec_label_pc_401460, %dec_label_pc_4013cc
  %esp.7.reload = load i32, i32* %esp.7.reg2mem
  %edx.0.reload = load i32, i32* %edx.0.reg2mem
  %ecx.0.reload = load i32, i32* %ecx.0.reg2mem
  %212 = add i32 %ecx.0.reload, 1
  store i32 %212, i32* %8, align 4, !insn.addr !202
  %213 = icmp ult i32 %edx.0.reload, 16, !insn.addr !203
  %spec.select8 = select i1 %213, i32 %2, i32 %ecx.0.reload
  %214 = add i32 %spec.select8, %ecx.0.reload, !insn.addr !204
  %215 = inttoptr i32 %214 to i8*, !insn.addr !204
  store i8 %23, i8* %215, align 1, !insn.addr !204
  %216 = add i32 %spec.select8, %212, !insn.addr !205
  %217 = inttoptr i32 %216 to i8*, !insn.addr !205
  store i8 0, i8* %217, align 1, !insn.addr !205
  store i32 %esp.7.reload, i32* %esp.9.reg2mem, !insn.addr !206
  br label %dec_label_pc_401496, !insn.addr !206

dec_label_pc_401486:                              ; preds = %dec_label_pc_401460
  %218 = add i32 %esp.6.reload, -4, !insn.addr !207
  %219 = inttoptr i32 %218 to i32*, !insn.addr !207
  store i32 %30, i32* %219, align 4, !insn.addr !207
  %220 = add i32 %esp.6.reload, -8, !insn.addr !208
  %221 = inttoptr i32 %220 to i32*, !insn.addr !208
  store i32 0, i32* %221, align 4, !insn.addr !208
  store i32 %208, i32* %ecx.1.reg2mem, !insn.addr !208
  store i32 %220, i32* %esp.8.reg2mem, !insn.addr !208
  br label %dec_label_pc_40148e, !insn.addr !208

dec_label_pc_40148e:                              ; preds = %dec_label_pc_401486, %dec_label_pc_4013da, %dec_label_pc_401382
  %esp.8.reload = load i32, i32* %esp.8.reg2mem
  %ecx.1.reload = load i32, i32* %ecx.1.reg2mem
  %222 = add i32 %esp.8.reload, -4, !insn.addr !209
  %223 = inttoptr i32 %222 to i32*, !insn.addr !209
  store i32 %ecx.1.reload, i32* %223, align 4, !insn.addr !209
  %224 = call i32 @function_401960(i8 ptrtoint (i32* @0 to i8)), !insn.addr !210
  store i32 %222, i32* %esp.9.reg2mem, !insn.addr !210
  br label %dec_label_pc_401496, !insn.addr !210

dec_label_pc_401496:                              ; preds = %dec_label_pc_40148e, %dec_label_pc_40146a, %dec_label_pc_401366
  %esp.9.reload = load i32, i32* %esp.9.reg2mem
  %225 = add i32 %stack_var_-60.0.reload, 3, !insn.addr !211
  %226 = add i32 %edi.0.reload, 3, !insn.addr !212
  %227 = add i32 %stack_var_-64.0.reload, -1, !insn.addr !213
  %228 = icmp eq i32 %227, 0, !insn.addr !213
  %229 = icmp eq i1 %228, false, !insn.addr !214
  store i32 %225, i32* %stack_var_-60.0.reg2mem, !insn.addr !214
  store i32 %227, i32* %stack_var_-64.0.reg2mem, !insn.addr !214
  store i32 %esp.9.reload, i32* %esp.0.reg2mem, !insn.addr !214
  store i32 %226, i32* %edi.0.reg2mem, !insn.addr !214
  br i1 %229, label %dec_label_pc_401250, label %dec_label_pc_4014aa, !insn.addr !214

dec_label_pc_4014aa:                              ; preds = %dec_label_pc_401496, %dec_label_pc_401180
  %230 = load i32, i32* %stack_var_-16, align 4, !insn.addr !215
  call void @__writefsdword(i32 0, i32 %230), !insn.addr !216
  ret i32 %2, !insn.addr !217

; uselistorder directives
  uselistorder i32 %ecx.0.reload, { 2, 1, 0 }
  uselistorder i32 %esp.6.reload, { 1, 2, 0 }
  uselistorder i32 %191, { 3, 0, 1, 2, 4 }
  uselistorder i32 %esp.5.reload, { 1, 2, 3, 0 }
  uselistorder i32 %spec.select6, { 1, 0 }
  uselistorder i32 %174, { 3, 0, 1, 2, 4 }
  uselistorder i8 %173, { 1, 0 }
  uselistorder i32 %esp.4.reload, { 1, 2, 0 }
  uselistorder i32 %spec.select5, { 1, 0 }
  uselistorder i32 %146, { 3, 0, 1, 2, 4 }
  uselistorder i8 %145, { 1, 0 }
  uselistorder i32 %spec.select4, { 1, 0 }
  uselistorder i8 %127, { 1, 0 }
  uselistorder i32 %esp.3.reload, { 1, 2, 0 }
  uselistorder i32 %spec.select3, { 1, 0 }
  uselistorder i32 %104, { 3, 0, 1, 2, 4 }
  uselistorder i8 %103, { 1, 0 }
  uselistorder i8 %93, { 1, 0 }
  uselistorder i32 %91, { 2, 3, 0, 1 }
  uselistorder i32 %esp.2.reload, { 2, 3, 4, 0, 5, 6, 7, 1 }
  uselistorder i32 %spec.select2, { 1, 0 }
  uselistorder i32 %73, { 3, 0, 1, 2, 4 }
  uselistorder i8 %72, { 1, 0 }
  uselistorder i8 %61, { 1, 0 }
  uselistorder i32 %58, { 2, 3, 0, 1 }
  uselistorder i32 %esp.1.reload, { 2, 3, 4, 0, 5, 6, 7, 1 }
  uselistorder i8 %40, { 1, 0 }
  uselistorder i32 %34, { 3, 0, 1, 2, 4 }
  uselistorder i32 %esp.0.reload, { 1, 2, 3, 0 }
  uselistorder i32 %edi.0.reload, { 1, 3, 2, 4, 0 }
  uselistorder i8 %23, { 1, 2, 0 }
  uselistorder i32* %11, { 3, 4, 1, 0, 2, 5, 6, 7 }
  uselistorder i32* %8, { 10, 13, 12, 14, 11, 15, 7, 6, 8, 3, 4, 2, 5, 1, 9, 0, 16, 17 }
  uselistorder i32 %2, { 4, 12, 11, 10, 9, 8, 7, 6, 5, 3, 1, 0, 2 }
  uselistorder i32 %1, { 1, 0 }
  uselistorder i32* %stack_var_-60.0.reg2mem, { 1, 0, 2 }
  uselistorder i32* %stack_var_-64.0.reg2mem, { 1, 0, 2 }
  uselistorder i32* %esp.0.reg2mem, { 1, 0, 2 }
  uselistorder i32* %edi.0.reg2mem, { 1, 0, 2 }
  uselistorder i32* %esp.1.reg2mem, { 0, 2, 1 }
  uselistorder i32* %esp.2.reg2mem, { 0, 2, 1 }
  uselistorder i32* %esp.3.reg2mem, { 0, 2, 1 }
  uselistorder i32* %esp.4.reg2mem, { 0, 2, 1 }
  uselistorder i32* %esp.5.reg2mem, { 0, 2, 1 }
  uselistorder i32* %esp.6.reg2mem, { 0, 2, 1 }
  uselistorder i32* %ecx.0.reg2mem, { 0, 2, 1 }
  uselistorder i32* %edx.0.reg2mem, { 0, 2, 1 }
  uselistorder i32* %esp.7.reg2mem, { 0, 2, 1 }
  uselistorder i32* %ecx.1.reg2mem, { 0, 3, 2, 1 }
  uselistorder i32* %esp.8.reg2mem, { 0, 3, 2, 1 }
  uselistorder i32* %esp.9.reg2mem, { 0, 3, 2, 1 }
  uselistorder i32* %0, { 1, 0 }
  uselistorder i8 16, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder i32 %arg1, { 2, 1, 0, 3, 4 }
}

define i32 @function_4014c0() local_unnamed_addr {
dec_label_pc_4014c0:
  %0 = alloca i32
  %ecx.0.reg2mem = alloca i32, !insn.addr !218
  %1 = load i32, i32* %0
  %2 = load i32, i32* %0
  %3 = load i32, i32* %0
  %4 = load i32, i32* %0
  %5 = load i32, i32* %0
  %stack_var_-16 = alloca i32, align 4
  %6 = call i32 @__readfsdword(i32 0), !insn.addr !219
  store i32 %6, i32* %stack_var_-16, align 4, !insn.addr !220
  %7 = ptrtoint i32* %stack_var_-16 to i32, !insn.addr !221
  call void @__writefsdword(i32 0, i32 %7), !insn.addr !222
  %8 = call i32 @function_401750(i32 %1), !insn.addr !223
  %9 = call i32 @function_401180(i32 %3, i32 0), !insn.addr !224
  %10 = icmp ult i32 %4, 16, !insn.addr !225
  br i1 %10, label %dec_label_pc_40154e, label %dec_label_pc_401520, !insn.addr !226

dec_label_pc_401520:                              ; preds = %dec_label_pc_4014c0
  %11 = add i32 %4, 1, !insn.addr !227
  %12 = icmp ult i32 %11, 4096, !insn.addr !228
  br i1 %12, label %dec_label_pc_401544, label %dec_label_pc_40152e, !insn.addr !229

dec_label_pc_40152e:                              ; preds = %dec_label_pc_401520
  %13 = add i32 %5, -4
  %14 = inttoptr i32 %13 to i32*, !insn.addr !230
  %15 = load i32, i32* %14, align 4, !insn.addr !230
  %16 = sub i32 %13, %15, !insn.addr !231
  %17 = icmp ult i32 %16, 32
  store i32 %15, i32* %ecx.0.reg2mem, !insn.addr !232
  br i1 %17, label %dec_label_pc_401544, label %dec_label_pc_40153e, !insn.addr !232

dec_label_pc_40153e:                              ; preds = %dec_label_pc_40152e
  call void @_invalid_parameter_noinfo_noreturn(), !insn.addr !233
  store i32 %15, i32* %ecx.0.reg2mem, !insn.addr !233
  br label %dec_label_pc_401544, !insn.addr !233

dec_label_pc_401544:                              ; preds = %dec_label_pc_40153e, %dec_label_pc_40152e, %dec_label_pc_401520
  %ecx.0.reload = load i32, i32* %ecx.0.reg2mem
  %18 = call i32 @function_402843(i32 %ecx.0.reload), !insn.addr !234
  br label %dec_label_pc_40154e, !insn.addr !235

dec_label_pc_40154e:                              ; preds = %dec_label_pc_401544, %dec_label_pc_4014c0
  %19 = load i32, i32* %stack_var_-16, align 4, !insn.addr !236
  call void @__writefsdword(i32 0, i32 %19), !insn.addr !237
  ret i32 %2, !insn.addr !238

; uselistorder directives
  uselistorder i32 %4, { 1, 0 }
  uselistorder i32* %0, { 4, 3, 2, 1, 0 }
}

define i32 @function_401560(i32 %arg1) local_unnamed_addr {
dec_label_pc_401560:
  %0 = alloca i32
  %eax.1.reg2mem = alloca i32, !insn.addr !239
  %edi.1.reg2mem = alloca i32, !insn.addr !239
  %edi.0.reg2mem = alloca i32, !insn.addr !239
  %ebx.0.reg2mem = alloca i32, !insn.addr !239
  %.reg2mem9 = alloca i32, !insn.addr !239
  %stack_var_-8.026.reg2mem = alloca i32, !insn.addr !239
  %.reg2mem = alloca i32, !insn.addr !239
  %stack_var_-8.0278.reg2mem = alloca i32, !insn.addr !239
  %stack_var_-8.02.reg2mem = alloca i32, !insn.addr !239
  %1 = load i32, i32* %0
  %2 = add i32 %1, 16, !insn.addr !240
  %3 = inttoptr i32 %2 to i32*, !insn.addr !240
  %4 = load i32, i32* %3, align 4, !insn.addr !240
  %5 = icmp ugt i32 %4, %arg1
  store i32 %4, i32* %eax.1.reg2mem, !insn.addr !241
  br i1 %5, label %dec_label_pc_4016e4, label %dec_label_pc_40157b, !insn.addr !241

dec_label_pc_40157b:                              ; preds = %dec_label_pc_401560
  %6 = add i32 %1, 20, !insn.addr !242
  %7 = inttoptr i32 %6 to i32*, !insn.addr !242
  %8 = load i32, i32* %7, align 4, !insn.addr !242
  %9 = icmp eq i32 %8, %arg1, !insn.addr !243
  store i32 %4, i32* %eax.1.reg2mem, !insn.addr !244
  br i1 %9, label %dec_label_pc_4016e4, label %dec_label_pc_40158a, !insn.addr !244

dec_label_pc_40158a:                              ; preds = %dec_label_pc_40157b
  %10 = icmp ult i32 %8, %arg1, !insn.addr !243
  %11 = icmp eq i1 %10, false, !insn.addr !245
  br i1 %11, label %dec_label_pc_40169c, label %dec_label_pc_401590, !insn.addr !245

dec_label_pc_401590:                              ; preds = %dec_label_pc_40158a
  %12 = sub i32 %arg1, %4, !insn.addr !246
  %13 = sub i32 2147483647, %4, !insn.addr !247
  %14 = icmp ult i32 %13, %12, !insn.addr !248
  br i1 %14, label %dec_label_pc_4016f2, label %dec_label_pc_4015a6, !insn.addr !249

dec_label_pc_4015a6:                              ; preds = %dec_label_pc_401590
  %15 = or i32 %arg1, 15, !insn.addr !250
  %16 = icmp slt i32 %15, 0
  store i32 2147483647, i32* %stack_var_-8.0278.reg2mem, !insn.addr !251
  store i32 -2147483648, i32* %.reg2mem, !insn.addr !251
  br i1 %16, label %dec_label_pc_4015f5, label %dec_label_pc_4015b6, !insn.addr !251

dec_label_pc_4015b6:                              ; preds = %dec_label_pc_4015a6
  %17 = udiv i32 %8, 2, !insn.addr !252
  %18 = xor i32 %17, 2147483647, !insn.addr !253
  %19 = icmp ugt i32 %8, %18
  store i32 2147483647, i32* %stack_var_-8.0278.reg2mem, !insn.addr !254
  store i32 -2147483648, i32* %.reg2mem, !insn.addr !254
  br i1 %19, label %dec_label_pc_4015f5, label %dec_label_pc_4015ca, !insn.addr !254

dec_label_pc_4015ca:                              ; preds = %dec_label_pc_4015b6
  %20 = add i32 %17, %8, !insn.addr !255
  %21 = icmp ult i32 %15, %20, !insn.addr !256
  store i32 %15, i32* %stack_var_-8.02.reg2mem
  br i1 %21, label %dec_label_pc_4015d6, label %dec_label_pc_4015d6.thread

dec_label_pc_4015d6:                              ; preds = %dec_label_pc_4015ca
  %22 = icmp eq i32 %20, -1, !insn.addr !257
  store i32 %20, i32* %stack_var_-8.02.reg2mem
  br i1 %22, label %dec_label_pc_4016f7, label %dec_label_pc_4015d6.thread

dec_label_pc_4015d6.thread:                       ; preds = %dec_label_pc_4015ca, %dec_label_pc_4015d6
  %stack_var_-8.02.reload = load i32, i32* %stack_var_-8.02.reg2mem
  %23 = add i32 %stack_var_-8.02.reload, 1
  %24 = icmp ult i32 %23, 4096, !insn.addr !258
  br i1 %24, label %dec_label_pc_401615, label %dec_label_pc_4015ea, !insn.addr !259

dec_label_pc_4015ea:                              ; preds = %dec_label_pc_4015d6.thread
  %25 = icmp ugt i32 %23, -36, !insn.addr !260
  store i32 %stack_var_-8.02.reload, i32* %stack_var_-8.0278.reg2mem, !insn.addr !261
  store i32 %23, i32* %.reg2mem, !insn.addr !261
  br i1 %25, label %dec_label_pc_4016f7, label %dec_label_pc_4015f5, !insn.addr !261

dec_label_pc_4015f5:                              ; preds = %dec_label_pc_4015b6, %dec_label_pc_4015a6, %dec_label_pc_4015ea
  %stack_var_-8.0278.reload = load i32, i32* %stack_var_-8.0278.reg2mem
  %26 = add i32 %stack_var_-8.0278.reload, 36, !insn.addr !262
  %27 = call i32 @function_402813(i32 %26), !insn.addr !263
  %28 = icmp eq i32 %27, 0, !insn.addr !264
  br i1 %28, label %dec_label_pc_4016ec, label %dec_label_pc_401606, !insn.addr !265

dec_label_pc_401606:                              ; preds = %dec_label_pc_4015f5
  %.reload = load i32, i32* %.reg2mem
  %29 = add i32 %27, 35, !insn.addr !266
  %30 = and i32 %29, -32, !insn.addr !267
  %31 = add i32 %30, -4, !insn.addr !268
  %32 = inttoptr i32 %31 to i32*, !insn.addr !268
  store i32 %27, i32* %32, align 4, !insn.addr !268
  store i32 %stack_var_-8.0278.reload, i32* %stack_var_-8.026.reg2mem, !insn.addr !269
  store i32 %.reload, i32* %.reg2mem9, !insn.addr !269
  store i32 %30, i32* %ebx.0.reg2mem, !insn.addr !269
  br label %dec_label_pc_401624, !insn.addr !269

dec_label_pc_401615:                              ; preds = %dec_label_pc_4015d6.thread
  %33 = call i32 @function_402813(i32 %23), !insn.addr !270
  store i32 %stack_var_-8.02.reload, i32* %stack_var_-8.026.reg2mem, !insn.addr !271
  store i32 %23, i32* %.reg2mem9, !insn.addr !271
  store i32 %33, i32* %ebx.0.reg2mem, !insn.addr !271
  br label %dec_label_pc_401624, !insn.addr !271

dec_label_pc_401624:                              ; preds = %dec_label_pc_401615, %dec_label_pc_401606
  %ebx.0.reload = load i32, i32* %ebx.0.reg2mem
  %.reload10 = load i32, i32* %.reg2mem9
  %stack_var_-8.026.reload = load i32, i32* %stack_var_-8.026.reg2mem
  store i32 %stack_var_-8.026.reload, i32* %7, align 4, !insn.addr !272
  %34 = add i32 %4, 1, !insn.addr !273
  store i32 %arg1, i32* %3, align 4, !insn.addr !274
  %35 = icmp ult i32 %8, 16, !insn.addr !275
  %36 = inttoptr i32 %ebx.0.reload to i32*
  br i1 %35, label %dec_label_pc_401681, label %dec_label_pc_401638, !insn.addr !276

dec_label_pc_401638:                              ; preds = %dec_label_pc_401624
  %37 = inttoptr i32 %.reload10 to i32*, !insn.addr !277
  %38 = call i32* @memcpy(i32* %36, i32* %37, i32 %34), !insn.addr !277
  %39 = add i32 %8, 1, !insn.addr !278
  %40 = icmp ult i32 %39, 4096, !insn.addr !279
  store i32 %.reload10, i32* %edi.0.reg2mem, !insn.addr !280
  br i1 %40, label %dec_label_pc_401666, label %dec_label_pc_401650, !insn.addr !280

dec_label_pc_401650:                              ; preds = %dec_label_pc_401638
  %41 = add i32 %.reload10, -4
  %42 = inttoptr i32 %41 to i32*, !insn.addr !281
  %43 = load i32, i32* %42, align 4, !insn.addr !281
  %44 = sub i32 %41, %43, !insn.addr !282
  %45 = icmp ult i32 %44, 32
  store i32 %43, i32* %edi.0.reg2mem, !insn.addr !283
  br i1 %45, label %dec_label_pc_401666, label %dec_label_pc_4016ec, !insn.addr !283

dec_label_pc_401666:                              ; preds = %dec_label_pc_401650, %dec_label_pc_401638
  %edi.0.reload = load i32, i32* %edi.0.reg2mem
  %46 = call i32 @function_402843(i32 %edi.0.reload), !insn.addr !284
  %47 = inttoptr i32 %1 to i32*, !insn.addr !285
  store i32 %ebx.0.reload, i32* %47, align 4, !insn.addr !285
  store i32 %4, i32* %3, align 4, !insn.addr !286
  ret i32 %4, !insn.addr !287

dec_label_pc_401681:                              ; preds = %dec_label_pc_401624
  %48 = inttoptr i32 %1 to i32*, !insn.addr !288
  %49 = call i32* @memcpy(i32* %36, i32* %48, i32 %34), !insn.addr !288
  store i32 %ebx.0.reload, i32* %48, align 4, !insn.addr !289
  store i32 %4, i32* %3, align 4, !insn.addr !290
  ret i32 %4, !insn.addr !291

dec_label_pc_40169c:                              ; preds = %dec_label_pc_40158a
  %50 = icmp ult i32 %arg1, 16, !insn.addr !292
  %51 = icmp eq i1 %50, false, !insn.addr !293
  %52 = icmp ult i32 %8, 16, !insn.addr !294
  %or.cond = or i1 %51, %52
  store i32 %4, i32* %eax.1.reg2mem, !insn.addr !293
  br i1 %or.cond, label %dec_label_pc_4016e4, label %dec_label_pc_4016a6, !insn.addr !293

dec_label_pc_4016a6:                              ; preds = %dec_label_pc_40169c
  %53 = add i32 %4, 1, !insn.addr !295
  %54 = inttoptr i32 %1 to i32*, !insn.addr !296
  %55 = call i32* @memcpy(i32* %54, i32* %54, i32 %53), !insn.addr !296
  %56 = load i32, i32* %7, align 4, !insn.addr !297
  %57 = add i32 %56, 1, !insn.addr !298
  %58 = icmp ult i32 %57, 4096, !insn.addr !299
  br i1 %58, label %dec_label_pc_4016d2, label %dec_label_pc_4016c0, !insn.addr !300

dec_label_pc_4016c0:                              ; preds = %dec_label_pc_4016a6
  %59 = add i32 %1, -4
  %60 = inttoptr i32 %59 to i32*, !insn.addr !301
  %61 = load i32, i32* %60, align 4, !insn.addr !301
  %62 = sub i32 %59, %61, !insn.addr !302
  %63 = icmp ult i32 %62, 32
  store i32 %61, i32* %edi.1.reg2mem, !insn.addr !303
  br i1 %63, label %dec_label_pc_4016d2, label %dec_label_pc_4016ec, !insn.addr !303

dec_label_pc_4016d2:                              ; preds = %dec_label_pc_4016c0, %dec_label_pc_4016a6
  %edi.1.reload = load i32, i32* %edi.1.reg2mem
  %64 = call i32 @function_402843(i32 %edi.1.reload), !insn.addr !304
  store i32 15, i32* %7, align 4, !insn.addr !305
  store i32 %64, i32* %eax.1.reg2mem, !insn.addr !305
  br label %dec_label_pc_4016e4, !insn.addr !305

dec_label_pc_4016e4:                              ; preds = %dec_label_pc_40157b, %dec_label_pc_40169c, %dec_label_pc_4016d2, %dec_label_pc_401560
  %eax.1.reload = load i32, i32* %eax.1.reg2mem
  ret i32 %eax.1.reload, !insn.addr !306

dec_label_pc_4016ec:                              ; preds = %dec_label_pc_4016c0, %dec_label_pc_401650, %dec_label_pc_4015f5
  call void @_invalid_parameter_noinfo_noreturn(), !insn.addr !307
  br label %dec_label_pc_4016f2, !insn.addr !307

dec_label_pc_4016f2:                              ; preds = %dec_label_pc_4016ec, %dec_label_pc_401590
  %65 = call i32 @function_401170(), !insn.addr !308
  br label %dec_label_pc_4016f7, !insn.addr !308

dec_label_pc_4016f7:                              ; preds = %dec_label_pc_4015d6, %dec_label_pc_4016f2, %dec_label_pc_4015ea
  %66 = call i32 @function_4010d0(), !insn.addr !309
  unreachable, !insn.addr !309

; uselistorder directives
  uselistorder i32* %36, { 1, 0 }
  uselistorder i32 %34, { 1, 0 }
  uselistorder i32 %.reload10, { 1, 0, 2 }
  uselistorder i32 %ebx.0.reload, { 0, 2, 1 }
  uselistorder i32 %27, { 1, 0, 2 }
  uselistorder i32 %23, { 0, 3, 1, 2, 4 }
  uselistorder i32 %17, { 1, 0 }
  uselistorder i32 %15, { 0, 2, 1 }
  uselistorder i32 %8, { 5, 3, 4, 1, 2, 0, 7, 6 }
  uselistorder i32* %7, { 1, 2, 0, 3 }
  uselistorder i32 %4, { 10, 0, 5, 6, 3, 4, 7, 8, 9, 1, 2, 11 }
  uselistorder i32* %3, { 1, 0, 2, 3 }
  uselistorder i32 %1, { 3, 2, 4, 5, 1, 0 }
  uselistorder i32* %stack_var_-8.02.reg2mem, { 0, 2, 1 }
  uselistorder i32* %stack_var_-8.0278.reg2mem, { 0, 3, 1, 2 }
  uselistorder i32* %.reg2mem, { 0, 3, 1, 2 }
  uselistorder i32* %stack_var_-8.026.reg2mem, { 0, 2, 1 }
  uselistorder i32* %.reg2mem9, { 0, 2, 1 }
  uselistorder i32* %ebx.0.reg2mem, { 0, 2, 1 }
  uselistorder i32 %arg1, { 2, 0, 1, 3, 4, 5, 6 }
  uselistorder label %dec_label_pc_4016f7, { 1, 2, 0 }
  uselistorder label %dec_label_pc_4016e4, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_4015f5, { 2, 0, 1 }
  uselistorder label %dec_label_pc_4015d6.thread, { 1, 0 }
}

define i32 @function_401700() local_unnamed_addr {
dec_label_pc_401700:
  %0 = alloca i32
  %eax.1.reg2mem = alloca i32, !insn.addr !310
  %eax.0.reg2mem = alloca i32, !insn.addr !310
  %1 = load i32, i32* %0
  %2 = add i32 %1, 20, !insn.addr !311
  %3 = inttoptr i32 %2 to i32*, !insn.addr !311
  %4 = load i32, i32* %3, align 4, !insn.addr !311
  %5 = icmp ult i32 %4, 16, !insn.addr !312
  br i1 %5, label %dec_label_pc_401732, label %dec_label_pc_40170b, !insn.addr !313

dec_label_pc_40170b:                              ; preds = %dec_label_pc_401700
  %6 = add i32 %4, 1, !insn.addr !314
  %7 = icmp ult i32 %6, 4096, !insn.addr !315
  store i32 %4, i32* %eax.0.reg2mem, !insn.addr !316
  br i1 %7, label %dec_label_pc_401728, label %dec_label_pc_401716, !insn.addr !316

dec_label_pc_401716:                              ; preds = %dec_label_pc_40170b
  %8 = add i32 %4, -4
  %9 = inttoptr i32 %8 to i32*, !insn.addr !317
  %10 = load i32, i32* %9, align 4, !insn.addr !317
  %11 = sub i32 %8, %10, !insn.addr !318
  %12 = icmp ult i32 %11, 32
  store i32 %10, i32* %eax.0.reg2mem, !insn.addr !319
  br i1 %12, label %dec_label_pc_401728, label %dec_label_pc_401745, !insn.addr !319

dec_label_pc_401728:                              ; preds = %dec_label_pc_401716, %dec_label_pc_40170b
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %13 = call i32 @function_402843(i32 %eax.0.reload), !insn.addr !320
  store i32 %13, i32* %eax.1.reg2mem, !insn.addr !321
  br label %dec_label_pc_401732, !insn.addr !321

dec_label_pc_401732:                              ; preds = %dec_label_pc_401728, %dec_label_pc_401700
  %eax.1.reload = load i32, i32* %eax.1.reg2mem
  %14 = add i32 %1, 16, !insn.addr !322
  %15 = inttoptr i32 %14 to i32*, !insn.addr !322
  store i32 0, i32* %15, align 4, !insn.addr !322
  store i32 15, i32* %3, align 4, !insn.addr !323
  %16 = inttoptr i32 %1 to i8*, !insn.addr !324
  store i8 0, i8* %16, align 1, !insn.addr !324
  ret i32 %eax.1.reload, !insn.addr !325

dec_label_pc_401745:                              ; preds = %dec_label_pc_401716
  call void @_invalid_parameter_noinfo_noreturn(), !insn.addr !326
  %17 = call i32 @__asm_int3(), !insn.addr !327
  %18 = call i32 @__asm_int3(), !insn.addr !328
  %19 = call i32 @__asm_int3(), !insn.addr !329
  %20 = call i32 @__asm_int3(), !insn.addr !330
  %21 = call i32 @__asm_int3(), !insn.addr !331
  ret i32 %21, !insn.addr !331

; uselistorder directives
  uselistorder i32 %4, { 1, 0, 2, 3 }
  uselistorder i32 %1, { 2, 1, 0 }
}

define i32 @function_401750(i32 %arg1) local_unnamed_addr {
dec_label_pc_401750:
  %0 = alloca i32
  %.reg2mem = alloca i32, !insn.addr !332
  %eax.0.reg2mem = alloca i32, !insn.addr !332
  %edi.0.reg2mem = alloca i32, !insn.addr !332
  %ecx = alloca i32, align 8
  %1 = load i32, i32* %0
  %2 = inttoptr i32 %1 to i32*, !insn.addr !333
  store i32 0, i32* %2, align 4, !insn.addr !333
  %3 = add i32 %1, 16, !insn.addr !334
  %4 = inttoptr i32 %3 to i32*, !insn.addr !334
  store i32 0, i32* %4, align 4, !insn.addr !334
  %5 = add i32 %1, 20, !insn.addr !335
  %6 = inttoptr i32 %5 to i32*, !insn.addr !335
  store i32 0, i32* %6, align 4, !insn.addr !335
  %7 = add i32 %arg1, 20, !insn.addr !336
  %8 = inttoptr i32 %7 to i32*, !insn.addr !336
  %9 = load i32, i32* %8, align 4, !insn.addr !336
  %10 = icmp ult i32 %9, 16, !insn.addr !336
  %11 = add i32 %arg1, 16, !insn.addr !337
  %12 = inttoptr i32 %11 to i32*, !insn.addr !337
  %13 = load i32, i32* %12, align 4, !insn.addr !337
  store i32 %arg1, i32* %edi.0.reg2mem, !insn.addr !338
  br i1 %10, label %dec_label_pc_40177d, label %dec_label_pc_40177b, !insn.addr !338

dec_label_pc_40177b:                              ; preds = %dec_label_pc_401750
  %14 = inttoptr i32 %arg1 to i32*, !insn.addr !339
  %15 = load i32, i32* %14, align 4, !insn.addr !339
  store i32 %15, i32* %edi.0.reg2mem, !insn.addr !339
  br label %dec_label_pc_40177d, !insn.addr !339

dec_label_pc_40177d:                              ; preds = %dec_label_pc_40177b, %dec_label_pc_401750
  %edi.0.reload = load i32, i32* %edi.0.reg2mem
  %16 = icmp ult i32 %13, 16, !insn.addr !340
  %17 = icmp eq i1 %16, false, !insn.addr !341
  br i1 %17, label %dec_label_pc_40179c, label %dec_label_pc_401782, !insn.addr !341

dec_label_pc_401782:                              ; preds = %dec_label_pc_40177d
  %18 = inttoptr i32 %edi.0.reload to i128*, !insn.addr !342
  %19 = load i128, i128* %18, align 4, !insn.addr !342
  %20 = call i128 @__asm_movups(i128 %19), !insn.addr !342
  %21 = bitcast i32* %ecx to i128*
  %22 = load i128, i128* %21, align 8, !insn.addr !343
  call void @__asm_movups.1(i128 %22, i128 %20), !insn.addr !343
  store i32 %13, i32* %4, align 4, !insn.addr !344
  store i32 15, i32* %6, align 4, !insn.addr !345
  ret i32 %1, !insn.addr !346

dec_label_pc_40179c:                              ; preds = %dec_label_pc_40177d
  %23 = or i32 %13, 15, !insn.addr !347
  %24 = icmp sgt i32 %23, -1
  %25 = select i1 %24, i32 %23, i32 2147483647, !insn.addr !348
  %26 = add i32 %25, 1, !insn.addr !349
  %27 = icmp ult i32 %26, 4096, !insn.addr !350
  store i32 %26, i32* %eax.0.reg2mem, !insn.addr !351
  br i1 %27, label %dec_label_pc_4017de, label %dec_label_pc_4017bc, !insn.addr !351

dec_label_pc_4017bc:                              ; preds = %dec_label_pc_40179c
  %28 = add i32 %25, 36, !insn.addr !352
  store i32 %28, i32* %ecx, align 8, !insn.addr !352
  %29 = call i32 @function_402813(i32 %28), !insn.addr !353
  %30 = icmp eq i32 %29, 0, !insn.addr !354
  br i1 %30, label %dec_label_pc_4017d4, label %dec_label_pc_4017c9, !insn.addr !355

dec_label_pc_4017c9:                              ; preds = %dec_label_pc_4017bc
  %31 = add i32 %29, 35, !insn.addr !356
  %32 = and i32 %31, -32, !insn.addr !357
  store i32 %32, i32* %ecx, align 8, !insn.addr !357
  %33 = add i32 %32, -4, !insn.addr !358
  %34 = inttoptr i32 %33 to i32*, !insn.addr !358
  store i32 %29, i32* %34, align 4, !insn.addr !358
  %.pre = load i32, i32* %ecx, align 8
  store i32 %.pre, i32* %.reg2mem, !insn.addr !359
  br label %dec_label_pc_4017ed, !insn.addr !359

dec_label_pc_4017d4:                              ; preds = %dec_label_pc_4017bc
  call void @_invalid_parameter_noinfo_noreturn(), !insn.addr !360
  store i32 ptrtoint (i32* @0 to i32), i32* %eax.0.reg2mem, !insn.addr !360
  br label %dec_label_pc_4017de, !insn.addr !360

dec_label_pc_4017de:                              ; preds = %dec_label_pc_40179c, %dec_label_pc_4017d4
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %35 = call i32 @function_402813(i32 %eax.0.reload), !insn.addr !361
  store i32 %35, i32* %ecx, align 8, !insn.addr !362
  store i32 %35, i32* %.reg2mem, !insn.addr !363
  br label %dec_label_pc_4017ed, !insn.addr !363

dec_label_pc_4017ed:                              ; preds = %dec_label_pc_4017de, %dec_label_pc_4017c9
  %.reload = load i32, i32* %.reg2mem, !insn.addr !364
  %36 = add i32 %13, 1, !insn.addr !365
  store i32 %.reload, i32* %2, align 4, !insn.addr !364
  %37 = load i32, i32* %ecx, align 8, !insn.addr !366
  %38 = inttoptr i32 %37 to i32*, !insn.addr !367
  %39 = inttoptr i32 %edi.0.reload to i32*, !insn.addr !367
  %40 = call i32* @memcpy(i32* %38, i32* %39, i32 %36), !insn.addr !367
  store i32 %13, i32* %4, align 4, !insn.addr !368
  store i32 %25, i32* %6, align 4, !insn.addr !369
  ret i32 %1, !insn.addr !370

; uselistorder directives
  uselistorder i32 %29, { 1, 0, 2 }
  uselistorder i32 %25, { 1, 0, 2 }
  uselistorder i32 %13, { 1, 2, 4, 0, 3 }
  uselistorder i32* %6, { 1, 0, 2 }
  uselistorder i32* %4, { 1, 0, 2 }
  uselistorder i32 %1, { 1, 0, 4, 3, 2 }
  uselistorder i32* %ecx, { 4, 3, 0, 2, 1, 5 }
  uselistorder i32* %.reg2mem, { 0, 2, 1 }
  uselistorder i32 %arg1, { 1, 0, 3, 2 }
  uselistorder label %dec_label_pc_4017de, { 1, 0 }
}

define i32 @function_401820(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_401820:
  %0 = alloca i32
  %eax.1.reg2mem = alloca i32, !insn.addr !371
  %eax.0.reg2mem = alloca i32, !insn.addr !371
  %ebx.114.reg2mem = alloca i32, !insn.addr !371
  %ebx.1156.reg2mem = alloca i32, !insn.addr !371
  %ebx.11.reg2mem = alloca i32, !insn.addr !371
  %1 = load i32, i32* %0
  %2 = add i32 %1, 20, !insn.addr !372
  %3 = inttoptr i32 %2 to i32*, !insn.addr !372
  %4 = load i32, i32* %3, align 4, !insn.addr !372
  %5 = icmp ult i32 %4, %arg2
  br i1 %5, label %dec_label_pc_401864, label %dec_label_pc_40183e, !insn.addr !373

dec_label_pc_40183e:                              ; preds = %dec_label_pc_401820
  %6 = icmp ult i32 %4, 16, !insn.addr !374
  %spec.select = select i1 %6, i32 %1, i32 %4
  %7 = add i32 %1, 16, !insn.addr !375
  %8 = inttoptr i32 %7 to i32*, !insn.addr !375
  store i32 %arg2, i32* %8, align 4, !insn.addr !375
  %9 = inttoptr i32 %spec.select to i32*, !insn.addr !376
  %10 = inttoptr i32 %arg1 to i32*, !insn.addr !376
  %11 = call i32* @memmove(i32* %9, i32* %10, i32 %arg2), !insn.addr !376
  %12 = add i32 %spec.select, %arg2, !insn.addr !377
  %13 = inttoptr i32 %12 to i8*, !insn.addr !377
  store i8 0, i8* %13, align 1, !insn.addr !377
  ret i32 %1, !insn.addr !378

dec_label_pc_401864:                              ; preds = %dec_label_pc_401820
  %14 = icmp sgt i32 %arg2, -1
  br i1 %14, label %dec_label_pc_401870, label %dec_label_pc_40194f, !insn.addr !379

dec_label_pc_401870:                              ; preds = %dec_label_pc_401864
  %15 = or i32 %arg2, 15, !insn.addr !380
  %16 = icmp sgt i32 %15, -1
  store i32 2147483647, i32* %ebx.1156.reg2mem, !insn.addr !381
  br i1 %16, label %dec_label_pc_401884, label %dec_label_pc_4018c3, !insn.addr !381

dec_label_pc_401884:                              ; preds = %dec_label_pc_401870
  %17 = udiv i32 %4, 2, !insn.addr !382
  %18 = xor i32 %17, 2147483647, !insn.addr !383
  %19 = icmp ugt i32 %4, %18
  store i32 2147483647, i32* %ebx.1156.reg2mem, !insn.addr !384
  br i1 %19, label %dec_label_pc_4018c3, label %dec_label_pc_40189a, !insn.addr !384

dec_label_pc_40189a:                              ; preds = %dec_label_pc_401884
  %20 = add i32 %17, %4, !insn.addr !385
  %21 = icmp ult i32 %15, %20, !insn.addr !386
  store i32 %15, i32* %ebx.11.reg2mem
  br i1 %21, label %dec_label_pc_4018a2, label %dec_label_pc_4018a2.thread

dec_label_pc_4018a2:                              ; preds = %dec_label_pc_40189a
  %22 = icmp eq i32 %20, -1, !insn.addr !387
  store i32 %20, i32* %ebx.11.reg2mem
  br i1 %22, label %dec_label_pc_401954, label %dec_label_pc_4018a2.thread

dec_label_pc_4018a2.thread:                       ; preds = %dec_label_pc_40189a, %dec_label_pc_4018a2
  %ebx.11.reload = load i32, i32* %ebx.11.reg2mem
  %23 = add i32 %ebx.11.reload, 1
  %24 = icmp ult i32 %23, 4096, !insn.addr !388
  br i1 %24, label %dec_label_pc_4018e1, label %dec_label_pc_4018b8, !insn.addr !389

dec_label_pc_4018b8:                              ; preds = %dec_label_pc_4018a2.thread
  %25 = icmp ugt i32 %23, -36, !insn.addr !390
  store i32 %ebx.11.reload, i32* %ebx.1156.reg2mem, !insn.addr !391
  br i1 %25, label %dec_label_pc_401954, label %dec_label_pc_4018c3, !insn.addr !391

dec_label_pc_4018c3:                              ; preds = %dec_label_pc_401884, %dec_label_pc_401870, %dec_label_pc_4018b8
  %ebx.1156.reload = load i32, i32* %ebx.1156.reg2mem
  %26 = add i32 %ebx.1156.reload, 36, !insn.addr !392
  %27 = call i32 @function_402813(i32 %26), !insn.addr !393
  %28 = icmp eq i32 %27, 0, !insn.addr !394
  br i1 %28, label %dec_label_pc_401949, label %dec_label_pc_4018d2, !insn.addr !395

dec_label_pc_4018d2:                              ; preds = %dec_label_pc_4018c3
  %29 = add i32 %27, 35, !insn.addr !396
  %30 = and i32 %29, -32, !insn.addr !397
  %31 = add i32 %30, -4, !insn.addr !398
  %32 = inttoptr i32 %31 to i32*, !insn.addr !398
  store i32 %27, i32* %32, align 4, !insn.addr !398
  store i32 %ebx.1156.reload, i32* %ebx.114.reg2mem, !insn.addr !399
  store i32 %30, i32* %eax.0.reg2mem, !insn.addr !399
  br label %dec_label_pc_4018ee, !insn.addr !399

dec_label_pc_4018e1:                              ; preds = %dec_label_pc_4018a2.thread
  %33 = call i32 @function_402813(i32 %23), !insn.addr !400
  store i32 %ebx.11.reload, i32* %ebx.114.reg2mem, !insn.addr !401
  store i32 %33, i32* %eax.0.reg2mem, !insn.addr !401
  br label %dec_label_pc_4018ee, !insn.addr !401

dec_label_pc_4018ee:                              ; preds = %dec_label_pc_4018e1, %dec_label_pc_4018d2
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %ebx.114.reload = load i32, i32* %ebx.114.reg2mem
  %34 = add i32 %1, 16, !insn.addr !402
  %35 = inttoptr i32 %34 to i32*, !insn.addr !402
  store i32 %arg2, i32* %35, align 4, !insn.addr !402
  store i32 %ebx.114.reload, i32* %3, align 4, !insn.addr !403
  %36 = inttoptr i32 %eax.0.reload to i32*, !insn.addr !404
  %37 = inttoptr i32 %arg1 to i32*, !insn.addr !404
  %38 = call i32* @memcpy(i32* %36, i32* %37, i32 %arg2), !insn.addr !404
  %39 = add i32 %eax.0.reload, %arg2, !insn.addr !405
  %40 = inttoptr i32 %39 to i8*, !insn.addr !405
  store i8 0, i8* %40, align 1, !insn.addr !405
  %41 = icmp ult i32 %4, 16, !insn.addr !406
  br i1 %41, label %dec_label_pc_40193c, label %dec_label_pc_401913, !insn.addr !407

dec_label_pc_401913:                              ; preds = %dec_label_pc_4018ee
  %42 = add i32 %4, 1, !insn.addr !408
  %43 = icmp ult i32 %42, 4096, !insn.addr !409
  store i32 %42, i32* %eax.1.reg2mem, !insn.addr !410
  br i1 %43, label %dec_label_pc_401932, label %dec_label_pc_401920, !insn.addr !410

dec_label_pc_401920:                              ; preds = %dec_label_pc_401913
  %44 = add i32 %4, -3
  %45 = inttoptr i32 %44 to i32*, !insn.addr !411
  %46 = load i32, i32* %45, align 4, !insn.addr !411
  %47 = sub i32 %44, %46, !insn.addr !412
  %48 = icmp ult i32 %47, 32
  store i32 %46, i32* %eax.1.reg2mem, !insn.addr !413
  br i1 %48, label %dec_label_pc_401932, label %dec_label_pc_401949, !insn.addr !413

dec_label_pc_401932:                              ; preds = %dec_label_pc_401920, %dec_label_pc_401913
  %eax.1.reload = load i32, i32* %eax.1.reg2mem
  %49 = call i32 @function_402843(i32 %eax.1.reload), !insn.addr !414
  br label %dec_label_pc_40193c, !insn.addr !415

dec_label_pc_40193c:                              ; preds = %dec_label_pc_401932, %dec_label_pc_4018ee
  %50 = inttoptr i32 %1 to i32*, !insn.addr !416
  store i32 %eax.0.reload, i32* %50, align 4, !insn.addr !416
  ret i32 %1, !insn.addr !417

dec_label_pc_401949:                              ; preds = %dec_label_pc_401920, %dec_label_pc_4018c3
  call void @_invalid_parameter_noinfo_noreturn(), !insn.addr !418
  br label %dec_label_pc_40194f, !insn.addr !418

dec_label_pc_40194f:                              ; preds = %dec_label_pc_401864, %dec_label_pc_401949
  %51 = call i32 @function_401170(), !insn.addr !419
  br label %dec_label_pc_401954, !insn.addr !419

dec_label_pc_401954:                              ; preds = %dec_label_pc_4018a2, %dec_label_pc_40194f, %dec_label_pc_4018b8
  %52 = call i32 @function_4010d0(), !insn.addr !420
  unreachable, !insn.addr !420

; uselistorder directives
  uselistorder i32 %eax.0.reload, { 1, 2, 0 }
  uselistorder i32 %27, { 1, 0, 2 }
  uselistorder i32 %23, { 1, 0, 2 }
  uselistorder i32 %17, { 1, 0 }
  uselistorder i32 %4, { 3, 5, 6, 1, 7, 0, 2, 4, 8 }
  uselistorder i32 %1, { 3, 2, 1, 5, 4, 6, 0 }
  uselistorder i32* %ebx.11.reg2mem, { 0, 2, 1 }
  uselistorder i32* %ebx.1156.reg2mem, { 0, 3, 1, 2 }
  uselistorder i32* %ebx.114.reg2mem, { 0, 2, 1 }
  uselistorder i32* %eax.0.reg2mem, { 0, 2, 1 }
  uselistorder i32 %arg2, { 0, 4, 5, 7, 6, 1, 2, 3, 8 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_401954, { 1, 2, 0 }
  uselistorder label %dec_label_pc_40194f, { 1, 0 }
  uselistorder label %dec_label_pc_4018c3, { 2, 0, 1 }
  uselistorder label %dec_label_pc_4018a2.thread, { 1, 0 }
}

define i32 @function_401960(i8 %arg1) local_unnamed_addr {
dec_label_pc_401960:
  %0 = alloca i32
  %esi.2.reg2mem = alloca i32, !insn.addr !421
  %esp.1.in.reg2mem = alloca i32*, !insn.addr !421
  %esi.1.reg2mem = alloca i32, !insn.addr !421
  %edi.1.reg2mem = alloca i32, !insn.addr !421
  %ecx.0.reg2mem = alloca i32, !insn.addr !421
  %esi.0.reg2mem = alloca i32, !insn.addr !421
  %.reg2mem9 = alloca i32, !insn.addr !421
  %edi.014.reg2mem = alloca i32, !insn.addr !421
  %.reg2mem7 = alloca i32, !insn.addr !421
  %edi.0156.reg2mem = alloca i32, !insn.addr !421
  %.reg2mem = alloca i32, !insn.addr !421
  %edi.01.reg2mem = alloca i32, !insn.addr !421
  %1 = load i32, i32* %0
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %2 = add i32 %1, 16, !insn.addr !422
  %3 = inttoptr i32 %2 to i32*, !insn.addr !422
  %4 = load i32, i32* %3, align 4, !insn.addr !422
  %5 = icmp eq i32 %4, 2147483647, !insn.addr !423
  br i1 %5, label %dec_label_pc_401a8f, label %dec_label_pc_401983, !insn.addr !424

dec_label_pc_401983:                              ; preds = %dec_label_pc_401960
  %6 = add i32 %1, 20, !insn.addr !425
  %7 = inttoptr i32 %6 to i32*, !insn.addr !425
  %8 = load i32, i32* %7, align 4, !insn.addr !425
  %9 = add i32 %4, 1
  %10 = or i32 %9, 15, !insn.addr !426
  %11 = icmp slt i32 %10, 0
  store i32 -2147483613, i32* %.reg2mem, !insn.addr !427
  store i32 2147483647, i32* %edi.0156.reg2mem, !insn.addr !427
  store i32 -2147483648, i32* %.reg2mem7, !insn.addr !427
  br i1 %11, label %dec_label_pc_4019d0, label %dec_label_pc_401997, !insn.addr !427

dec_label_pc_401997:                              ; preds = %dec_label_pc_401983
  %12 = udiv i32 %8, 2, !insn.addr !428
  %13 = xor i32 %12, 2147483647, !insn.addr !429
  %14 = icmp ugt i32 %8, %13
  store i32 -2147483613, i32* %.reg2mem, !insn.addr !430
  store i32 2147483647, i32* %edi.0156.reg2mem, !insn.addr !430
  store i32 -2147483648, i32* %.reg2mem7, !insn.addr !430
  br i1 %14, label %dec_label_pc_4019d0, label %dec_label_pc_4019a8, !insn.addr !430

dec_label_pc_4019a8:                              ; preds = %dec_label_pc_401997
  %15 = add i32 %12, %8, !insn.addr !431
  %16 = icmp ult i32 %10, %15, !insn.addr !432
  store i32 %10, i32* %edi.01.reg2mem
  br i1 %16, label %dec_label_pc_4019af, label %dec_label_pc_4019af.thread

dec_label_pc_4019af:                              ; preds = %dec_label_pc_4019a8
  %17 = icmp eq i32 %15, -1, !insn.addr !433
  store i32 %15, i32* %edi.01.reg2mem
  br i1 %17, label %dec_label_pc_401a94, label %dec_label_pc_4019af.thread

dec_label_pc_4019af.thread:                       ; preds = %dec_label_pc_4019a8, %dec_label_pc_4019af
  %edi.01.reload = load i32, i32* %edi.01.reg2mem
  %18 = add i32 %edi.01.reload, 1
  %19 = icmp ult i32 %18, 4096, !insn.addr !434
  br i1 %19, label %dec_label_pc_4019f3, label %dec_label_pc_4019c5, !insn.addr !435

dec_label_pc_4019c5:                              ; preds = %dec_label_pc_4019af.thread
  %20 = add i32 %edi.01.reload, 36, !insn.addr !436
  %21 = icmp ugt i32 %18, -36, !insn.addr !437
  store i32 %20, i32* %.reg2mem, !insn.addr !438
  store i32 %edi.01.reload, i32* %edi.0156.reg2mem, !insn.addr !438
  store i32 %18, i32* %.reg2mem7, !insn.addr !438
  br i1 %21, label %dec_label_pc_401a94, label %dec_label_pc_4019d0, !insn.addr !438

dec_label_pc_4019d0:                              ; preds = %dec_label_pc_401997, %dec_label_pc_401983, %dec_label_pc_4019c5
  %.reload = load i32, i32* %.reg2mem
  store i32 %.reload, i32* %stack_var_-28, align 4, !insn.addr !439
  %22 = call i32 @function_402813(i32 %.reload), !insn.addr !440
  %23 = icmp eq i32 %22, 0, !insn.addr !441
  store i32 %8, i32* %esi.1.reg2mem, !insn.addr !442
  br i1 %23, label %dec_label_pc_401a64, label %dec_label_pc_4019e1, !insn.addr !442

dec_label_pc_4019e1:                              ; preds = %dec_label_pc_4019d0
  %.reload8 = load i32, i32* %.reg2mem7
  %edi.0156.reload = load i32, i32* %edi.0156.reg2mem
  %24 = add i32 %22, 35, !insn.addr !443
  %25 = and i32 %24, -32, !insn.addr !444
  %26 = add i32 %25, -4, !insn.addr !445
  %27 = inttoptr i32 %26 to i32*, !insn.addr !445
  store i32 %22, i32* %27, align 4, !insn.addr !445
  store i32 %edi.0156.reload, i32* %edi.014.reg2mem, !insn.addr !446
  store i32 %.reload8, i32* %.reg2mem9, !insn.addr !446
  store i32 %25, i32* %esi.0.reg2mem, !insn.addr !446
  br label %dec_label_pc_401a05, !insn.addr !446

dec_label_pc_4019f3:                              ; preds = %dec_label_pc_4019af.thread
  store i32 %18, i32* %stack_var_-28, align 4, !insn.addr !447
  %28 = call i32 @function_402813(i32 %18), !insn.addr !448
  store i32 %edi.01.reload, i32* %edi.014.reg2mem, !insn.addr !449
  store i32 %18, i32* %.reg2mem9, !insn.addr !449
  store i32 %28, i32* %esi.0.reg2mem, !insn.addr !449
  br label %dec_label_pc_401a05, !insn.addr !449

dec_label_pc_401a05:                              ; preds = %dec_label_pc_4019f3, %dec_label_pc_4019e1
  %esi.0.reload = load i32, i32* %esi.0.reg2mem
  %.reload10 = load i32, i32* %.reg2mem9
  %edi.014.reload = load i32, i32* %edi.014.reg2mem
  %29 = icmp ult i32 %8, 16, !insn.addr !450
  store i32 %9, i32* %3, align 4, !insn.addr !451
  store i32 %edi.014.reload, i32* %7, align 4, !insn.addr !452
  store i32 %4, i32* %stack_var_-28, align 4, !insn.addr !453
  store i32* %stack_var_-28, i32** %esp.1.in.reg2mem, !insn.addr !454
  store i32 %esi.0.reload, i32* %esi.2.reg2mem, !insn.addr !454
  br i1 %29, label %dec_label_pc_401a6a, label %dec_label_pc_401a15, !insn.addr !454

dec_label_pc_401a15:                              ; preds = %dec_label_pc_401a05
  %30 = inttoptr i32 %esi.0.reload to i32*, !insn.addr !455
  %31 = inttoptr i32 %.reload10 to i32*, !insn.addr !455
  %32 = call i32* @memcpy(i32* %30, i32* %31, i32 %4), !insn.addr !455
  %33 = add i32 %8, 1, !insn.addr !456
  %34 = add i32 %esi.0.reload, %4, !insn.addr !457
  %35 = inttoptr i32 %34 to i8*, !insn.addr !457
  store i8 %arg1, i8* %35, align 1, !insn.addr !457
  %36 = add i32 %esi.0.reload, %9, !insn.addr !458
  %37 = inttoptr i32 %36 to i8*, !insn.addr !458
  store i8 0, i8* %37, align 1, !insn.addr !458
  %38 = icmp ult i32 %33, 4096, !insn.addr !459
  store i32 %33, i32* %ecx.0.reg2mem, !insn.addr !460
  store i32 %.reload10, i32* %edi.1.reg2mem, !insn.addr !460
  br i1 %38, label %dec_label_pc_401a4d, label %dec_label_pc_401a3b, !insn.addr !460

dec_label_pc_401a3b:                              ; preds = %dec_label_pc_401a15
  %39 = add i32 %.reload10, -4
  %40 = inttoptr i32 %39 to i32*, !insn.addr !461
  %41 = load i32, i32* %40, align 4, !insn.addr !461
  %42 = sub i32 %39, %41, !insn.addr !462
  %43 = icmp ult i32 %42, 32
  store i32 %esi.0.reload, i32* %esi.1.reg2mem, !insn.addr !463
  br i1 %43, label %dec_label_pc_401a4b, label %dec_label_pc_401a64, !insn.addr !463

dec_label_pc_401a4b:                              ; preds = %dec_label_pc_401a3b
  %44 = add i32 %8, 36, !insn.addr !464
  store i32 %44, i32* %ecx.0.reg2mem, !insn.addr !465
  store i32 %41, i32* %edi.1.reg2mem, !insn.addr !465
  br label %dec_label_pc_401a4d, !insn.addr !465

dec_label_pc_401a4d:                              ; preds = %dec_label_pc_401a4b, %dec_label_pc_401a15
  %edi.1.reload = load i32, i32* %edi.1.reg2mem
  %ecx.0.reload = load i32, i32* %ecx.0.reg2mem
  store i32 %ecx.0.reload, i32* %stack_var_-28, align 4, !insn.addr !466
  %45 = call i32 @function_402843(i32 %edi.1.reload), !insn.addr !467
  %46 = inttoptr i32 %1 to i32*, !insn.addr !468
  store i32 %esi.0.reload, i32* %46, align 4, !insn.addr !468
  ret i32 %1, !insn.addr !469

dec_label_pc_401a64:                              ; preds = %dec_label_pc_401a3b, %dec_label_pc_4019d0
  %esi.1.reload = load i32, i32* %esi.1.reg2mem
  call void @_invalid_parameter_noinfo_noreturn(), !insn.addr !470
  store i32* %stack_var_-24, i32** %esp.1.in.reg2mem, !insn.addr !470
  store i32 %esi.1.reload, i32* %esi.2.reg2mem, !insn.addr !470
  br label %dec_label_pc_401a6a, !insn.addr !470

dec_label_pc_401a6a:                              ; preds = %dec_label_pc_401a64, %dec_label_pc_401a05
  %esi.2.reload = load i32, i32* %esi.2.reg2mem
  %esp.1.in.reload = load i32*, i32** %esp.1.in.reg2mem
  %esp.1 = ptrtoint i32* %esp.1.in.reload to i32
  %47 = add i32 %esp.1, -4, !insn.addr !471
  %48 = inttoptr i32 %47 to i32*, !insn.addr !471
  %49 = add i32 %esp.1, -8, !insn.addr !472
  %50 = inttoptr i32 %49 to i32*, !insn.addr !472
  store i32 %esi.2.reload, i32* %50, align 4, !insn.addr !472
  %51 = call i32* @memcpy(i32* nonnull @0, i32* nonnull @0, i32 ptrtoint (i32* @0 to i32)), !insn.addr !473
  %52 = add i32 %esi.2.reload, %4, !insn.addr !474
  %53 = inttoptr i32 %52 to i8*, !insn.addr !474
  store i8 %arg1, i8* %53, align 1, !insn.addr !474
  %54 = add i32 %esi.2.reload, %9, !insn.addr !475
  %55 = inttoptr i32 %54 to i8*, !insn.addr !475
  store i8 0, i8* %55, align 1, !insn.addr !475
  %56 = inttoptr i32 %1 to i32*, !insn.addr !476
  store i32 %esi.2.reload, i32* %56, align 4, !insn.addr !476
  ret i32 %1, !insn.addr !477

dec_label_pc_401a8f:                              ; preds = %dec_label_pc_401960
  %57 = call i32 @function_401170(), !insn.addr !478
  br label %dec_label_pc_401a94, !insn.addr !478

dec_label_pc_401a94:                              ; preds = %dec_label_pc_4019af, %dec_label_pc_401a8f, %dec_label_pc_4019c5
  %58 = call i32 @function_4010d0(), !insn.addr !479
  unreachable, !insn.addr !479

; uselistorder directives
  uselistorder i32 %esi.2.reload, { 1, 3, 2, 0 }
  uselistorder i32 %.reload10, { 1, 0, 2 }
  uselistorder i32 %esi.0.reload, { 3, 1, 5, 4, 2, 0 }
  uselistorder i32 %22, { 1, 0, 2 }
  uselistorder i32 %18, { 0, 4, 3, 1, 2, 5 }
  uselistorder i32 %edi.01.reload, { 0, 1, 3, 2 }
  uselistorder i32 %12, { 1, 0 }
  uselistorder i32 %10, { 0, 2, 1 }
  uselistorder i32 %8, { 3, 5, 6, 0, 2, 4, 1 }
  uselistorder i32* %stack_var_-28, { 1, 0, 2, 3, 4 }
  uselistorder i32 %1, { 2, 3, 5, 4, 1, 0 }
  uselistorder i32* %edi.01.reg2mem, { 0, 2, 1 }
  uselistorder i32* %.reg2mem, { 0, 3, 1, 2 }
  uselistorder i32* %edi.0156.reg2mem, { 0, 3, 1, 2 }
  uselistorder i32* %.reg2mem7, { 0, 3, 1, 2 }
  uselistorder i32* %edi.014.reg2mem, { 0, 2, 1 }
  uselistorder i32* %.reg2mem9, { 0, 2, 1 }
  uselistorder i32* %esi.0.reg2mem, { 0, 2, 1 }
  uselistorder i32* %esi.1.reg2mem, { 0, 2, 1 }
  uselistorder i32 ()* @function_401170, { 2, 1, 0 }
  uselistorder i8 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_401a94, { 1, 2, 0 }
  uselistorder label %dec_label_pc_4019d0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_4019af.thread, { 1, 0 }
}

define i32 @function_401aa0() local_unnamed_addr {
dec_label_pc_401aa0:
  %0 = alloca i128
  %1 = alloca i64
  %2 = alloca i32
  %esp.5.reg2mem = alloca i32, !insn.addr !480
  %ecx.7.reg2mem = alloca i32, !insn.addr !480
  %esp.4.reg2mem = alloca i32, !insn.addr !480
  %ecx.6.reg2mem = alloca i32, !insn.addr !480
  %ecx.516.reg2mem = alloca i32, !insn.addr !480
  %esp.217.reg2mem = alloca i32, !insn.addr !480
  %esi.318.reg2mem = alloca i32, !insn.addr !480
  %edi.319.reg2mem = alloca i32, !insn.addr !480
  %edi.2.reg2mem = alloca i32, !insn.addr !480
  %esi.2.reg2mem = alloca i32, !insn.addr !480
  %esp.1.reg2mem = alloca i32, !insn.addr !480
  %.pre-phi56.in.in.reg2mem = alloca i32, !insn.addr !480
  %.pre-phi.reg2mem = alloca i32, !insn.addr !480
  %ecx.325.reg2mem = alloca i32, !insn.addr !480
  %esp.026.reg2mem = alloca i32, !insn.addr !480
  %esi.127.reg2mem = alloca i32, !insn.addr !480
  %edi.128.reg2mem = alloca i32, !insn.addr !480
  %.reg2mem = alloca i32, !insn.addr !480
  %ecx.259.reg2mem = alloca i32, !insn.addr !480
  %edi.0.reg2mem = alloca i32, !insn.addr !480
  %esi.0.reg2mem = alloca i32, !insn.addr !480
  %ecx.0.reg2mem = alloca i32, !insn.addr !480
  %3 = load i32, i32* %2
  %4 = load i32, i32* %2
  %5 = load i128, i128* %0
  %stack_var_-64 = alloca i32, align 4
  %6 = load i64, i64* %1
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %7 = ptrtoint i32* %stack_var_-4 to i32, !insn.addr !481
  %8 = call i32 @__readfsdword(i32 0), !insn.addr !482
  store i32 %8, i32* %stack_var_-16, align 4, !insn.addr !483
  %9 = load i32, i32* @global_var_406008, align 4, !insn.addr !484
  %10 = xor i32 %9, %7, !insn.addr !485
  store i32 %10, i32* %stack_var_-64, align 4, !insn.addr !486
  %11 = ptrtoint i32* %stack_var_-16 to i32, !insn.addr !487
  call void @__writefsdword(i32 0, i32 %11), !insn.addr !488
  br label %dec_label_pc_401ae1, !insn.addr !489

dec_label_pc_401ae1:                              ; preds = %dec_label_pc_401ae1, %dec_label_pc_401aa0
  %ecx.0.reload = load i32, i32* %ecx.0.reg2mem
  %12 = inttoptr i32 %ecx.0.reload to i8*, !insn.addr !490
  %13 = load i8, i8* %12, align 1, !insn.addr !490
  %14 = add i32 %ecx.0.reload, 1, !insn.addr !491
  %15 = icmp eq i8 %13, 0, !insn.addr !492
  %16 = icmp eq i1 %15, false, !insn.addr !493
  store i32 %14, i32* %ecx.0.reg2mem, !insn.addr !493
  br i1 %16, label %dec_label_pc_401ae1, label %dec_label_pc_401ae8, !insn.addr !493

dec_label_pc_401ae8:                              ; preds = %dec_label_pc_401ae1
  %17 = sub i32 %ecx.0.reload, %3, !insn.addr !494
  %18 = add i32 %ecx.0.reload, 5, !insn.addr !495
  %19 = inttoptr i32 %18 to i32*, !insn.addr !495
  %20 = load i32, i32* %19, align 4, !insn.addr !495
  %21 = add i32 %20, %4, !insn.addr !496
  %22 = add i32 %21, 36, !insn.addr !497
  %23 = inttoptr i32 %22 to i32*, !insn.addr !497
  %24 = load i32, i32* %23, align 4, !insn.addr !497
  %25 = icmp slt i32 %24, 0, !insn.addr !498
  br i1 %25, label %dec_label_pc_401b18, label %dec_label_pc_401b01, !insn.addr !499

dec_label_pc_401b01:                              ; preds = %dec_label_pc_401ae8
  %26 = add i32 %21, 32, !insn.addr !500
  %27 = inttoptr i32 %26 to i32*, !insn.addr !500
  %28 = load i32, i32* %27, align 4, !insn.addr !500
  %29 = icmp eq i32 %24, 0, !insn.addr !498
  %30 = icmp eq i1 %29, false, !insn.addr !501
  %31 = icmp ugt i32 %28, %17
  %or.cond10 = or i1 %30, %31
  br i1 %or.cond10, label %dec_label_pc_401b11, label %dec_label_pc_401b18, !insn.addr !501

dec_label_pc_401b11:                              ; preds = %dec_label_pc_401b01
  %32 = sub i32 %28, %17, !insn.addr !502
  %33 = icmp ult i32 %28, %17, !insn.addr !502
  %34 = zext i1 %33 to i32, !insn.addr !503
  %35 = sub i32 %24, %34, !insn.addr !503
  store i32 %32, i32* %esi.0.reg2mem, !insn.addr !504
  store i32 %35, i32* %edi.0.reg2mem, !insn.addr !504
  br label %dec_label_pc_401b26, !insn.addr !504

dec_label_pc_401b18:                              ; preds = %dec_label_pc_401b01, %dec_label_pc_401ae8
  %36 = call i128 @__asm_xorps(i128 %5, i128 %5), !insn.addr !505
  %37 = mul i64 %6, 4294967296
  %38 = ashr exact i64 %37, 32, !insn.addr !506
  call void @__asm_movlpd(i64 %38, i128 %36), !insn.addr !506
  %39 = trunc i64 %6 to i32, !insn.addr !507
  store i32 %39, i32* %esi.0.reg2mem, !insn.addr !507
  br label %dec_label_pc_401b26, !insn.addr !507

dec_label_pc_401b26:                              ; preds = %dec_label_pc_401b18, %dec_label_pc_401b11
  %40 = ptrtoint i32* %stack_var_-64 to i32, !insn.addr !486
  %41 = add i32 %21, 56, !insn.addr !508
  %42 = inttoptr i32 %41 to i32*, !insn.addr !508
  %43 = load i32, i32* %42, align 4, !insn.addr !508
  %44 = icmp eq i32 %43, 0, !insn.addr !509
  %spec.select = select i1 %44, i32 %14, i32 %43
  %45 = add i32 %spec.select, 4, !insn.addr !510
  %46 = inttoptr i32 %45 to i32*, !insn.addr !510
  %47 = load i32, i32* %46, align 4, !insn.addr !510
  %48 = add i32 %47, %4, !insn.addr !511
  %49 = add i32 %48, 12, !insn.addr !512
  %50 = inttoptr i32 %49 to i32*, !insn.addr !512
  %51 = load i32, i32* %50, align 4, !insn.addr !512
  %52 = icmp eq i32 %51, 0, !insn.addr !512
  store i32 4, i32* %ecx.7.reg2mem, !insn.addr !513
  store i32 %40, i32* %esp.5.reg2mem, !insn.addr !513
  br i1 %52, label %dec_label_pc_401b57, label %dec_label_pc_401c7c, !insn.addr !513

dec_label_pc_401b57:                              ; preds = %dec_label_pc_401b26
  %edi.0.reload = load i32, i32* %edi.0.reg2mem
  %esi.0.reload = load i32, i32* %esi.0.reg2mem
  %53 = add i32 %48, 60, !insn.addr !514
  %54 = inttoptr i32 %53 to i32*, !insn.addr !514
  %55 = load i32, i32* %54, align 4, !insn.addr !514
  %56 = icmp eq i32 %55, 0, !insn.addr !515
  %57 = icmp eq i32 %55, %4, !insn.addr !516
  %or.cond6 = or i1 %56, %57
  store i32 %spec.select, i32* %ecx.259.reg2mem, !insn.addr !517
  store i32 %47, i32* %.reg2mem, !insn.addr !517
  br i1 %or.cond6, label %dec_label_pc_401b95, label %dec_label_pc_401b7d, !insn.addr !517

dec_label_pc_401b7d:                              ; preds = %dec_label_pc_401b57
  %58 = call i32 @"?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ"(), !insn.addr !518
  %59 = add i32 %55, 4, !insn.addr !519
  %60 = inttoptr i32 %59 to i32*, !insn.addr !519
  %61 = load i32, i32* %60, align 4, !insn.addr !519
  %62 = add i32 %4, 12, !insn.addr !520
  %63 = add i32 %62, %61, !insn.addr !520
  %64 = inttoptr i32 %63 to i32*, !insn.addr !520
  %65 = load i32, i32* %64, align 4, !insn.addr !520
  %66 = icmp eq i32 %65, 0, !insn.addr !520
  %phitmp = icmp eq i1 %66, false
  %phitmp58 = icmp eq i1 %phitmp, false
  store i32 %55, i32* %ecx.259.reg2mem, !insn.addr !521
  store i32 %61, i32* %.reg2mem, !insn.addr !521
  store i32 4, i32* %ecx.7.reg2mem, !insn.addr !521
  store i32 %40, i32* %esp.5.reg2mem, !insn.addr !521
  br i1 %phitmp58, label %dec_label_pc_401b95, label %dec_label_pc_401c7c, !insn.addr !521

dec_label_pc_401b95:                              ; preds = %dec_label_pc_401b57, %dec_label_pc_401b7d
  %.reload = load i32, i32* %.reg2mem
  %ecx.259.reload = load i32, i32* %ecx.259.reg2mem
  %67 = add i32 %4, 20, !insn.addr !522
  %68 = add i32 %67, %.reload, !insn.addr !522
  %69 = inttoptr i32 %68 to i32*, !insn.addr !522
  %70 = load i32, i32* %69, align 4, !insn.addr !522
  %71 = and i32 %70, 448, !insn.addr !523
  %72 = icmp eq i32 %71, 64, !insn.addr !524
  %73 = icmp slt i32 %edi.0.reload, 0, !insn.addr !525
  %or.cond57 = or i1 %73, %72
  br i1 %or.cond57, label %dec_label_pc_401b95.dec_label_pc_401be7_crit_edge, label %dec_label_pc_401bb4.lr.ph, !insn.addr !526

dec_label_pc_401b95.dec_label_pc_401be7_crit_edge: ; preds = %dec_label_pc_401b95
  %.pre = add i32 %4, 56
  store i32 %.pre, i32* %.pre-phi.reg2mem
  store i32 %ecx.259.reload, i32* %.pre-phi56.in.in.reg2mem
  store i32 %40, i32* %esp.1.reg2mem
  store i32 %esi.0.reload, i32* %esi.2.reg2mem
  store i32 %edi.0.reload, i32* %edi.2.reg2mem
  br label %dec_label_pc_401be7

dec_label_pc_401bb4.lr.ph:                        ; preds = %dec_label_pc_401b95
  %74 = add i32 %4, 64
  %75 = add i32 %4, 56
  store i32 %edi.0.reload, i32* %edi.128.reg2mem
  store i32 %esi.0.reload, i32* %esi.127.reg2mem
  store i32 %40, i32* %esp.026.reg2mem
  store i32 %ecx.259.reload, i32* %ecx.325.reg2mem
  br label %dec_label_pc_401bb4

dec_label_pc_401bb4:                              ; preds = %dec_label_pc_401bb4.lr.ph, %dec_label_pc_401bdd
  %ecx.325.reload = load i32, i32* %ecx.325.reg2mem
  %esp.026.reload = load i32, i32* %esp.026.reg2mem
  %esi.127.reload = load i32, i32* %esi.127.reg2mem
  %edi.128.reload = load i32, i32* %edi.128.reg2mem
  %76 = icmp eq i32 %edi.128.reload, 0, !insn.addr !525
  %77 = icmp eq i1 %76, false, !insn.addr !527
  %78 = icmp ne i1 %77, true, !insn.addr !527
  %79 = icmp eq i32 %esi.127.reload, 0, !insn.addr !528
  %or.cond = icmp eq i1 %79, %78
  store i32 %75, i32* %.pre-phi.reg2mem, !insn.addr !527
  store i32 %ecx.325.reload, i32* %.pre-phi56.in.in.reg2mem, !insn.addr !527
  store i32 %esp.026.reload, i32* %esp.1.reg2mem, !insn.addr !527
  store i32 0, i32* %esi.2.reg2mem, !insn.addr !527
  store i32 %edi.128.reload, i32* %edi.2.reg2mem, !insn.addr !527
  br i1 %or.cond, label %dec_label_pc_401be7, label %dec_label_pc_401bba, !insn.addr !527

dec_label_pc_401bba:                              ; preds = %dec_label_pc_401bb4
  %80 = add i32 %ecx.325.reload, 4, !insn.addr !529
  %81 = inttoptr i32 %80 to i32*, !insn.addr !529
  %82 = load i32, i32* %81, align 4, !insn.addr !529
  %83 = add i32 %74, %82, !insn.addr !530
  %84 = inttoptr i32 %83 to i8*, !insn.addr !530
  %85 = load i8, i8* %84, align 1, !insn.addr !530
  %86 = add i32 %75, %82, !insn.addr !531
  %87 = inttoptr i32 %86 to i32*, !insn.addr !531
  %88 = load i32, i32* %87, align 4, !insn.addr !531
  %89 = sext i8 %85 to i32, !insn.addr !532
  %90 = add i32 %esp.026.reload, -4, !insn.addr !533
  %91 = inttoptr i32 %90 to i32*, !insn.addr !533
  store i32 %89, i32* %91, align 4, !insn.addr !533
  %92 = call i32 @"?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z"(), !insn.addr !534
  %93 = icmp eq i32 %92, -1, !insn.addr !535
  %94 = icmp eq i1 %93, false, !insn.addr !536
  br i1 %94, label %dec_label_pc_401bdd, label %dec_label_pc_401bd8, !insn.addr !536

dec_label_pc_401bd8:                              ; preds = %dec_label_pc_401bba
  %95 = add i32 %92, 5, !insn.addr !537
  store i32 %95, i32* %ecx.6.reg2mem, !insn.addr !538
  store i32 %90, i32* %esp.4.reg2mem, !insn.addr !538
  br label %dec_label_pc_401c3e, !insn.addr !538

dec_label_pc_401bdd:                              ; preds = %dec_label_pc_401bba
  %96 = add i32 %esi.127.reload, -1, !insn.addr !539
  %97 = icmp ne i32 %esi.127.reload, 0, !insn.addr !539
  %98 = zext i1 %97 to i32, !insn.addr !540
  %99 = add i32 %edi.128.reload, -1, !insn.addr !540
  %100 = add i32 %99, %98, !insn.addr !540
  %101 = icmp slt i32 %100, 0, !insn.addr !525
  store i32 %100, i32* %edi.128.reg2mem, !insn.addr !541
  store i32 %96, i32* %esi.127.reg2mem, !insn.addr !541
  store i32 %90, i32* %esp.026.reg2mem, !insn.addr !541
  store i32 %88, i32* %ecx.325.reg2mem, !insn.addr !541
  store i32 %75, i32* %.pre-phi.reg2mem, !insn.addr !541
  store i32 %88, i32* %.pre-phi56.in.in.reg2mem, !insn.addr !541
  store i32 %90, i32* %esp.1.reg2mem, !insn.addr !541
  store i32 %96, i32* %esi.2.reg2mem, !insn.addr !541
  store i32 -1, i32* %edi.2.reg2mem, !insn.addr !541
  br i1 %101, label %dec_label_pc_401be7, label %dec_label_pc_401bb4, !insn.addr !541

dec_label_pc_401be7:                              ; preds = %dec_label_pc_401bb4, %dec_label_pc_401bdd, %dec_label_pc_401b95.dec_label_pc_401be7_crit_edge
  %edi.2.reload = load i32, i32* %edi.2.reg2mem
  %esi.2.reload = load i32, i32* %esi.2.reg2mem
  %esp.1.reload = load i32, i32* %esp.1.reg2mem
  %.pre-phi56.in.in.reload = load i32, i32* %.pre-phi56.in.in.reg2mem
  %.pre-phi.reload = load i32, i32* %.pre-phi.reg2mem
  %.pre-phi56.in = add i32 %.pre-phi56.in.in.reload, 4
  %.pre-phi56 = inttoptr i32 %.pre-phi56.in to i32*
  %102 = load i32, i32* %.pre-phi56, align 4, !insn.addr !542
  %103 = add i32 %esp.1.reload, -4, !insn.addr !543
  %104 = inttoptr i32 %103 to i32*, !insn.addr !543
  store i32 0, i32* %104, align 4, !insn.addr !543
  %105 = add i32 %esp.1.reload, -8, !insn.addr !544
  %106 = inttoptr i32 %105 to i32*, !insn.addr !544
  store i32 %17, i32* %106, align 4, !insn.addr !544
  %107 = add i32 %esp.1.reload, -12, !insn.addr !545
  %108 = inttoptr i32 %107 to i32*, !insn.addr !545
  %109 = add i32 %102, %.pre-phi.reload, !insn.addr !546
  %110 = inttoptr i32 %109 to i32*, !insn.addr !546
  %111 = load i32, i32* %110, align 4, !insn.addr !546
  %112 = call i32 @"?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z"(), !insn.addr !547
  %113 = icmp eq i32 %112, %17, !insn.addr !548
  %114 = icmp eq i32 %ecx.259.reload, 0, !insn.addr !549
  %115 = icmp eq i1 %114, %113
  store i32 4, i32* %ecx.6.reg2mem, !insn.addr !550
  store i32 %107, i32* %esp.4.reg2mem, !insn.addr !550
  br i1 %115, label %dec_label_pc_401c05.preheader, label %dec_label_pc_401c3e, !insn.addr !550

dec_label_pc_401c05.preheader:                    ; preds = %dec_label_pc_401be7
  %116 = icmp slt i32 %edi.2.reload, 0, !insn.addr !551
  store i32 0, i32* %ecx.6.reg2mem, !insn.addr !552
  store i32 %107, i32* %esp.4.reg2mem, !insn.addr !552
  br i1 %116, label %dec_label_pc_401c3e, label %dec_label_pc_401c09.lr.ph, !insn.addr !552

dec_label_pc_401c09.lr.ph:                        ; preds = %dec_label_pc_401c05.preheader
  %117 = add i32 %4, 64
  store i32 %edi.2.reload, i32* %edi.319.reg2mem
  store i32 %esi.2.reload, i32* %esi.318.reg2mem
  store i32 %107, i32* %esp.217.reg2mem
  store i32 %111, i32* %ecx.516.reg2mem
  br label %dec_label_pc_401c09

dec_label_pc_401c09:                              ; preds = %dec_label_pc_401c09.lr.ph, %dec_label_pc_401c34
  %esp.217.reload = load i32, i32* %esp.217.reg2mem
  %esi.318.reload = load i32, i32* %esi.318.reg2mem
  %edi.319.reload = load i32, i32* %edi.319.reg2mem
  %118 = icmp eq i32 %edi.319.reload, 0, !insn.addr !551
  %119 = icmp eq i1 %118, false, !insn.addr !553
  %120 = icmp ne i1 %119, true, !insn.addr !553
  %121 = icmp eq i32 %esi.318.reload, 0, !insn.addr !554
  %or.cond4 = icmp eq i1 %121, %120
  store i32 0, i32* %ecx.6.reg2mem, !insn.addr !553
  store i32 %esp.217.reload, i32* %esp.4.reg2mem, !insn.addr !553
  br i1 %or.cond4, label %dec_label_pc_401c3e, label %dec_label_pc_401c0f, !insn.addr !553

dec_label_pc_401c0f:                              ; preds = %dec_label_pc_401c09
  %ecx.516.reload = load i32, i32* %ecx.516.reg2mem
  %122 = add i32 %ecx.516.reload, 4, !insn.addr !555
  %123 = inttoptr i32 %122 to i32*, !insn.addr !555
  %124 = load i32, i32* %123, align 4, !insn.addr !555
  %125 = add i32 %117, %124, !insn.addr !556
  %126 = inttoptr i32 %125 to i8*, !insn.addr !556
  %127 = load i8, i8* %126, align 1, !insn.addr !556
  %128 = add i32 %124, %.pre-phi.reload, !insn.addr !557
  %129 = inttoptr i32 %128 to i32*, !insn.addr !557
  %130 = load i32, i32* %129, align 4, !insn.addr !557
  %131 = sext i8 %127 to i32, !insn.addr !558
  %132 = add i32 %esp.217.reload, -4, !insn.addr !559
  %133 = inttoptr i32 %132 to i32*, !insn.addr !559
  store i32 %131, i32* %133, align 4, !insn.addr !559
  %134 = call i32 @"?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z"(), !insn.addr !560
  %135 = icmp eq i32 %134, -1, !insn.addr !561
  %136 = icmp eq i1 %135, false, !insn.addr !562
  store i32 4, i32* %ecx.6.reg2mem, !insn.addr !562
  store i32 %132, i32* %esp.4.reg2mem, !insn.addr !562
  br i1 %136, label %dec_label_pc_401c34, label %dec_label_pc_401c3e, !insn.addr !562

dec_label_pc_401c34:                              ; preds = %dec_label_pc_401c0f
  %137 = add i32 %esi.318.reload, -1, !insn.addr !563
  %138 = icmp ne i32 %esi.318.reload, 0, !insn.addr !563
  %139 = zext i1 %138 to i32, !insn.addr !564
  %140 = add i32 %edi.319.reload, -1, !insn.addr !564
  %141 = add i32 %140, %139, !insn.addr !564
  %142 = icmp slt i32 %141, 0, !insn.addr !551
  store i32 %141, i32* %edi.319.reg2mem, !insn.addr !552
  store i32 %137, i32* %esi.318.reg2mem, !insn.addr !552
  store i32 %132, i32* %esp.217.reg2mem, !insn.addr !552
  store i32 %130, i32* %ecx.516.reg2mem, !insn.addr !552
  store i32 0, i32* %ecx.6.reg2mem, !insn.addr !552
  store i32 %132, i32* %esp.4.reg2mem, !insn.addr !552
  br i1 %142, label %dec_label_pc_401c3e, label %dec_label_pc_401c09, !insn.addr !552

dec_label_pc_401c3e:                              ; preds = %dec_label_pc_401c0f, %dec_label_pc_401c09, %dec_label_pc_401c34, %dec_label_pc_401c05.preheader, %dec_label_pc_401be7, %dec_label_pc_401bd8
  %esp.4.reload = load i32, i32* %esp.4.reg2mem
  %ecx.6.reload = load i32, i32* %ecx.6.reg2mem
  %143 = add i32 %ecx.6.reload, 4, !insn.addr !565
  %144 = inttoptr i32 %143 to i32*, !insn.addr !565
  %145 = load i32, i32* %144, align 4, !insn.addr !565
  %146 = add i32 %145, %4
  %147 = add i32 %146, 32, !insn.addr !566
  %148 = inttoptr i32 %147 to i32*, !insn.addr !566
  store i32 0, i32* %148, align 4, !insn.addr !566
  %149 = add i32 %146, 36, !insn.addr !567
  %150 = inttoptr i32 %149 to i32*, !insn.addr !567
  store i32 0, i32* %150, align 4, !insn.addr !567
  store i32 %ecx.6.reload, i32* %ecx.7.reg2mem, !insn.addr !568
  store i32 %esp.4.reload, i32* %esp.5.reg2mem, !insn.addr !568
  br label %dec_label_pc_401c7c, !insn.addr !568

dec_label_pc_401c7c:                              ; preds = %dec_label_pc_401b26, %dec_label_pc_401b7d, %dec_label_pc_401c3e
  %esp.5.reload = load i32, i32* %esp.5.reg2mem
  %ecx.7.reload = load i32, i32* %ecx.7.reg2mem
  %151 = add i32 %esp.5.reload, -4, !insn.addr !569
  %152 = inttoptr i32 %151 to i32*, !insn.addr !569
  store i32 0, i32* %152, align 4, !insn.addr !569
  %153 = add i32 %esp.5.reload, -8, !insn.addr !570
  %154 = inttoptr i32 %153 to i32*, !insn.addr !570
  store i32 %ecx.7.reload, i32* %154, align 4, !insn.addr !570
  %155 = call i32 @"?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z"(i32 1), !insn.addr !571
  %156 = call i32 @"?uncaught_exception@std@@YA_NXZ"(), !insn.addr !572
  %157 = trunc i32 %156 to i8, !insn.addr !573
  %158 = icmp eq i8 %157, 0, !insn.addr !573
  %159 = icmp eq i1 %158, false, !insn.addr !574
  br i1 %159, label %dec_label_pc_401ca8, label %dec_label_pc_401ca0, !insn.addr !574

dec_label_pc_401ca0:                              ; preds = %dec_label_pc_401c7c
  %160 = call i32 @"?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ"(), !insn.addr !575
  br label %dec_label_pc_401ca8, !insn.addr !575

dec_label_pc_401ca8:                              ; preds = %dec_label_pc_401ca0, %dec_label_pc_401c7c
  %161 = load i32, i32* %stack_var_-16, align 4, !insn.addr !576
  call void @__writefsdword(i32 0, i32 %161), !insn.addr !577
  ret i32 %4, !insn.addr !578

; uselistorder directives
  uselistorder i32 %132, { 1, 2, 0, 3 }
  uselistorder i32 %esi.318.reload, { 1, 0, 2 }
  uselistorder i32 %esp.217.reload, { 1, 0 }
  uselistorder i32 %107, { 2, 0, 1, 3 }
  uselistorder i32 %90, { 1, 2, 0, 3 }
  uselistorder i32 %edi.128.reload, { 1, 0, 2 }
  uselistorder i32 %esi.127.reload, { 1, 0, 2 }
  uselistorder i32 %esp.026.reload, { 1, 0 }
  uselistorder i32 %ecx.325.reload, { 1, 0 }
  uselistorder i32 %75, { 1, 2, 0 }
  uselistorder i32 %ecx.259.reload, { 2, 1, 0 }
  uselistorder i32 %55, { 0, 2, 1, 3 }
  uselistorder i32 %esi.0.reload, { 1, 0 }
  uselistorder i32 %edi.0.reload, { 1, 0, 2 }
  uselistorder i32 %40, { 3, 2, 1, 0 }
  uselistorder i32 %28, { 2, 1, 0 }
  uselistorder i32 %24, { 0, 2, 1 }
  uselistorder i32 %21, { 0, 2, 1 }
  uselistorder i32 %17, { 3, 4, 2, 1, 0 }
  uselistorder i32 %14, { 1, 0 }
  uselistorder i32 %ecx.0.reload, { 3, 2, 1, 0 }
  uselistorder i32 %4, { 0, 9, 6, 5, 4, 10, 3, 2, 1, 8, 7 }
  uselistorder i32* %ecx.0.reg2mem, { 1, 0 }
  uselistorder i32* %esi.0.reg2mem, { 0, 2, 1 }
  uselistorder i32* %ecx.259.reg2mem, { 0, 2, 1 }
  uselistorder i32* %.reg2mem, { 0, 2, 1 }
  uselistorder i32* %edi.128.reg2mem, { 1, 0, 2 }
  uselistorder i32* %esi.127.reg2mem, { 1, 0, 2 }
  uselistorder i32* %esp.026.reg2mem, { 1, 0, 2 }
  uselistorder i32* %ecx.325.reg2mem, { 1, 0, 2 }
  uselistorder i32* %.pre-phi.reg2mem, { 0, 2, 1, 3 }
  uselistorder i32* %.pre-phi56.in.in.reg2mem, { 0, 2, 1, 3 }
  uselistorder i32* %esp.1.reg2mem, { 0, 2, 1, 3 }
  uselistorder i32* %esi.2.reg2mem, { 0, 2, 1, 3 }
  uselistorder i32* %edi.2.reg2mem, { 0, 2, 1, 3 }
  uselistorder i32* %edi.319.reg2mem, { 1, 0, 2 }
  uselistorder i32* %esi.318.reg2mem, { 1, 0, 2 }
  uselistorder i32* %esp.217.reg2mem, { 1, 0, 2 }
  uselistorder i32* %ecx.516.reg2mem, { 1, 0, 2 }
  uselistorder i32* %ecx.6.reg2mem, { 0, 3, 1, 2, 4, 5, 6 }
  uselistorder i32* %esp.4.reg2mem, { 0, 3, 1, 2, 4, 5, 6 }
  uselistorder i32* %ecx.7.reg2mem, { 0, 3, 2, 1 }
  uselistorder i32* %esp.5.reg2mem, { 0, 3, 2, 1 }
  uselistorder i32* %2, { 1, 0 }
  uselistorder i32 ()* @"?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z", { 1, 0 }
  uselistorder label %dec_label_pc_401c7c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_401c3e, { 2, 0, 1, 3, 4, 5 }
  uselistorder label %dec_label_pc_401c09, { 1, 0 }
  uselistorder label %dec_label_pc_401be7, { 1, 0, 2 }
  uselistorder label %dec_label_pc_401bb4, { 1, 0 }
  uselistorder label %dec_label_pc_401b95, { 1, 0 }
}

define i32 @function_401ce0() local_unnamed_addr {
dec_label_pc_401ce0:
  %0 = alloca i32
  %eax.0.reg2mem = alloca i32, !insn.addr !579
  %1 = load i32, i32* %0
  %stack_var_-16 = alloca i32, align 4
  %2 = call i32 @__readfsdword(i32 0), !insn.addr !580
  store i32 %2, i32* %stack_var_-16, align 4, !insn.addr !581
  %3 = ptrtoint i32* %stack_var_-16 to i32, !insn.addr !582
  call void @__writefsdword(i32 0, i32 %3), !insn.addr !583
  %4 = call i32 @"?uncaught_exception@std@@YA_NXZ"(), !insn.addr !584
  %5 = trunc i32 %4 to i8, !insn.addr !585
  %6 = icmp eq i8 %5, 0, !insn.addr !585
  %7 = icmp eq i1 %6, false, !insn.addr !586
  br i1 %7, label %dec_label_pc_401d17, label %dec_label_pc_401d0f, !insn.addr !586

dec_label_pc_401d0f:                              ; preds = %dec_label_pc_401ce0
  %8 = call i32 @"?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ"(), !insn.addr !587
  br label %dec_label_pc_401d17, !insn.addr !587

dec_label_pc_401d17:                              ; preds = %dec_label_pc_401d0f, %dec_label_pc_401ce0
  %9 = add i32 %1, 4, !insn.addr !588
  %10 = inttoptr i32 %9 to i32*, !insn.addr !588
  %11 = load i32, i32* %10, align 4, !insn.addr !588
  %12 = add i32 %1, 56, !insn.addr !589
  %13 = add i32 %12, %11, !insn.addr !589
  %14 = inttoptr i32 %13 to i32*, !insn.addr !589
  %15 = load i32, i32* %14, align 4, !insn.addr !589
  %16 = icmp eq i32 %15, 0, !insn.addr !590
  store i32 %11, i32* %eax.0.reg2mem, !insn.addr !591
  br i1 %16, label %dec_label_pc_401d32, label %dec_label_pc_401d2d, !insn.addr !591

dec_label_pc_401d2d:                              ; preds = %dec_label_pc_401d17
  %17 = inttoptr i32 %15 to i32*, !insn.addr !592
  %18 = load i32, i32* %17, align 4, !insn.addr !592
  store i32 %18, i32* %eax.0.reg2mem, !insn.addr !593
  br label %dec_label_pc_401d32, !insn.addr !593

dec_label_pc_401d32:                              ; preds = %dec_label_pc_401d2d, %dec_label_pc_401d17
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %19 = load i32, i32* %stack_var_-16, align 4, !insn.addr !594
  call void @__writefsdword(i32 0, i32 %19), !insn.addr !595
  ret i32 %eax.0.reload, !insn.addr !596

; uselistorder directives
  uselistorder i32 %1, { 1, 0 }
  uselistorder i32 ()* @"?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ", { 1, 0 }
  uselistorder i32 ()* @"?uncaught_exception@std@@YA_NXZ", { 1, 0 }
}

define i32 @function_401d50() local_unnamed_addr {
dec_label_pc_401d50:
  %0 = alloca i32
  %eax.0.reg2mem = alloca i32, !insn.addr !597
  %1 = load i32, i32* %0
  %stack_var_-16 = alloca i32, align 4
  %2 = call i32 @__readfsdword(i32 0), !insn.addr !598
  store i32 %2, i32* %stack_var_-16, align 4, !insn.addr !599
  %3 = ptrtoint i32* %stack_var_-16 to i32, !insn.addr !600
  call void @__writefsdword(i32 0, i32 %3), !insn.addr !601
  %4 = add i32 %1, 4, !insn.addr !602
  %5 = inttoptr i32 %4 to i32*, !insn.addr !602
  %6 = load i32, i32* %5, align 4, !insn.addr !602
  %7 = add i32 %1, 56, !insn.addr !603
  %8 = add i32 %7, %6, !insn.addr !603
  %9 = inttoptr i32 %8 to i32*, !insn.addr !603
  %10 = load i32, i32* %9, align 4, !insn.addr !603
  %11 = icmp eq i32 %10, 0, !insn.addr !604
  store i32 %6, i32* %eax.0.reg2mem, !insn.addr !605
  br i1 %11, label %dec_label_pc_401d86, label %dec_label_pc_401d81, !insn.addr !605

dec_label_pc_401d81:                              ; preds = %dec_label_pc_401d50
  %12 = inttoptr i32 %10 to i32*, !insn.addr !606
  %13 = load i32, i32* %12, align 4, !insn.addr !606
  store i32 %13, i32* %eax.0.reg2mem, !insn.addr !607
  br label %dec_label_pc_401d86, !insn.addr !607

dec_label_pc_401d86:                              ; preds = %dec_label_pc_401d81, %dec_label_pc_401d50
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %14 = load i32, i32* %stack_var_-16, align 4, !insn.addr !608
  call void @__writefsdword(i32 0, i32 %14), !insn.addr !609
  ret i32 %eax.0.reload, !insn.addr !610

; uselistorder directives
  uselistorder i32 %1, { 1, 0 }
}

define i32 @function_401da0() local_unnamed_addr {
dec_label_pc_401da0:
  %0 = alloca i128
  %1 = alloca i32
  %2 = load i32, i32* %1
  %3 = load i128, i128* %0
  %4 = call i128 @__asm_xorps(i128 %3, i128 %3), !insn.addr !611
  %5 = add i32 %2, 4, !insn.addr !612
  %6 = inttoptr i32 %5 to i64*, !insn.addr !612
  %7 = load i64, i64* %6, align 4, !insn.addr !612
  call void @__asm_movq(i64 %7, i128 %4), !insn.addr !612
  %8 = inttoptr i32 %5 to i32*, !insn.addr !613
  store i32 ptrtoint ([9 x i8]* @global_var_4042a0 to i32), i32* %8, align 4, !insn.addr !613
  %9 = inttoptr i32 %2 to i32*, !insn.addr !614
  store i32 ptrtoint (i32* @global_var_404304 to i32), i32* %9, align 4, !insn.addr !614
  ret i32 %2, !insn.addr !615

; uselistorder directives
  uselistorder i128 %3, { 1, 0 }
  uselistorder i32 %2, { 0, 2, 1 }
}

define i32 @function_401dc0() local_unnamed_addr {
dec_label_pc_401dc0:
  %stack_var_-16 = alloca i32, align 4
  %0 = call i32 @function_401da0(), !insn.addr !616
  call void @_CxxThrowException(i32* nonnull %stack_var_-16, i32* nonnull @global_var_404c74), !insn.addr !617
  unreachable, !insn.addr !617
}

define i32 @function_401de0(i32 %arg1) local_unnamed_addr {
dec_label_pc_401de0:
  %0 = alloca i128
  %1 = alloca i32
  %2 = load i32, i32* %1
  %3 = load i128, i128* %0
  %4 = call i128 @__asm_xorps(i128 %3, i128 %3), !insn.addr !618
  %5 = add i32 %2, 4, !insn.addr !619
  %6 = inttoptr i32 %2 to i32*, !insn.addr !620
  store i32 ptrtoint (i32* @global_var_404194 to i32), i32* %6, align 4, !insn.addr !620
  %7 = inttoptr i32 %5 to i64*, !insn.addr !621
  %8 = load i64, i64* %7, align 4, !insn.addr !621
  call void @__asm_movq(i64 %8, i128 %4), !insn.addr !621
  %9 = add i32 %arg1, 4, !insn.addr !622
  %10 = call i32 @__std_exception_copy(i32 %9), !insn.addr !623
  store i32 ptrtoint (i32* @global_var_404304 to i32), i32* %6, align 4, !insn.addr !624
  ret i32 %2, !insn.addr !625

; uselistorder directives
  uselistorder i32 %2, { 0, 2, 1 }
  uselistorder i32 (i32)* @__std_exception_copy, { 1, 3, 0, 2 }
  uselistorder void (i64, i128)* @__asm_movq, { 3, 2, 0, 5, 4, 1 }
  uselistorder i128 (i128, i128)* @__asm_xorps, { 3, 2, 4, 0, 6, 5, 1 }
}

define i32 @function_401e20() local_unnamed_addr {
dec_label_pc_401e20:
  %0 = alloca i32
  %eax.0.reg2mem = alloca i32, !insn.addr !626
  %1 = load i32, i32* %0
  %2 = add i32 %1, 4, !insn.addr !626
  %3 = inttoptr i32 %2 to i32*, !insn.addr !626
  %4 = load i32, i32* %3, align 4, !insn.addr !626
  %5 = icmp eq i32 %4, 0, !insn.addr !627
  br i1 %5, label %dec_label_pc_401e38, label %dec_label_pc_401e27, !insn.addr !628

dec_label_pc_401e27:                              ; preds = %dec_label_pc_401e20
  %6 = inttoptr i32 %4 to i32*, !insn.addr !629
  %7 = load i32, i32* %6, align 4, !insn.addr !629
  store i32 %7, i32* %eax.0.reg2mem
  br label %dec_label_pc_401e38

dec_label_pc_401e38:                              ; preds = %dec_label_pc_401e27, %dec_label_pc_401e20
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  ret i32 %eax.0.reload, !insn.addr !630
}

define i32 @function_401e40() local_unnamed_addr {
dec_label_pc_401e40:
  %0 = alloca i32
  %esi.9.in.reg2mem = alloca i32, !insn.addr !631
  %edx.7.reg2mem = alloca i32, !insn.addr !631
  %ecx.6.reg2mem = alloca i32, !insn.addr !631
  %ecx.5.reg2mem = alloca i32, !insn.addr !631
  %ecx.3.reg2mem = alloca i32, !insn.addr !631
  %edx.5.reg2mem = alloca i32, !insn.addr !631
  %ecx.2.reg2mem = alloca i32, !insn.addr !631
  %edx.4.reg2mem = alloca i32, !insn.addr !631
  %storemerge4.reg2mem = alloca i32, !insn.addr !631
  %esi.7.reg2mem = alloca i32, !insn.addr !631
  %edx.3.reg2mem = alloca i32, !insn.addr !631
  %esi.6.reg2mem = alloca i32, !insn.addr !631
  %.pre-phi30.reg2mem = alloca i32, !insn.addr !631
  %edi.0.reg2mem = alloca i32, !insn.addr !631
  %esi.5.reg2mem = alloca i32, !insn.addr !631
  %ebx.0.reg2mem = alloca i32, !insn.addr !631
  %edx.2.reg2mem = alloca i32, !insn.addr !631
  %.pre-phi16.reg2mem = alloca i32*, !insn.addr !631
  %esi.4.reg2mem = alloca i32, !insn.addr !631
  %edx.1.reg2mem = alloca i32, !insn.addr !631
  %esp.1.reg2mem = alloca i32, !insn.addr !631
  %esp.0.reg2mem = alloca i32, !insn.addr !631
  %edx.0.reg2mem = alloca i32, !insn.addr !631
  %ecx.1.reg2mem = alloca i32, !insn.addr !631
  %.reg2mem = alloca i32, !insn.addr !631
  %ecx.0.reg2mem = alloca i32, !insn.addr !631
  %1 = load i32, i32* %0
  %2 = load i32, i32* %0
  %stack_var_-168 = alloca i32, align 4
  %stack_var_-119 = alloca i32, align 4
  %3 = load i32, i32* %0
  %4 = load i32, i32* %0
  %5 = load i32, i32* %0
  %6 = load i32, i32* %0
  %stack_var_-192 = alloca i32, align 4
  %7 = load i32, i32* %0
  %stack_var_-118 = alloca i32, align 4
  %stack_var_-120 = alloca i32*, align 4
  %stack_var_-236 = alloca i32, align 4
  %stack_var_-144 = alloca i8, align 1
  %stack_var_-216 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %8 = call i32 @__readfsdword(i32 0), !insn.addr !632
  store i32 %8, i32* %stack_var_-16, align 4, !insn.addr !633
  %9 = ptrtoint i32* %stack_var_-16 to i32, !insn.addr !634
  call void @__writefsdword(i32 0, i32 %9), !insn.addr !635
  store i8 0, i8* %stack_var_-144, align 1, !insn.addr !636
  %10 = call i32 @function_402530(i8 0), !insn.addr !637
  store i32* inttoptr (i16 32 to i32*), i32** %stack_var_-120, align 4, !insn.addr !638
  %11 = call i32* @memset(i32* nonnull %stack_var_-118, i32 0, i32 98), !insn.addr !639
  %12 = ptrtoint i8* %stack_var_-144 to i32, !insn.addr !640
  store i32 %12, i32* %stack_var_-236, align 4, !insn.addr !640
  %13 = ptrtoint i32* %stack_var_-236 to i32, !insn.addr !640
  %14 = call i32 @function_401750(i32 %12), !insn.addr !641
  %15 = icmp slt i32 %6, 1
  br i1 %15, label %dec_label_pc_401f1e, label %dec_label_pc_401ef0.preheader, !insn.addr !642

dec_label_pc_401ef0.preheader:                    ; preds = %dec_label_pc_401e40
  %16 = icmp sgt i32 %6, 99, !insn.addr !643
  %17 = icmp ult i32 %5, 16
  %18 = ptrtoint i32* %stack_var_-192 to i32
  %19 = icmp eq i1 %17, false
  %20 = select i1 %19, i32 %7, i32 %18
  store i32 0, i32* %ecx.0.reg2mem
  br label %dec_label_pc_401ef0

dec_label_pc_401ef0:                              ; preds = %dec_label_pc_401ef0.preheader, %dec_label_pc_401f19
  br i1 %16, label %dec_label_pc_401f54, label %dec_label_pc_401ef5, !insn.addr !643

dec_label_pc_401ef5:                              ; preds = %dec_label_pc_401ef0
  %ecx.0.reload = load i32, i32* %ecx.0.reg2mem
  %21 = add i32 %ecx.0.reload, %20, !insn.addr !644
  %22 = inttoptr i32 %21 to i8*, !insn.addr !644
  %23 = load i8, i8* %22, align 1, !insn.addr !644
  %.off = add i8 %23, -48
  %24 = icmp ult i8 %.off, 10
  br i1 %24, label %dec_label_pc_401f54, label %dec_label_pc_401f19, !insn.addr !645

dec_label_pc_401f19:                              ; preds = %dec_label_pc_401ef5
  %25 = add nuw nsw i32 %ecx.0.reload, 1, !insn.addr !646
  %26 = icmp slt i32 %25, %6, !insn.addr !647
  store i32 %25, i32* %ecx.0.reg2mem, !insn.addr !647
  br i1 %26, label %dec_label_pc_401ef0, label %dec_label_pc_401f1e, !insn.addr !647

dec_label_pc_401f1e:                              ; preds = %dec_label_pc_401f19, %dec_label_pc_401e40
  %27 = icmp ult i32 %5, 16, !insn.addr !648
  br i1 %27, label %dec_label_pc_401f1e.dec_label_pc_401fed_crit_edge, label %dec_label_pc_401f2b, !insn.addr !649

dec_label_pc_401f1e.dec_label_pc_401fed_crit_edge: ; preds = %dec_label_pc_401f1e
  %.pre = add i32 %13, -4, !insn.addr !650
  %.pre15 = inttoptr i32 %.pre to i32*, !insn.addr !650
  store i32* %.pre15, i32** %.pre-phi16.reg2mem
  br label %dec_label_pc_401fed

dec_label_pc_401f2b:                              ; preds = %dec_label_pc_401f1e
  %28 = add i32 %5, 1, !insn.addr !651
  %29 = icmp ult i32 %28, 4096, !insn.addr !652
  store i32 %28, i32* %esi.4.reg2mem, !insn.addr !653
  br i1 %29, label %dec_label_pc_401fe3, label %dec_label_pc_401f3a, !insn.addr !653

dec_label_pc_401f3a:                              ; preds = %dec_label_pc_401f2b
  %30 = add i32 %7, -4
  %31 = inttoptr i32 %30 to i32*, !insn.addr !654
  %32 = load i32, i32* %31, align 4, !insn.addr !654
  %33 = add i32 %5, 36, !insn.addr !655
  %34 = sub i32 %30, %32, !insn.addr !656
  %35 = icmp ult i32 %34, 32
  store i32 %32, i32* %edx.1.reg2mem, !insn.addr !657
  store i32 %33, i32* %esi.4.reg2mem, !insn.addr !657
  br i1 %35, label %dec_label_pc_401fe3, label %dec_label_pc_401f6f.thread, !insn.addr !657

dec_label_pc_401f6f.thread:                       ; preds = %dec_label_pc_401f80, %dec_label_pc_401f3a
  call void @_invalid_parameter_noinfo_noreturn(), !insn.addr !658
  %36 = call i32 @function_401aa0(), !insn.addr !659
  %37 = load i32, i32* %stack_var_-192, align 4, !insn.addr !660
  store i32 %37, i32* %.reg2mem
  br label %dec_label_pc_401f80

dec_label_pc_401f54:                              ; preds = %dec_label_pc_401ef5, %dec_label_pc_401ef0
  %38 = call i32 @function_401aa0(), !insn.addr !659
  store i32 %13, i32* %esp.1.reg2mem, !insn.addr !661
  br i1 %17, label %dec_label_pc_401f9a, label %dec_label_pc_401f6f, !insn.addr !661

dec_label_pc_401f6f:                              ; preds = %dec_label_pc_401f54
  %39 = load i32, i32* %stack_var_-192, align 4, !insn.addr !660
  %40 = add i32 %5, 1, !insn.addr !662
  %41 = icmp ult i32 %40, 4096, !insn.addr !663
  store i32 %39, i32* %.reg2mem, !insn.addr !664
  store i32 %39, i32* %ecx.1.reg2mem, !insn.addr !664
  store i32 %40, i32* %edx.0.reg2mem, !insn.addr !664
  store i32 %13, i32* %esp.0.reg2mem, !insn.addr !664
  br i1 %41, label %dec_label_pc_401f90, label %dec_label_pc_401f80, !insn.addr !664

dec_label_pc_401f80:                              ; preds = %dec_label_pc_401f6f.thread, %dec_label_pc_401f6f
  %.reload = load i32, i32* %.reg2mem
  %42 = add i32 %.reload, -4
  %43 = inttoptr i32 %42 to i32*, !insn.addr !665
  %44 = load i32, i32* %43, align 4, !insn.addr !665
  %45 = add i32 %5, 36, !insn.addr !666
  %46 = sub i32 %42, %44, !insn.addr !667
  %47 = icmp ult i32 %46, 32
  store i32 %44, i32* %ecx.1.reg2mem, !insn.addr !668
  store i32 %45, i32* %edx.0.reg2mem, !insn.addr !668
  store i32 %13, i32* %esp.0.reg2mem, !insn.addr !668
  br i1 %47, label %dec_label_pc_401f90, label %dec_label_pc_401f6f.thread, !insn.addr !668

dec_label_pc_401f90:                              ; preds = %dec_label_pc_401f80, %dec_label_pc_4023a2, %dec_label_pc_40238d, %dec_label_pc_401f6f
  %esp.0.reload = load i32, i32* %esp.0.reg2mem
  %edx.0.reload = load i32, i32* %edx.0.reg2mem
  %ecx.1.reload = load i32, i32* %ecx.1.reg2mem
  %48 = add i32 %esp.0.reload, -4, !insn.addr !669
  %49 = inttoptr i32 %48 to i32*, !insn.addr !669
  store i32 %edx.0.reload, i32* %49, align 4, !insn.addr !669
  %50 = add i32 %esp.0.reload, -8, !insn.addr !670
  %51 = inttoptr i32 %50 to i32*, !insn.addr !670
  store i32 %ecx.1.reload, i32* %51, align 4, !insn.addr !670
  %52 = call i32 @function_402843(i32 ptrtoint (i32* @0 to i32)), !insn.addr !671
  store i32 %esp.0.reload, i32* %esp.1.reg2mem, !insn.addr !672
  br label %dec_label_pc_401f9a, !insn.addr !672

dec_label_pc_401f9a:                              ; preds = %dec_label_pc_402358, %dec_label_pc_401f90, %dec_label_pc_401f54
  %esp.1.reload = load i32, i32* %esp.1.reg2mem
  %53 = add i32 %esp.1.reload, -4, !insn.addr !673
  %54 = inttoptr i32 %53 to i32*, !insn.addr !673
  store i32 ptrtoint ([6 x i8]* @global_var_4042f8 to i32), i32* %54, align 4, !insn.addr !673
  %55 = call i32 @system(i8* bitcast (i32* @0 to i8*)), !insn.addr !674
  br label %dec_label_pc_4023c6

dec_label_pc_401fe3:                              ; preds = %dec_label_pc_401f3a, %dec_label_pc_401f2b
  %esi.4.reload = load i32, i32* %esi.4.reg2mem
  %edx.1.reload = load i32, i32* %edx.1.reg2mem
  %56 = add i32 %13, -4
  %57 = inttoptr i32 %56 to i32*
  store i32 %esi.4.reload, i32* %57, align 4, !insn.addr !675
  %58 = add i32 %13, -8, !insn.addr !676
  %59 = inttoptr i32 %58 to i32*, !insn.addr !676
  store i32 %edx.1.reload, i32* %59, align 4, !insn.addr !676
  %60 = call i32 @function_402843(i32 ptrtoint (i32* @0 to i32)), !insn.addr !677
  store i32* %57, i32** %.pre-phi16.reg2mem, !insn.addr !678
  br label %dec_label_pc_401fed, !insn.addr !678

dec_label_pc_401fed:                              ; preds = %dec_label_pc_401f1e.dec_label_pc_401fed_crit_edge, %dec_label_pc_401fe3
  %.pre-phi16.reload = load i32*, i32** %.pre-phi16.reg2mem
  store i32 %12, i32* %.pre-phi16.reload, align 4, !insn.addr !650
  %61 = call i32 @function_401750(i32 ptrtoint (i32* @0 to i32)), !insn.addr !679
  %62 = load i32, i32* %stack_var_-216, align 4, !insn.addr !680
  %63 = icmp slt i32 %4, 1, !insn.addr !681
  store i32 %62, i32* %edx.4.reg2mem, !insn.addr !681
  br i1 %63, label %dec_label_pc_4020bf, label %dec_label_pc_402020.preheader, !insn.addr !681

dec_label_pc_402020.preheader:                    ; preds = %dec_label_pc_401fed
  %64 = ptrtoint i32* %stack_var_-4 to i32, !insn.addr !682
  %65 = icmp ult i32 %3, 16, !insn.addr !683
  %66 = ptrtoint i32* %stack_var_-216 to i32, !insn.addr !684
  %67 = icmp eq i1 %65, false, !insn.addr !685
  %68 = add i32 %64, -116
  %69 = add i32 %64, -115
  store i32 %62, i32* %edx.2.reg2mem
  store i32 1, i32* %ebx.0.reg2mem
  store i32 0, i32* %esi.5.reg2mem
  store i32 0, i32* %edi.0.reg2mem
  br label %dec_label_pc_402020

dec_label_pc_402020:                              ; preds = %dec_label_pc_4020b2, %dec_label_pc_402020.preheader
  %edi.0.reload = load i32, i32* %edi.0.reg2mem
  %esi.5.reload = load i32, i32* %esi.5.reg2mem
  %ebx.0.reload = load i32, i32* %ebx.0.reg2mem
  %edx.2.reload = load i32, i32* %edx.2.reg2mem
  %70 = select i1 %67, i32 %edx.2.reload, i32 %66, !insn.addr !685
  %71 = add i32 %edi.0.reload, %70
  %72 = inttoptr i32 %71 to i8*, !insn.addr !686
  %73 = load i8, i8* %72, align 1, !insn.addr !686
  %74 = add i32 %71, 1, !insn.addr !687
  %75 = inttoptr i32 %74 to i8*, !insn.addr !687
  %76 = load i8, i8* %75, align 1, !insn.addr !687
  %77 = icmp eq i8 %73, %76, !insn.addr !687
  %78 = icmp eq i1 %77, false, !insn.addr !688
  br i1 %78, label %dec_label_pc_402045, label %dec_label_pc_402042, !insn.addr !688

dec_label_pc_402042:                              ; preds = %dec_label_pc_402020
  %79 = add i32 %ebx.0.reload, 1, !insn.addr !689
  store i32 %edx.2.reload, i32* %edx.3.reg2mem, !insn.addr !690
  store i32 %esi.5.reload, i32* %esi.7.reg2mem, !insn.addr !690
  store i32 %79, i32* %storemerge4.reg2mem, !insn.addr !690
  br label %dec_label_pc_4020b2, !insn.addr !690

dec_label_pc_402045:                              ; preds = %dec_label_pc_402020
  %80 = add i32 %esi.5.reload, %68, !insn.addr !691
  %81 = inttoptr i32 %80 to i8*, !insn.addr !691
  store i8 %73, i8* %81, align 1, !insn.addr !691
  %82 = icmp slt i32 %ebx.0.reload, 10, !insn.addr !692
  br i1 %82, label %dec_label_pc_40207d, label %dec_label_pc_402061, !insn.addr !692

dec_label_pc_402061:                              ; preds = %dec_label_pc_402045
  %83 = sext i32 %ebx.0.reload to i64
  %84 = mul nsw i64 %83, 1717986919
  %85 = udiv i64 %84, 4294967296
  %86 = trunc i64 %85 to i32
  %87 = ashr i32 %86, 2
  %88 = icmp slt i32 %86, 0
  %89 = zext i1 %88 to i32
  %90 = add nsw i32 %87, %89
  %91 = trunc i32 %90 to i8
  %92 = add i8 %91, 48, !insn.addr !693
  %93 = add i32 %69, %esi.5.reload, !insn.addr !693
  %94 = inttoptr i32 %93 to i8*, !insn.addr !693
  store i8 %92, i8* %94, align 1, !insn.addr !693
  %95 = add i32 %esi.5.reload, 2, !insn.addr !694
  store i32 %90, i32* %.pre-phi30.reg2mem, !insn.addr !695
  store i32 %95, i32* %esi.6.reg2mem, !insn.addr !695
  br label %dec_label_pc_402083, !insn.addr !695

dec_label_pc_40207d:                              ; preds = %dec_label_pc_402045
  %96 = add i32 %esi.5.reload, 1, !insn.addr !696
  %97 = icmp eq i32 %ebx.0.reload, 1, !insn.addr !697
  store i32 %edx.2.reload, i32* %edx.3.reg2mem, !insn.addr !698
  store i32 %96, i32* %esi.7.reg2mem, !insn.addr !698
  store i32 1, i32* %storemerge4.reg2mem, !insn.addr !698
  br i1 %97, label %dec_label_pc_4020b2, label %dec_label_pc_40207d.dec_label_pc_402083_crit_edge, !insn.addr !698

dec_label_pc_40207d.dec_label_pc_402083_crit_edge: ; preds = %dec_label_pc_40207d
  %.pre17 = sext i32 %ebx.0.reload to i64, !insn.addr !699
  %.pre19 = mul nsw i64 %.pre17, 1717986919, !insn.addr !699
  %.pre21 = udiv i64 %.pre19, 4294967296, !insn.addr !699
  %.pre23 = trunc i64 %.pre21 to i32, !insn.addr !699
  %.pre25 = ashr i32 %.pre23, 2, !insn.addr !700
  %98 = icmp slt i32 %.pre23, 0
  %.pre27 = zext i1 %98 to i32, !insn.addr !701
  %.pre29 = add nsw i32 %.pre25, %.pre27, !insn.addr !702
  store i32 %.pre29, i32* %.pre-phi30.reg2mem
  store i32 %96, i32* %esi.6.reg2mem
  br label %dec_label_pc_402083

dec_label_pc_402083:                              ; preds = %dec_label_pc_40207d.dec_label_pc_402083_crit_edge, %dec_label_pc_402061
  %esi.6.reload = load i32, i32* %esi.6.reg2mem
  %.pre-phi30.reload = load i32, i32* %.pre-phi30.reg2mem
  %99 = load i32, i32* %stack_var_-216, align 4, !insn.addr !703
  %100 = mul i32 %.pre-phi30.reload, -10
  %101 = add i32 %100, %ebx.0.reload, !insn.addr !704
  %102 = trunc i32 %101 to i8
  %103 = add i8 %102, 48, !insn.addr !705
  %104 = add i32 %esi.6.reload, %68, !insn.addr !705
  %105 = inttoptr i32 %104 to i8*, !insn.addr !705
  store i8 %103, i8* %105, align 1, !insn.addr !705
  %106 = add i32 %esi.6.reload, 1, !insn.addr !706
  store i32 %99, i32* %edx.3.reg2mem, !insn.addr !706
  store i32 %106, i32* %esi.7.reg2mem, !insn.addr !706
  store i32 1, i32* %storemerge4.reg2mem, !insn.addr !706
  br label %dec_label_pc_4020b2, !insn.addr !706

dec_label_pc_4020b2:                              ; preds = %dec_label_pc_40207d, %dec_label_pc_402083, %dec_label_pc_402042
  %storemerge4.reload = load i32, i32* %storemerge4.reg2mem
  %esi.7.reload = load i32, i32* %esi.7.reg2mem
  %edx.3.reload = load i32, i32* %edx.3.reg2mem
  %107 = add nuw nsw i32 %edi.0.reload, 1, !insn.addr !707
  %exitcond = icmp eq i32 %107, %4
  store i32 %edx.3.reload, i32* %edx.2.reg2mem, !insn.addr !708
  store i32 %storemerge4.reload, i32* %ebx.0.reg2mem, !insn.addr !708
  store i32 %esi.7.reload, i32* %esi.5.reg2mem, !insn.addr !708
  store i32 %107, i32* %edi.0.reg2mem, !insn.addr !708
  store i32 %edx.3.reload, i32* %edx.4.reg2mem, !insn.addr !708
  br i1 %exitcond, label %dec_label_pc_4020bf, label %dec_label_pc_402020, !insn.addr !708

dec_label_pc_4020bf:                              ; preds = %dec_label_pc_4020b2, %dec_label_pc_401fed
  %108 = icmp ult i32 %3, 16, !insn.addr !709
  br i1 %108, label %dec_label_pc_4020f7, label %dec_label_pc_4020ca, !insn.addr !710

dec_label_pc_4020ca:                              ; preds = %dec_label_pc_4020bf
  %edx.4.reload = load i32, i32* %edx.4.reg2mem
  %109 = add i32 %3, 1, !insn.addr !711
  %110 = icmp ult i32 %109, 4096, !insn.addr !712
  store i32 %109, i32* %ecx.2.reg2mem, !insn.addr !713
  store i32 %edx.4.reload, i32* %edx.5.reg2mem, !insn.addr !713
  br i1 %110, label %dec_label_pc_4020ed, label %dec_label_pc_4020d7, !insn.addr !713

dec_label_pc_4020d7:                              ; preds = %dec_label_pc_4020ca
  %111 = add i32 %edx.4.reload, -4
  %112 = inttoptr i32 %111 to i32*, !insn.addr !714
  %113 = load i32, i32* %112, align 4, !insn.addr !714
  %114 = add i32 %3, 36, !insn.addr !715
  %115 = sub i32 %111, %113, !insn.addr !716
  %116 = icmp ult i32 %115, 32
  store i32 %114, i32* %ecx.2.reg2mem, !insn.addr !717
  store i32 %113, i32* %edx.5.reg2mem, !insn.addr !717
  br i1 %116, label %dec_label_pc_4020ed, label %dec_label_pc_4020e7, !insn.addr !717

dec_label_pc_4020e7:                              ; preds = %dec_label_pc_4020d7
  call void @_invalid_parameter_noinfo_noreturn(), !insn.addr !718
  store i32 %114, i32* %ecx.2.reg2mem, !insn.addr !718
  store i32 %113, i32* %edx.5.reg2mem, !insn.addr !718
  br label %dec_label_pc_4020ed, !insn.addr !718

dec_label_pc_4020ed:                              ; preds = %dec_label_pc_4020e7, %dec_label_pc_4020d7, %dec_label_pc_4020ca
  %edx.5.reload = load i32, i32* %edx.5.reg2mem
  %ecx.2.reload = load i32, i32* %ecx.2.reg2mem
  %117 = add i32 %13, -8, !insn.addr !719
  %118 = inttoptr i32 %117 to i32*, !insn.addr !719
  store i32 %ecx.2.reload, i32* %118, align 4, !insn.addr !719
  %119 = add i32 %13, -12, !insn.addr !720
  %120 = inttoptr i32 %119 to i32*, !insn.addr !720
  store i32 %edx.5.reload, i32* %120, align 4, !insn.addr !720
  %121 = call i32 @function_402843(i32 ptrtoint (i32* @0 to i32)), !insn.addr !721
  br label %dec_label_pc_4020f7, !insn.addr !722

dec_label_pc_4020f7:                              ; preds = %dec_label_pc_4020ed, %dec_label_pc_4020bf
  %122 = ptrtoint i32** %stack_var_-120 to i32, !insn.addr !723
  store i32 0, i32* %stack_var_-192, align 4, !insn.addr !724
  store i32 %122, i32* %ecx.3.reg2mem, !insn.addr !724
  br label %dec_label_pc_402122, !insn.addr !724

dec_label_pc_402122:                              ; preds = %dec_label_pc_402122, %dec_label_pc_4020f7
  %ecx.3.reload = load i32, i32* %ecx.3.reg2mem
  %123 = inttoptr i32 %ecx.3.reload to i8*, !insn.addr !725
  %124 = load i8, i8* %123, align 1, !insn.addr !725
  %125 = add i32 %ecx.3.reload, 1, !insn.addr !726
  %126 = icmp eq i8 %124, 0, !insn.addr !727
  %127 = icmp eq i1 %126, false, !insn.addr !728
  store i32 %125, i32* %ecx.3.reg2mem, !insn.addr !728
  br i1 %127, label %dec_label_pc_402122, label %dec_label_pc_402129, !insn.addr !728

dec_label_pc_402129:                              ; preds = %dec_label_pc_402122
  %128 = ptrtoint i32* %stack_var_-119 to i32, !insn.addr !729
  %129 = sub i32 %125, %128, !insn.addr !730
  %130 = add i32 %13, -8, !insn.addr !731
  %131 = inttoptr i32 %130 to i32*, !insn.addr !731
  store i32 %129, i32* %131, align 4, !insn.addr !731
  %132 = add i32 %13, -12, !insn.addr !732
  %133 = inttoptr i32 %132 to i32*, !insn.addr !732
  store i32 %122, i32* %133, align 4, !insn.addr !732
  %134 = call i32 @function_401820(i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32)), !insn.addr !733
  %135 = add i32 %13, -16, !insn.addr !734
  %136 = inttoptr i32 %135 to i32*, !insn.addr !734
  %137 = ptrtoint i32* %stack_var_-192 to i32, !insn.addr !734
  store i32 %137, i32* %136, align 4, !insn.addr !734
  %138 = call i32 @function_4014c0(), !insn.addr !735
  store i32 28, i32* %136, align 4, !insn.addr !736
  %139 = add i32 %13, -20, !insn.addr !737
  %140 = inttoptr i32 %139 to i32*, !insn.addr !737
  store i32 ptrtoint ([29 x i8]* @global_var_4042ac to i32), i32* %140, align 4, !insn.addr !737
  store i32 0, i32* %stack_var_-216, align 4, !insn.addr !738
  %141 = call i32 @function_401820(i32 0, i32 ptrtoint (i32* @0 to i32)), !insn.addr !739
  %142 = add i32 %13, -24, !insn.addr !740
  %143 = inttoptr i32 %142 to i32*, !insn.addr !740
  store i32 98, i32* %143, align 4, !insn.addr !740
  store i32* inttoptr (i16 32 to i32*), i32** %stack_var_-120, align 4, !insn.addr !741
  %144 = add i32 %13, -28, !insn.addr !742
  %145 = inttoptr i32 %144 to i32*, !insn.addr !742
  store i32 0, i32* %145, align 4, !insn.addr !742
  %146 = add i32 %13, -32, !insn.addr !743
  %147 = inttoptr i32 %146 to i32*, !insn.addr !743
  %148 = ptrtoint i32* %stack_var_-118 to i32, !insn.addr !743
  store i32 %148, i32* %147, align 4, !insn.addr !743
  %149 = load i32*, i32** %stack_var_-120, align 4, !insn.addr !744
  %150 = call i32* @memset(i32* %149, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32)), !insn.addr !744
  store i32 0, i32* %stack_var_-192, align 4, !insn.addr !745
  store i32 %122, i32* %ecx.5.reg2mem, !insn.addr !746
  br label %dec_label_pc_402241, !insn.addr !746

dec_label_pc_402241:                              ; preds = %dec_label_pc_402241, %dec_label_pc_402129
  %ecx.5.reload = load i32, i32* %ecx.5.reg2mem
  %151 = inttoptr i32 %ecx.5.reload to i8*, !insn.addr !747
  %152 = load i8, i8* %151, align 1, !insn.addr !747
  %153 = add i32 %ecx.5.reload, 1, !insn.addr !748
  %154 = icmp eq i8 %152, 0, !insn.addr !749
  %155 = icmp eq i1 %154, false, !insn.addr !750
  store i32 %153, i32* %ecx.5.reg2mem, !insn.addr !750
  br i1 %155, label %dec_label_pc_402241, label %dec_label_pc_402248, !insn.addr !750

dec_label_pc_402248:                              ; preds = %dec_label_pc_402241
  %156 = sub i32 %153, %128, !insn.addr !751
  store i32 %156, i32* %143, align 4, !insn.addr !752
  store i32 %122, i32* %145, align 4, !insn.addr !753
  %157 = call i32 @function_401820(i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32)), !insn.addr !754
  %158 = icmp ult i32 %1, 16, !insn.addr !755
  %159 = icmp eq i32 %2, 0, !insn.addr !756
  %160 = icmp eq i1 %159, false, !insn.addr !757
  %161 = icmp ult i32 %2, 4, !insn.addr !758
  %or.cond = or i1 %161, %160
  br i1 %or.cond, label %dec_label_pc_402358, label %dec_label_pc_4022d0.preheader, !insn.addr !757

dec_label_pc_4022d0.preheader:                    ; preds = %dec_label_pc_402248
  %162 = icmp eq i1 %158, false, !insn.addr !759
  %163 = load i32, i32* %stack_var_-168, align 4, !insn.addr !759
  %164 = ptrtoint i32* %stack_var_-168 to i32, !insn.addr !760
  %165 = select i1 %162, i32 %163, i32 %164, !insn.addr !759
  store i32 %137, i32* %ecx.6.reg2mem
  store i32 %165, i32* %edx.7.reg2mem
  br label %dec_label_pc_4022d0

dec_label_pc_4022d0:                              ; preds = %dec_label_pc_4022d0.preheader, %dec_label_pc_4022d6
  %edx.7.reload = load i32, i32* %edx.7.reg2mem
  %ecx.6.reload = load i32, i32* %ecx.6.reg2mem
  %166 = inttoptr i32 %edx.7.reload to i32*, !insn.addr !761
  %167 = load i32, i32* %166, align 4, !insn.addr !761
  %168 = inttoptr i32 %ecx.6.reload to i32*, !insn.addr !762
  %169 = load i32, i32* %168, align 4, !insn.addr !762
  %170 = icmp eq i32 %167, %169, !insn.addr !762
  %171 = icmp eq i1 %170, false, !insn.addr !763
  br i1 %171, label %dec_label_pc_402358, label %dec_label_pc_4022d6, !insn.addr !763

dec_label_pc_4022d6:                              ; preds = %dec_label_pc_4022d0
  %esi.9.in.reload = load i32, i32* %esi.9.in.reg2mem
  %esi.9 = add i32 %esi.9.in.reload, -4
  %172 = add i32 %edx.7.reload, 4, !insn.addr !764
  %173 = add i32 %ecx.6.reload, 4, !insn.addr !765
  %174 = icmp ult i32 %esi.9, 4, !insn.addr !766
  %175 = icmp eq i1 %174, false, !insn.addr !767
  store i32 %173, i32* %ecx.6.reg2mem, !insn.addr !767
  store i32 %172, i32* %edx.7.reg2mem, !insn.addr !767
  store i32 %esi.9, i32* %esi.9.in.reg2mem, !insn.addr !767
  br i1 %175, label %dec_label_pc_4022d0, label %dec_label_pc_402358, !insn.addr !767

dec_label_pc_402358:                              ; preds = %dec_label_pc_4022d6, %dec_label_pc_4022d0, %dec_label_pc_402248
  store i32 4203760, i32* %147, align 4, !insn.addr !768
  %176 = call i32 @function_401aa0(), !insn.addr !769
  %177 = call i32 @"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z"(), !insn.addr !770
  store i32 %146, i32* %esp.1.reg2mem, !insn.addr !771
  br i1 %158, label %dec_label_pc_401f9a, label %dec_label_pc_40238d, !insn.addr !771

dec_label_pc_40238d:                              ; preds = %dec_label_pc_402358
  %178 = load i32, i32* %stack_var_-168, align 4, !insn.addr !772
  %179 = add i32 %1, 1, !insn.addr !773
  %180 = icmp ult i32 %179, 4096, !insn.addr !774
  store i32 %178, i32* %ecx.1.reg2mem, !insn.addr !775
  store i32 %179, i32* %edx.0.reg2mem, !insn.addr !775
  store i32 %146, i32* %esp.0.reg2mem, !insn.addr !775
  br i1 %180, label %dec_label_pc_401f90, label %dec_label_pc_4023a2, !insn.addr !775

dec_label_pc_4023a2:                              ; preds = %dec_label_pc_40238d
  %181 = add i32 %178, -4
  %182 = inttoptr i32 %181 to i32*, !insn.addr !776
  %183 = load i32, i32* %182, align 4, !insn.addr !776
  %184 = add i32 %1, 36, !insn.addr !777
  %185 = sub i32 %181, %183, !insn.addr !778
  %186 = icmp ult i32 %185, 32
  store i32 %183, i32* %ecx.1.reg2mem, !insn.addr !779
  store i32 %184, i32* %edx.0.reg2mem, !insn.addr !779
  store i32 %146, i32* %esp.0.reg2mem, !insn.addr !779
  br i1 %186, label %dec_label_pc_401f90, label %dec_label_pc_4023b6, !insn.addr !779

dec_label_pc_4023b6:                              ; preds = %dec_label_pc_4023a2
  call void @_invalid_parameter_noinfo_noreturn(), !insn.addr !780
  %187 = add i32 %13, -36, !insn.addr !781
  %188 = inttoptr i32 %187 to i32*, !insn.addr !781
  store i32 %184, i32* %188, align 4, !insn.addr !781
  %189 = add i32 %13, -40, !insn.addr !782
  %190 = inttoptr i32 %189 to i32*, !insn.addr !782
  store i32 %183, i32* %190, align 4, !insn.addr !782
  %191 = call i32 @function_402843(i32 ptrtoint (i32* @0 to i32)), !insn.addr !783
  br label %dec_label_pc_4023c6, !insn.addr !784

dec_label_pc_4023c6:                              ; preds = %dec_label_pc_401f9a, %dec_label_pc_4023b6
  %192 = load i32, i32* %stack_var_-16, align 4, !insn.addr !785
  call void @__writefsdword(i32 0, i32 %192), !insn.addr !786
  %193 = call i32 @function_402805(), !insn.addr !787
  ret i32 %193, !insn.addr !788

; uselistorder directives
  uselistorder i32 %184, { 1, 0 }
  uselistorder i32 %183, { 2, 0, 1 }
  uselistorder i32 %178, { 1, 0 }
  uselistorder i32 %ecx.6.reload, { 1, 0 }
  uselistorder i32 %edx.7.reload, { 1, 0 }
  uselistorder i32 %153, { 1, 0 }
  uselistorder i32 %ecx.5.reload, { 1, 0 }
  uselistorder i32 %146, { 1, 2, 0, 3 }
  uselistorder i32 %125, { 1, 0 }
  uselistorder i32 %ecx.3.reload, { 1, 0 }
  uselistorder i32 %122, { 2, 0, 3, 1 }
  uselistorder i32 %edx.4.reload, { 1, 0 }
  uselistorder i32 %96, { 1, 0 }
  uselistorder i32 %edx.2.reload, { 1, 0, 2 }
  uselistorder i32 %ebx.0.reload, { 5, 4, 2, 0, 1, 3 }
  uselistorder i32 %esi.5.reload, { 1, 3, 2, 4, 0 }
  uselistorder i32 %62, { 1, 0 }
  uselistorder i32 %13, { 4, 5, 14, 13, 12, 11, 10, 9, 8, 7, 6, 15, 16, 1, 2, 0, 3 }
  uselistorder i8* %stack_var_-144, { 1, 0 }
  uselistorder i32** %stack_var_-120, { 3, 2, 1, 0 }
  uselistorder i32* %stack_var_-118, { 1, 0 }
  uselistorder i32 %7, { 1, 0 }
  uselistorder i32* %stack_var_-192, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32 %6, { 2, 1, 0 }
  uselistorder i32 %5, { 5, 2, 4, 0, 1, 3 }
  uselistorder i32 %4, { 1, 0 }
  uselistorder i32 %3, { 0, 3, 2, 1 }
  uselistorder i32* %stack_var_-168, { 0, 2, 1 }
  uselistorder i32 %2, { 1, 0 }
  uselistorder i32 %1, { 2, 1, 0 }
  uselistorder i32* %ecx.0.reg2mem, { 2, 0, 1 }
  uselistorder i32* %ecx.1.reg2mem, { 3, 4, 0, 1, 2 }
  uselistorder i32* %edx.0.reg2mem, { 3, 4, 0, 1, 2 }
  uselistorder i32* %esp.0.reg2mem, { 3, 4, 0, 1, 2 }
  uselistorder i32* %esp.1.reg2mem, { 3, 0, 2, 1 }
  uselistorder i32* %edx.2.reg2mem, { 2, 0, 1 }
  uselistorder i32* %ebx.0.reg2mem, { 2, 0, 1 }
  uselistorder i32* %esi.5.reg2mem, { 2, 0, 1 }
  uselistorder i32* %edi.0.reg2mem, { 2, 0, 1 }
  uselistorder i32* %.pre-phi30.reg2mem, { 0, 2, 1 }
  uselistorder i32* %esi.6.reg2mem, { 0, 2, 1 }
  uselistorder i32* %edx.3.reg2mem, { 0, 2, 3, 1 }
  uselistorder i32* %esi.7.reg2mem, { 0, 2, 3, 1 }
  uselistorder i32* %storemerge4.reg2mem, { 0, 2, 3, 1 }
  uselistorder i32* %ecx.3.reg2mem, { 1, 0, 2 }
  uselistorder i32* %ecx.5.reg2mem, { 1, 0, 2 }
  uselistorder i32* %ecx.6.reg2mem, { 2, 0, 1 }
  uselistorder i32* %edx.7.reg2mem, { 2, 0, 1 }
  uselistorder i32* %esi.9.in.reg2mem, { 1, 0 }
  uselistorder i32* %0, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32)* @function_401820, { 2, 1, 0 }
  uselistorder i64 4294967296, { 1, 2, 0 }
  uselistorder i32 ()* @function_401aa0, { 2, 1, 0 }
  uselistorder void ()* @_invalid_parameter_noinfo_noreturn, { 2, 1, 0, 8, 7, 6, 5, 4, 3 }
  uselistorder i32 4096, { 10, 11, 12, 13, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }
  uselistorder i32 (i32)* @function_401750, { 1, 0, 2 }
  uselistorder i32 98, { 1, 0 }
  uselistorder label %dec_label_pc_4023c6, { 1, 0 }
  uselistorder label %dec_label_pc_4022d0, { 1, 0 }
  uselistorder label %dec_label_pc_4020b2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_401fed, { 1, 0 }
  uselistorder label %dec_label_pc_401f90, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_401f80, { 1, 0 }
  uselistorder label %dec_label_pc_401ef0, { 1, 0 }
}

define i32 @function_4023f0(i32 %arg1) local_unnamed_addr {
dec_label_pc_4023f0:
  %esi.1.reg2mem = alloca i32, !insn.addr !789
  %esi.0.reg2mem = alloca i32, !insn.addr !789
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %0 = call i32 @__readfsdword(i32 0), !insn.addr !790
  store i32 %0, i32* %stack_var_-16, align 4, !insn.addr !791
  %1 = ptrtoint i32* %stack_var_-16 to i32, !insn.addr !792
  call void @__writefsdword(i32 0, i32 %1), !insn.addr !793
  %2 = call i32 @"??0_Lockit@std@@QAE@H@Z"(i32 0), !insn.addr !794
  %3 = load i32, i32* @global_var_406424, align 4, !insn.addr !795
  store i32 %3, i32* %stack_var_-32, align 4, !insn.addr !796
  %4 = call i32 @"??Bid@locale@std@@QAEIXZ"(i32 %3), !insn.addr !797
  %5 = add i32 %arg1, 4, !insn.addr !798
  %6 = inttoptr i32 %5 to i32*, !insn.addr !798
  %7 = load i32, i32* %6, align 4, !insn.addr !798
  %8 = add i32 %7, 12, !insn.addr !799
  %9 = inttoptr i32 %8 to i32*, !insn.addr !799
  %10 = load i32, i32* %9, align 4, !insn.addr !799
  %11 = icmp ult i32 %4, %10, !insn.addr !799
  %12 = icmp eq i1 %11, false, !insn.addr !800
  store i32 0, i32* %esi.0.reg2mem, !insn.addr !800
  br i1 %12, label %dec_label_pc_40245c, label %dec_label_pc_40244e, !insn.addr !800

dec_label_pc_40244e:                              ; preds = %dec_label_pc_4023f0
  %13 = add i32 %7, 8, !insn.addr !801
  %14 = inttoptr i32 %13 to i32*, !insn.addr !801
  %15 = load i32, i32* %14, align 4, !insn.addr !801
  %16 = mul i32 %4, 4, !insn.addr !802
  %17 = add i32 %15, %16, !insn.addr !802
  %18 = inttoptr i32 %17 to i32*, !insn.addr !802
  %19 = load i32, i32* %18, align 4, !insn.addr !802
  %20 = icmp eq i32 %19, 0, !insn.addr !803
  %21 = icmp eq i1 %20, false, !insn.addr !804
  store i32 %19, i32* %esi.0.reg2mem, !insn.addr !804
  br i1 %21, label %dec_label_pc_4024b4, label %dec_label_pc_40245c, !insn.addr !804

dec_label_pc_40245c:                              ; preds = %dec_label_pc_4023f0, %dec_label_pc_40244e
  %esi.0.reload = load i32, i32* %esi.0.reg2mem
  %22 = add i32 %7, 20, !insn.addr !805
  %23 = inttoptr i32 %22 to i8*, !insn.addr !805
  %24 = load i8, i8* %23, align 1, !insn.addr !805
  %25 = icmp eq i8 %24, 0, !insn.addr !805
  store i32 %esi.0.reload, i32* %esi.1.reg2mem, !insn.addr !806
  br i1 %25, label %dec_label_pc_402473, label %dec_label_pc_402462, !insn.addr !806

dec_label_pc_402462:                              ; preds = %dec_label_pc_40245c
  %26 = call i32 @"?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ"(), !insn.addr !807
  %27 = add i32 %26, 12, !insn.addr !808
  %28 = inttoptr i32 %27 to i32*, !insn.addr !808
  %29 = load i32, i32* %28, align 4, !insn.addr !808
  %30 = icmp ult i32 %4, %29, !insn.addr !808
  %31 = icmp eq i1 %30, false, !insn.addr !809
  br i1 %31, label %dec_label_pc_402477, label %dec_label_pc_40246d, !insn.addr !809

dec_label_pc_40246d:                              ; preds = %dec_label_pc_402462
  %32 = add i32 %26, 8, !insn.addr !810
  %33 = inttoptr i32 %32 to i32*, !insn.addr !810
  %34 = load i32, i32* %33, align 4, !insn.addr !810
  %35 = mul i32 %4, 4, !insn.addr !811
  %36 = add i32 %34, %35, !insn.addr !811
  %37 = inttoptr i32 %36 to i32*, !insn.addr !811
  %38 = load i32, i32* %37, align 4, !insn.addr !811
  store i32 %38, i32* %esi.1.reg2mem, !insn.addr !811
  br label %dec_label_pc_402473, !insn.addr !811

dec_label_pc_402473:                              ; preds = %dec_label_pc_40246d, %dec_label_pc_40245c
  %esi.1.reload = load i32, i32* %esi.1.reg2mem
  %39 = icmp eq i32 %esi.1.reload, 0, !insn.addr !812
  %40 = icmp eq i1 %39, false, !insn.addr !813
  br i1 %40, label %dec_label_pc_4024b4, label %dec_label_pc_402477, !insn.addr !813

dec_label_pc_402477:                              ; preds = %dec_label_pc_402473, %dec_label_pc_402462
  %41 = load i32, i32* %stack_var_-32, align 4, !insn.addr !814
  %42 = icmp eq i32 %41, 0, !insn.addr !815
  %43 = icmp eq i1 %42, false, !insn.addr !816
  br i1 %43, label %dec_label_pc_4024b4, label %dec_label_pc_40247e, !insn.addr !816

dec_label_pc_40247e:                              ; preds = %dec_label_pc_402477
  %44 = call i32 @"?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z"(i32* nonnull %stack_var_-32, i32 %arg1), !insn.addr !817
  %45 = icmp eq i32 %44, -1, !insn.addr !818
  br i1 %45, label %dec_label_pc_4024db, label %dec_label_pc_402491, !insn.addr !819

dec_label_pc_402491:                              ; preds = %dec_label_pc_40247e
  %46 = load i32, i32* %stack_var_-32, align 4, !insn.addr !820
  %47 = call i32 @function_4027d9(i32 %46), !insn.addr !821
  %48 = load i32, i32* %stack_var_-32, align 4, !insn.addr !822
  store i32 %48, i32* @global_var_406424, align 4, !insn.addr !823
  br label %dec_label_pc_4024b4, !insn.addr !823

dec_label_pc_4024b4:                              ; preds = %dec_label_pc_402491, %dec_label_pc_402477, %dec_label_pc_402473, %dec_label_pc_40244e
  %49 = call i32 @"??1_Lockit@std@@QAE@XZ"(), !insn.addr !824
  %50 = load i32, i32* %stack_var_-16, align 4, !insn.addr !825
  call void @__writefsdword(i32 0, i32 %50), !insn.addr !826
  %51 = call i32 @function_402805(), !insn.addr !827
  ret i32 %51, !insn.addr !828

dec_label_pc_4024db:                              ; preds = %dec_label_pc_40247e
  %52 = call i32 @function_401dc0(), !insn.addr !829
  unreachable, !insn.addr !829

; uselistorder directives
  uselistorder i32 %4, { 0, 2, 1, 3 }
  uselistorder i32* %stack_var_-32, { 1, 2, 0, 3, 4 }
  uselistorder i32* %esi.0.reg2mem, { 0, 2, 1 }
  uselistorder label %dec_label_pc_40245c, { 1, 0 }
}

define i32 @function_4024f0(i32 %arg1) local_unnamed_addr {
dec_label_pc_4024f0:
  %0 = alloca i32
  %1 = load i32, i32* %0
  %2 = load i32, i32* %0
  %3 = call i32 @"?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z"(i32 10, i32 %1, i32 %2), !insn.addr !830
  %4 = and i32 %3, 255, !insn.addr !831
  %5 = call i32 @"?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z"(i32 %4), !insn.addr !832
  %6 = call i32 @"?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ"(), !insn.addr !833
  ret i32 %arg1, !insn.addr !834

; uselistorder directives
  uselistorder i32* %0, { 1, 0 }
  uselistorder i32 ()* @"?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ", { 1, 0 }
}

define i32 @function_402520() local_unnamed_addr {
dec_label_pc_402520:
  %0 = alloca i32
  %1 = load i32, i32* %0
  %2 = load i32, i32* %0
  %3 = icmp eq i32 %1, 0, !insn.addr !835
  %spec.select = select i1 %3, i32 %2, i32 %1
  ret i32 %spec.select, !insn.addr !836

; uselistorder directives
  uselistorder i32 %1, { 1, 0 }
  uselistorder i32* %0, { 1, 0 }
}

define i32 @function_402530(i8 %arg1) local_unnamed_addr {
dec_label_pc_402530:
  %0 = alloca i32
  %esp.3.reg2mem = alloca i32, !insn.addr !837
  %ebx.3.reg2mem = alloca i32, !insn.addr !837
  %ecx.5.reg2mem = alloca i32, !insn.addr !837
  %stack_var_-25.1.reg2mem = alloca i8, !insn.addr !837
  %esp.2.reg2mem = alloca i32, !insn.addr !837
  %ecx.2.reg2mem = alloca i32, !insn.addr !837
  %storemerge1434.reg2mem = alloca i32, !insn.addr !837
  %esp.11335.reg2mem = alloca i32, !insn.addr !837
  %stack_var_-32.11136.reg2mem = alloca i32, !insn.addr !837
  %stack_var_-25.01037.reg2mem = alloca i8, !insn.addr !837
  %stack_var_-25.010.lcssa.reg2mem = alloca i8, !insn.addr !837
  %ecx.112.lcssa.reg2mem = alloca i32, !insn.addr !837
  %esp.113.lcssa.reg2mem = alloca i32, !insn.addr !837
  %storemerge14.lcssa.reg2mem = alloca i32, !insn.addr !837
  %stack_var_-32.0.reg2mem = alloca i32, !insn.addr !837
  %esp.0.reg2mem = alloca i32, !insn.addr !837
  %ecx.0.reg2mem = alloca i32*, !insn.addr !837
  %1 = load i32, i32* %0
  %2 = load i32, i32* %0
  %3 = load i32, i32* %0
  %stack_var_-92 = alloca i32, align 4
  %stack_var_-88 = alloca i32, align 4
  %stack_var_-84 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %4 = call i32 @__readfsdword(i32 0), !insn.addr !838
  store i32 %4, i32* %stack_var_-16, align 4, !insn.addr !839
  %5 = ptrtoint i32* %stack_var_-16 to i32, !insn.addr !840
  call void @__writefsdword(i32 0, i32 %5), !insn.addr !841
  store i32 0, i32* %stack_var_-84, align 4, !insn.addr !842
  %6 = ptrtoint i32* %stack_var_-84 to i32, !insn.addr !842
  %7 = call i32 @"?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z"(i32 0), !insn.addr !843
  %8 = trunc i32 %7 to i8, !insn.addr !844
  %9 = icmp eq i8 %8, 0, !insn.addr !844
  store i8 0, i8* %stack_var_-25.1.reg2mem, !insn.addr !845
  store i32 0, i32* %ebx.3.reg2mem, !insn.addr !845
  store i32 %6, i32* %esp.3.reg2mem, !insn.addr !845
  br i1 %9, label %dec_label_pc_4026c7, label %dec_label_pc_4025a2, !insn.addr !845

dec_label_pc_4025a2:                              ; preds = %dec_label_pc_402530
  %10 = ptrtoint i32* %stack_var_-64 to i32, !insn.addr !846
  store i32 %10, i32* %stack_var_-88, align 4, !insn.addr !846
  %11 = call i32 @"?getloc@ios_base@std@@QBE?AVlocale@2@XZ"(i32* nonnull %stack_var_-64), !insn.addr !847
  store i32 %11, i32* %stack_var_-92, align 4, !insn.addr !848
  %12 = call i32 @function_4023f0(i32 %11), !insn.addr !849
  %13 = ptrtoint i32* %stack_var_-88 to i32, !insn.addr !850
  %14 = icmp eq i32 %3, 0, !insn.addr !851
  store i32* inttoptr (i32 4 to i32*), i32** %ecx.0.reg2mem, !insn.addr !852
  store i32 %13, i32* %esp.0.reg2mem, !insn.addr !852
  br i1 %14, label %dec_label_pc_4025db, label %dec_label_pc_4025ca, !insn.addr !852

dec_label_pc_4025ca:                              ; preds = %dec_label_pc_4025a2
  %15 = inttoptr i32 %3 to i32*, !insn.addr !853
  %16 = load i32, i32* %15, align 4, !insn.addr !853
  %17 = icmp eq i32 %16, 0, !insn.addr !854
  store i32* inttoptr (i32 4 to i32*), i32** %ecx.0.reg2mem, !insn.addr !855
  store i32 %13, i32* %esp.0.reg2mem, !insn.addr !855
  br i1 %17, label %dec_label_pc_4025db, label %dec_label_pc_4025d5, !insn.addr !855

dec_label_pc_4025d5:                              ; preds = %dec_label_pc_4025ca
  store i32 1, i32* %stack_var_-92, align 4, !insn.addr !856
  %18 = ptrtoint i32* %stack_var_-92 to i32, !insn.addr !856
  %phitmp = add i32 %16, 4
  %phitmp5 = inttoptr i32 %phitmp to i32*
  store i32* %phitmp5, i32** %ecx.0.reg2mem, !insn.addr !857
  store i32 %18, i32* %esp.0.reg2mem, !insn.addr !857
  br label %dec_label_pc_4025db, !insn.addr !857

dec_label_pc_4025db:                              ; preds = %dec_label_pc_4025d5, %dec_label_pc_4025ca, %dec_label_pc_4025a2
  %esp.0.reload = load i32, i32* %esp.0.reg2mem
  %ecx.0.reload = load i32*, i32** %ecx.0.reg2mem
  %19 = add i32 %1, 16, !insn.addr !858
  %20 = inttoptr i32 %19 to i32*, !insn.addr !858
  store i32 0, i32* %20, align 4, !insn.addr !858
  %21 = inttoptr i32 %1 to i8*, !insn.addr !859
  store i8 0, i8* %21, align 1, !insn.addr !859
  %22 = load i32, i32* %ecx.0.reload, align 4, !insn.addr !860
  %23 = add i32 %22, %2
  %24 = add i32 %23, 36, !insn.addr !861
  %25 = inttoptr i32 %24 to i32*, !insn.addr !861
  %26 = load i32, i32* %25, align 4, !insn.addr !861
  %27 = icmp slt i32 %26, 0, !insn.addr !861
  br i1 %27, label %dec_label_pc_402614, label %dec_label_pc_402606, !insn.addr !862

dec_label_pc_402606:                              ; preds = %dec_label_pc_4025db
  %28 = add i32 %23, 32, !insn.addr !863
  %29 = inttoptr i32 %28 to i32*, !insn.addr !863
  %30 = load i32, i32* %29, align 4, !insn.addr !863
  %31 = icmp eq i32 %26, 0, !insn.addr !861
  %32 = icmp eq i1 %31, false, !insn.addr !864
  %33 = icmp ne i32 %30, 0, !insn.addr !865
  %or.cond.not = or i1 %33, %32
  %34 = icmp ult i32 %30, 2147483647, !insn.addr !866
  %or.cond3 = icmp eq i1 %34, %or.cond.not
  store i32 %30, i32* %stack_var_-32.0.reg2mem, !insn.addr !864
  br i1 %or.cond3, label %dec_label_pc_40261c, label %dec_label_pc_402614, !insn.addr !864

dec_label_pc_402614:                              ; preds = %dec_label_pc_402606, %dec_label_pc_4025db
  store i32 2147483647, i32* %stack_var_-32.0.reg2mem, !insn.addr !867
  br label %dec_label_pc_40261c, !insn.addr !867

dec_label_pc_40261c:                              ; preds = %dec_label_pc_402606, %dec_label_pc_402614
  %stack_var_-32.0.reload = load i32, i32* %stack_var_-32.0.reg2mem
  %35 = add i32 %23, 56, !insn.addr !868
  %36 = inttoptr i32 %35 to i32*, !insn.addr !868
  %37 = load i32, i32* %36, align 4, !insn.addr !868
  %38 = call i32 @"?sgetc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ"(i32 %12, i32 %stack_var_-32.0.reload), !insn.addr !869
  %39 = icmp eq i32 %stack_var_-32.0.reload, 0, !insn.addr !870
  store i8 0, i8* %stack_var_-25.1.reg2mem, !insn.addr !871
  store i32 %37, i32* %ecx.5.reg2mem, !insn.addr !871
  store i32 0, i32* %ebx.3.reg2mem, !insn.addr !871
  store i32 %esp.0.reload, i32* %esp.3.reg2mem, !insn.addr !871
  br i1 %39, label %dec_label_pc_4026c7, label %dec_label_pc_40262c.lr.ph, !insn.addr !871

dec_label_pc_40262c.lr.ph:                        ; preds = %dec_label_pc_40261c
  %40 = add i32 %1, 20, !insn.addr !872
  %41 = inttoptr i32 %40 to i32*, !insn.addr !872
  %42 = add i32 %12, 12
  %43 = inttoptr i32 %42 to i32*
  %44 = add i32 %2, 56
  %45 = icmp eq i32 %38, -1, !insn.addr !873
  %46 = icmp eq i1 %45, false, !insn.addr !874
  store i32 %38, i32* %storemerge14.lcssa.reg2mem, !insn.addr !874
  store i32 %esp.0.reload, i32* %esp.113.lcssa.reg2mem, !insn.addr !874
  store i32 %37, i32* %ecx.112.lcssa.reg2mem, !insn.addr !874
  store i8 0, i8* %stack_var_-25.010.lcssa.reg2mem, !insn.addr !874
  store i8 0, i8* %stack_var_-25.01037.reg2mem, !insn.addr !874
  store i32 %stack_var_-32.0.reload, i32* %stack_var_-32.11136.reg2mem, !insn.addr !874
  store i32 %esp.0.reload, i32* %esp.11335.reg2mem, !insn.addr !874
  store i32 %38, i32* %storemerge1434.reg2mem, !insn.addr !874
  br i1 %46, label %dec_label_pc_402639, label %dec_label_pc_402631, !insn.addr !874

dec_label_pc_40262c:                              ; preds = %dec_label_pc_402680
  %47 = icmp eq i32 %85, -1, !insn.addr !873
  %48 = icmp eq i1 %47, false, !insn.addr !874
  store i32 %85, i32* %storemerge14.lcssa.reg2mem, !insn.addr !874
  store i32 %esp.2.reload, i32* %esp.113.lcssa.reg2mem, !insn.addr !874
  store i32 %84, i32* %ecx.112.lcssa.reg2mem, !insn.addr !874
  store i8 1, i8* %stack_var_-25.010.lcssa.reg2mem, !insn.addr !874
  store i8 1, i8* %stack_var_-25.01037.reg2mem, !insn.addr !874
  store i32 %78, i32* %stack_var_-32.11136.reg2mem, !insn.addr !874
  store i32 %esp.2.reload, i32* %esp.11335.reg2mem, !insn.addr !874
  store i32 %85, i32* %storemerge1434.reg2mem, !insn.addr !874
  br i1 %48, label %dec_label_pc_402639, label %dec_label_pc_402631, !insn.addr !874

dec_label_pc_402631:                              ; preds = %dec_label_pc_40262c, %dec_label_pc_40262c.lr.ph
  %stack_var_-25.010.lcssa.reload = load i8, i8* %stack_var_-25.010.lcssa.reg2mem
  %ecx.112.lcssa.reload = load i32, i32* %ecx.112.lcssa.reg2mem
  %esp.113.lcssa.reload = load i32, i32* %esp.113.lcssa.reg2mem
  %storemerge14.lcssa.reload = load i32, i32* %storemerge14.lcssa.reg2mem
  %49 = add i32 %storemerge14.lcssa.reload, 2, !insn.addr !875
  store i8 %stack_var_-25.010.lcssa.reload, i8* %stack_var_-25.1.reg2mem, !insn.addr !876
  store i32 %ecx.112.lcssa.reload, i32* %ecx.5.reg2mem, !insn.addr !876
  store i32 %49, i32* %ebx.3.reg2mem, !insn.addr !876
  store i32 %esp.113.lcssa.reload, i32* %esp.3.reg2mem, !insn.addr !876
  br label %dec_label_pc_4026c7, !insn.addr !876

dec_label_pc_402639:                              ; preds = %dec_label_pc_40262c.lr.ph, %dec_label_pc_40262c
  %storemerge1434.reload = load i32, i32* %storemerge1434.reg2mem
  %esp.11335.reload = load i32, i32* %esp.11335.reg2mem
  %stack_var_-25.01037.reload = load i8, i8* %stack_var_-25.01037.reg2mem
  %50 = and i32 %storemerge1434.reload, 255, !insn.addr !877
  %51 = load i32, i32* %43, align 4, !insn.addr !878
  %52 = mul i32 %50, 2, !insn.addr !879
  %53 = add i32 %51, %52, !insn.addr !879
  %54 = inttoptr i32 %53 to i8*, !insn.addr !879
  %55 = load i8, i8* %54, align 1, !insn.addr !879
  %56 = and i8 %55, 72, !insn.addr !879
  %57 = icmp eq i8 %56, 0, !insn.addr !879
  %58 = icmp eq i1 %57, false, !insn.addr !880
  store i8 %stack_var_-25.01037.reload, i8* %stack_var_-25.1.reg2mem, !insn.addr !880
  store i32 %50, i32* %ecx.5.reg2mem, !insn.addr !880
  store i32 0, i32* %ebx.3.reg2mem, !insn.addr !880
  store i32 %esp.11335.reload, i32* %esp.3.reg2mem, !insn.addr !880
  br i1 %58, label %dec_label_pc_4026c7, label %dec_label_pc_402648, !insn.addr !880

dec_label_pc_402648:                              ; preds = %dec_label_pc_402639
  %stack_var_-32.11136.reload = load i32, i32* %stack_var_-32.11136.reg2mem
  %59 = load i32, i32* %20, align 4, !insn.addr !881
  %60 = load i32, i32* %41, align 4, !insn.addr !882
  %61 = icmp ult i32 %59, %60, !insn.addr !883
  %62 = icmp eq i1 %61, false, !insn.addr !884
  br i1 %62, label %dec_label_pc_40266e, label %dec_label_pc_402655, !insn.addr !884

dec_label_pc_402655:                              ; preds = %dec_label_pc_402648
  %63 = add i32 %59, 1
  store i32 %63, i32* %20, align 4, !insn.addr !885
  %64 = icmp ult i32 %60, 16, !insn.addr !886
  %spec.select = select i1 %64, i32 %1, i32 %storemerge1434.reload
  %65 = trunc i32 %storemerge1434.reload to i8, !insn.addr !887
  %66 = add i32 %spec.select, %59, !insn.addr !887
  %67 = inttoptr i32 %66 to i8*, !insn.addr !887
  store i8 %65, i8* %67, align 1, !insn.addr !887
  %68 = add i32 %spec.select, %63, !insn.addr !888
  %69 = inttoptr i32 %68 to i8*, !insn.addr !888
  store i8 0, i8* %69, align 1, !insn.addr !888
  store i32 %59, i32* %ecx.2.reg2mem, !insn.addr !889
  store i32 %esp.11335.reload, i32* %esp.2.reg2mem, !insn.addr !889
  br label %dec_label_pc_402680, !insn.addr !889

dec_label_pc_40266e:                              ; preds = %dec_label_pc_402648
  %sext = mul i32 %storemerge1434.reload, 16777216
  %70 = ashr exact i32 %sext, 24, !insn.addr !890
  %71 = add i32 %esp.11335.reload, -4, !insn.addr !890
  %72 = inttoptr i32 %71 to i32*, !insn.addr !890
  store i32 %70, i32* %72, align 4, !insn.addr !890
  %73 = add i32 %esp.11335.reload, -8, !insn.addr !891
  %74 = inttoptr i32 %73 to i32*, !insn.addr !891
  store i32 0, i32* %74, align 4, !insn.addr !891
  %75 = add i32 %esp.11335.reload, -12, !insn.addr !892
  %76 = inttoptr i32 %75 to i32*, !insn.addr !892
  store i32 %59, i32* %76, align 4, !insn.addr !892
  %77 = call i32 @function_401960(i8 0), !insn.addr !893
  store i32 %75, i32* %esp.2.reg2mem, !insn.addr !893
  br label %dec_label_pc_402680, !insn.addr !893

dec_label_pc_402680:                              ; preds = %dec_label_pc_40266e, %dec_label_pc_402655
  %esp.2.reload = load i32, i32* %esp.2.reg2mem
  %ecx.2.reload = load i32, i32* %ecx.2.reg2mem
  %78 = add i32 %stack_var_-32.11136.reload, -1, !insn.addr !894
  %79 = add i32 %ecx.2.reload, 4, !insn.addr !895
  %80 = inttoptr i32 %79 to i32*, !insn.addr !895
  %81 = load i32, i32* %80, align 4, !insn.addr !895
  %82 = add i32 %44, %81, !insn.addr !896
  %83 = inttoptr i32 %82 to i32*, !insn.addr !896
  %84 = load i32, i32* %83, align 4, !insn.addr !896
  %85 = call i32 @"?snextc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ"(i32 %78, i8 1), !insn.addr !897
  %86 = icmp eq i32 %78, 0, !insn.addr !870
  store i8 1, i8* %stack_var_-25.1.reg2mem, !insn.addr !871
  store i32 %84, i32* %ecx.5.reg2mem, !insn.addr !871
  store i32 0, i32* %ebx.3.reg2mem, !insn.addr !871
  store i32 %esp.2.reload, i32* %esp.3.reg2mem, !insn.addr !871
  br i1 %86, label %dec_label_pc_4026c7, label %dec_label_pc_40262c, !insn.addr !871

dec_label_pc_4026c7:                              ; preds = %dec_label_pc_402680, %dec_label_pc_402639, %dec_label_pc_40261c, %dec_label_pc_402631, %dec_label_pc_402530
  %esp.3.reload = load i32, i32* %esp.3.reg2mem
  %ebx.3.reload = load i32, i32* %ebx.3.reg2mem
  %ecx.5.reload = load i32, i32* %ecx.5.reg2mem
  %stack_var_-25.1.reload = load i8, i8* %stack_var_-25.1.reg2mem
  %87 = icmp eq i8 %stack_var_-25.1.reload, 0, !insn.addr !898
  %88 = add i32 %ecx.5.reload, 4, !insn.addr !899
  %89 = inttoptr i32 %88 to i32*, !insn.addr !899
  %90 = load i32, i32* %89, align 4, !insn.addr !899
  %91 = add i32 %90, %2
  %92 = add i32 %91, 32, !insn.addr !900
  %93 = inttoptr i32 %92 to i32*, !insn.addr !900
  store i32 0, i32* %93, align 4, !insn.addr !900
  %94 = add i32 %91, 36, !insn.addr !901
  %95 = inttoptr i32 %94 to i32*, !insn.addr !901
  store i32 0, i32* %95, align 4, !insn.addr !901
  %96 = icmp eq i1 %87, false, !insn.addr !902
  %97 = or i32 %ebx.3.reload, 2
  %spec.select4 = select i1 %96, i32 %ebx.3.reload, i32 %97
  %98 = add i32 %esp.3.reload, -4, !insn.addr !903
  %99 = inttoptr i32 %98 to i32*, !insn.addr !903
  store i32 0, i32* %99, align 4, !insn.addr !903
  %100 = add i32 %esp.3.reload, -8, !insn.addr !904
  %101 = inttoptr i32 %100 to i32*, !insn.addr !904
  store i32 %spec.select4, i32* %101, align 4, !insn.addr !904
  %102 = call i32 @"?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z"(i32 1), !insn.addr !905
  %103 = load i32, i32* %stack_var_-16, align 4, !insn.addr !906
  call void @__writefsdword(i32 0, i32 %103), !insn.addr !907
  ret i32 %2, !insn.addr !908

; uselistorder directives
  uselistorder i32 %ebx.3.reload, { 1, 0 }
  uselistorder i32 %85, { 2, 1, 0 }
  uselistorder i32 %78, { 1, 2, 0 }
  uselistorder i32 %59, { 3, 0, 1, 2, 4 }
  uselistorder i32 %esp.11335.reload, { 2, 3, 4, 1, 0 }
  uselistorder i32 %storemerge1434.reload, { 3, 1, 2, 0 }
  uselistorder i32 %37, { 1, 0 }
  uselistorder i32 %stack_var_-32.0.reload, { 0, 2, 1 }
  uselistorder i32 %30, { 0, 2, 1 }
  uselistorder i32 %esp.0.reload, { 1, 2, 0 }
  uselistorder i32 %3, { 1, 0 }
  uselistorder i32 %2, { 0, 3, 1, 2 }
  uselistorder i32 %1, { 3, 1, 2, 0 }
  uselistorder i32* %stack_var_-32.0.reg2mem, { 0, 2, 1 }
  uselistorder i8* %stack_var_-25.01037.reg2mem, { 0, 2, 1 }
  uselistorder i32* %stack_var_-32.11136.reg2mem, { 0, 2, 1 }
  uselistorder i32* %esp.11335.reg2mem, { 0, 2, 1 }
  uselistorder i32* %storemerge1434.reg2mem, { 0, 2, 1 }
  uselistorder i32* %esp.2.reg2mem, { 0, 2, 1 }
  uselistorder i8* %stack_var_-25.1.reg2mem, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32* %ecx.5.reg2mem, { 0, 1, 2, 4, 3 }
  uselistorder i32* %ebx.3.reg2mem, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32* %esp.3.reg2mem, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32* %0, { 2, 1, 0 }
  uselistorder i32 (i32)* @"?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z", { 1, 0 }
  uselistorder i32 (i8)* @function_401960, { 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 2147483647, { 0, 9, 1, 7, 2, 10, 3, 11, 4, 12, 5, 8, 6, 13 }
  uselistorder i32 32, { 0, 1, 3, 4, 5, 6, 2, 13, 7, 8, 9, 10, 11, 12 }
  uselistorder label %dec_label_pc_4026c7, { 0, 1, 3, 2, 4 }
  uselistorder label %dec_label_pc_402639, { 1, 0 }
  uselistorder label %dec_label_pc_40261c, { 1, 0 }
}

define i32 @function_402730() local_unnamed_addr {
dec_label_pc_402730:
  %0 = alloca i32
  %eax.0.reg2mem = alloca i32, !insn.addr !909
  %1 = load i32, i32* %0
  %stack_var_-16 = alloca i32, align 4
  %2 = call i32 @__readfsdword(i32 0), !insn.addr !910
  store i32 %2, i32* %stack_var_-16, align 4, !insn.addr !911
  %3 = ptrtoint i32* %stack_var_-16 to i32, !insn.addr !912
  call void @__writefsdword(i32 0, i32 %3), !insn.addr !913
  %4 = add i32 %1, 4, !insn.addr !914
  %5 = inttoptr i32 %4 to i32*, !insn.addr !914
  %6 = load i32, i32* %5, align 4, !insn.addr !914
  %7 = add i32 %1, 56, !insn.addr !915
  %8 = add i32 %7, %6, !insn.addr !915
  %9 = inttoptr i32 %8 to i32*, !insn.addr !915
  %10 = load i32, i32* %9, align 4, !insn.addr !915
  %11 = icmp eq i32 %10, 0, !insn.addr !916
  store i32 %6, i32* %eax.0.reg2mem, !insn.addr !917
  br i1 %11, label %dec_label_pc_40276d, label %dec_label_pc_402768, !insn.addr !917

dec_label_pc_402768:                              ; preds = %dec_label_pc_402730
  %12 = inttoptr i32 %10 to i32*, !insn.addr !918
  %13 = load i32, i32* %12, align 4, !insn.addr !918
  store i32 %13, i32* %eax.0.reg2mem, !insn.addr !919
  br label %dec_label_pc_40276d, !insn.addr !919

dec_label_pc_40276d:                              ; preds = %dec_label_pc_402768, %dec_label_pc_402730
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %14 = load i32, i32* %stack_var_-16, align 4, !insn.addr !920
  call void @__writefsdword(i32 0, i32 %14), !insn.addr !921
  ret i32 %eax.0.reload, !insn.addr !922

; uselistorder directives
  uselistorder i32 %1, { 1, 0 }
  uselistorder i32 56, { 2, 5, 1, 3, 4, 6, 0, 7 }
}

define i32 @function_402781() local_unnamed_addr {
dec_label_pc_402781:
  %eax.0.reg2mem = alloca i32, !insn.addr !923
  %0 = call i32 @function_402d16(), !insn.addr !924
  %1 = icmp eq i32 %0, 0, !insn.addr !925
  store i32 0, i32* %eax.0.reg2mem, !insn.addr !926
  br i1 %1, label %dec_label_pc_4027af, label %dec_label_pc_40279d, !insn.addr !926

dec_label_pc_40279d:                              ; preds = %dec_label_pc_402781
  %2 = call i32 @function_402d16(), !insn.addr !927
  store i32 %2, i32* %eax.0.reg2mem, !insn.addr !928
  br label %dec_label_pc_4027af, !insn.addr !928

dec_label_pc_4027af:                              ; preds = %dec_label_pc_40279d, %dec_label_pc_402781
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  ret i32 %eax.0.reload, !insn.addr !929
}

define i32 @function_4027b2() local_unnamed_addr {
dec_label_pc_4027b2:
  %eax.0.lcssa.reg2mem = alloca i32, !insn.addr !930
  %.reg2mem = alloca i32, !insn.addr !930
  %stack_var_-4 = alloca i32, align 4
  %0 = load i32, i32* @global_var_4060b0, align 4, !insn.addr !931
  %1 = icmp eq i32 %0, 0, !insn.addr !932
  %2 = icmp eq i1 %1, false, !insn.addr !933
  br i1 %2, label %dec_label_pc_4027b5.lr.ph, label %dec_label_pc_4027d7, !insn.addr !933

dec_label_pc_4027b5.lr.ph:                        ; preds = %dec_label_pc_4027b2
  %3 = ptrtoint i32* %stack_var_-4 to i32, !insn.addr !930
  %4 = add i32 %3, -4
  %5 = inttoptr i32 %4 to i32*
  %6 = add i32 %3, -8
  %7 = inttoptr i32 %6 to i32*
  store i32 %0, i32* %.reg2mem
  br label %dec_label_pc_4027b5

dec_label_pc_4027b5:                              ; preds = %dec_label_pc_4027b5.lr.ph, %dec_label_pc_4027b5
  %.reload = load i32, i32* %.reg2mem
  %8 = inttoptr i32 %.reload to i32*, !insn.addr !934
  %9 = load i32, i32* %8, align 4, !insn.addr !934
  store i32 %9, i32* @global_var_4060b0, align 4, !insn.addr !935
  %10 = call i32 @function_402781(), !insn.addr !936
  store i32 8, i32* %5, align 4, !insn.addr !937
  store i32 %.reload, i32* %7, align 4, !insn.addr !938
  %11 = call i32 @function_402843(i32 ptrtoint (i32* @0 to i32)), !insn.addr !939
  %12 = load i32, i32* @global_var_4060b0, align 4, !insn.addr !931
  %13 = icmp eq i32 %12, 0, !insn.addr !932
  %14 = icmp eq i1 %13, false, !insn.addr !933
  store i32 %12, i32* %.reg2mem, !insn.addr !933
  store i32 %11, i32* %eax.0.lcssa.reg2mem, !insn.addr !933
  br i1 %14, label %dec_label_pc_4027b5, label %dec_label_pc_4027d7, !insn.addr !933

dec_label_pc_4027d7:                              ; preds = %dec_label_pc_4027b5, %dec_label_pc_4027b2
  %eax.0.lcssa.reload = load i32, i32* %eax.0.lcssa.reg2mem
  ret i32 %eax.0.lcssa.reload, !insn.addr !940

; uselistorder directives
  uselistorder i32* %.reg2mem, { 1, 0, 2 }
  uselistorder label %dec_label_pc_4027b5, { 1, 0 }
}

define i32 @function_4027d9(i32 %arg1) local_unnamed_addr {
dec_label_pc_4027d9:
  %0 = call i32 @function_402813(i32 8), !insn.addr !941
  %1 = icmp eq i32 %0, 0, !insn.addr !942
  br i1 %1, label %dec_label_pc_4027fe, label %dec_label_pc_4027ec, !insn.addr !943

dec_label_pc_4027ec:                              ; preds = %dec_label_pc_4027d9
  %2 = load i32, i32* @global_var_4060b0, align 4, !insn.addr !944
  %3 = inttoptr i32 %0 to i32*, !insn.addr !945
  store i32 %2, i32* %3, align 4, !insn.addr !945
  %4 = add i32 %0, 4, !insn.addr !946
  %5 = inttoptr i32 %4 to i32*, !insn.addr !946
  store i32 %arg1, i32* %5, align 4, !insn.addr !946
  br label %dec_label_pc_4027fe, !insn.addr !947

dec_label_pc_4027fe:                              ; preds = %dec_label_pc_4027d9, %dec_label_pc_4027ec
  store i32 %0, i32* @global_var_4060b0, align 4, !insn.addr !948
  ret i32 %0, !insn.addr !949

; uselistorder directives
  uselistorder i32* @global_var_4060b0, { 1, 2, 3, 4, 0 }
  uselistorder i32 (i32)* @function_402813, { 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_4027fe, { 1, 0 }
}

define i32 @function_402805() local_unnamed_addr {
dec_label_pc_402805:
  %0 = alloca i32
  %1 = load i32, i32* %0
  %2 = load i32, i32* %0
  %3 = load i32, i32* @global_var_406008, align 4, !insn.addr !950
  %4 = icmp eq i32 %1, %3, !insn.addr !950
  %5 = icmp eq i1 %4, false, !insn.addr !951
  br i1 %5, label %dec_label_pc_40280e, label %dec_label_pc_40280d, !insn.addr !951

dec_label_pc_40280d:                              ; preds = %dec_label_pc_402805
  ret i32 %2, !insn.addr !952

dec_label_pc_40280e:                              ; preds = %dec_label_pc_402805
  %6 = call i32 @function_402d41(i32 ptrtoint (i32* @0 to i32)), !insn.addr !953
  ret i32 %6, !insn.addr !953

; uselistorder directives
  uselistorder i32* %0, { 1, 0 }
}

define i32 @function_402813(i32 %arg1) local_unnamed_addr {
dec_label_pc_402813:
  %stack_var_-4 = alloca i32, align 4
  %0 = ptrtoint i32* %stack_var_-4 to i32, !insn.addr !954
  %1 = add i32 %0, -4, !insn.addr !955
  %2 = inttoptr i32 %1 to i32*, !insn.addr !955
  br label %dec_label_pc_402825, !insn.addr !956

dec_label_pc_402818:                              ; preds = %dec_label_pc_402825
  store i32 %arg1, i32* %2, align 4, !insn.addr !957
  %3 = call i32 @_callnewh(i32 ptrtoint (i32* @0 to i32)), !insn.addr !958
  %4 = icmp eq i32 %3, 0, !insn.addr !959
  br i1 %4, label %dec_label_pc_402834, label %dec_label_pc_402825, !insn.addr !960

dec_label_pc_402825:                              ; preds = %dec_label_pc_402818, %dec_label_pc_402813
  store i32 %arg1, i32* %2, align 4, !insn.addr !955
  %5 = call i32* @malloc(i32 ptrtoint (i32* @0 to i32)), !insn.addr !961
  %6 = icmp eq i32* %5, null, !insn.addr !962
  br i1 %6, label %dec_label_pc_402818, label %dec_label_pc_402832, !insn.addr !963

dec_label_pc_402832:                              ; preds = %dec_label_pc_402825
  %7 = ptrtoint i32* %5 to i32, !insn.addr !961
  ret i32 %7, !insn.addr !964

dec_label_pc_402834:                              ; preds = %dec_label_pc_402818
  %8 = icmp eq i32 %arg1, -1, !insn.addr !965
  br i1 %8, label %9, label %dec_label_pc_40283e, !insn.addr !966

; <label>:9:                                      ; preds = %dec_label_pc_402834
  %10 = call i32 @function_4010d0(), !insn.addr !966
  unreachable, !insn.addr !966

dec_label_pc_40283e:                              ; preds = %dec_label_pc_402834
  %11 = call i32 @function_402e53(), !insn.addr !967
  ret i32 %11, !insn.addr !967

; uselistorder directives
  uselistorder i32* %2, { 1, 0 }
  uselistorder i32 ()* @function_4010d0, { 3, 2, 1, 0 }
  uselistorder i32 %arg1, { 2, 1, 0 }
}

define i32 @function_402843(i32 %arg1) local_unnamed_addr {
dec_label_pc_402843:
  %0 = alloca i32
  %1 = load i32, i32* %0
  ret i32 %1, !insn.addr !968
}

define i32 @function_402851(i8 %arg1) local_unnamed_addr {
dec_label_pc_402851:
  %0 = alloca i32
  %1 = load i32, i32* %0
  %2 = and i8 %arg1, 1, !insn.addr !969
  %3 = icmp eq i8 %2, 0, !insn.addr !969
  %4 = inttoptr i32 %1 to i32*, !insn.addr !970
  store i32 ptrtoint (i32* @global_var_404184 to i32), i32* %4, align 4, !insn.addr !970
  br i1 %3, label %dec_label_pc_40286d, label %dec_label_pc_402863, !insn.addr !971

dec_label_pc_402863:                              ; preds = %dec_label_pc_402851
  %5 = call i32 @function_402843(i32 %1), !insn.addr !972
  br label %dec_label_pc_40286d, !insn.addr !973

dec_label_pc_40286d:                              ; preds = %dec_label_pc_402863, %dec_label_pc_402851
  ret i32 %1, !insn.addr !974

; uselistorder directives
  uselistorder i32 %1, { 1, 2, 0 }
  uselistorder i32 (i32)* @function_402843, { 12, 11, 3, 2, 1, 0, 9, 8, 7, 6, 5, 4, 10 }
}

define i32 @function_402874() local_unnamed_addr {
dec_label_pc_402874:
  call void @_set_app_type(i32 1), !insn.addr !975
  %0 = call i32 @function_402f14(), !insn.addr !976
  %1 = call i32 @_set_fmode(i32 %0), !insn.addr !977
  %2 = call i32 @function_402f0d(), !insn.addr !978
  %3 = call i32* @__p__commode(), !insn.addr !979
  store i32 %2, i32* %3, align 4, !insn.addr !980
  %4 = call i32 @function_402b74(i32 1), !insn.addr !981
  %5 = trunc i32 %4 to i8, !insn.addr !982
  %6 = icmp eq i8 %5, 0, !insn.addr !982
  br i1 %6, label %dec_label_pc_402917, label %dec_label_pc_4028a4, !insn.addr !983

dec_label_pc_4028a4:                              ; preds = %dec_label_pc_402874
  %7 = call i32 @__asm_fnclex(), !insn.addr !984
  %8 = call i32 @function_403158(), !insn.addr !985
  %9 = call i32 @function_402d01(i32 4206980), !insn.addr !986
  %10 = call i32 @function_402f10(), !insn.addr !987
  %11 = call i32 @_configure_narrow_argv(i32 %10), !insn.addr !988
  %12 = icmp eq i32 %11, 0, !insn.addr !989
  %13 = icmp eq i1 %12, false, !insn.addr !990
  br i1 %13, label %dec_label_pc_402917, label %dec_label_pc_4028c6, !insn.addr !990

dec_label_pc_4028c6:                              ; preds = %dec_label_pc_4028a4
  call void @InitializeSListHead(i32* nonnull @0), !insn.addr !991
  %14 = call i32 @function_402f73(), !insn.addr !992
  %15 = icmp eq i32 %14, 0, !insn.addr !993
  br i1 %15, label %dec_label_pc_4028df, label %dec_label_pc_4028d4, !insn.addr !994

dec_label_pc_4028d4:                              ; preds = %dec_label_pc_4028c6
  call void @__setusermatherr(i32 4206349), !insn.addr !995
  br label %dec_label_pc_4028df, !insn.addr !996

dec_label_pc_4028df:                              ; preds = %dec_label_pc_4028d4, %dec_label_pc_4028c6
  %16 = call i32 @function_402d16(), !insn.addr !997
  %17 = call i32 @function_402d16(), !insn.addr !998
  %18 = call i32 @function_402f29(), !insn.addr !999
  %19 = call i32 @function_402f0d(), !insn.addr !1000
  %20 = call i32 @_configthreadlocale(i32 %19), !insn.addr !1001
  %21 = call i32 @function_402f26(), !insn.addr !1002
  %22 = trunc i32 %21 to i8, !insn.addr !1003
  %23 = icmp eq i8 %22, 0, !insn.addr !1003
  br i1 %23, label %dec_label_pc_402908, label %dec_label_pc_402903, !insn.addr !1004

dec_label_pc_402903:                              ; preds = %dec_label_pc_4028df
  %24 = call i32 @_initialize_narrow_environment(), !insn.addr !1005
  br label %dec_label_pc_402908, !insn.addr !1005

dec_label_pc_402908:                              ; preds = %dec_label_pc_402903, %dec_label_pc_4028df
  %25 = call i32 @function_402f0d(), !insn.addr !1006
  %26 = call i32 @function_402f0d(), !insn.addr !1007
  %27 = icmp eq i32 %26, 0, !insn.addr !1008
  %28 = icmp eq i1 %27, false, !insn.addr !1009
  br i1 %28, label %dec_label_pc_402917, label %dec_label_pc_402916, !insn.addr !1009

dec_label_pc_402916:                              ; preds = %dec_label_pc_402908
  ret i32 %26, !insn.addr !1010

dec_label_pc_402917:                              ; preds = %dec_label_pc_402908, %dec_label_pc_4028a4, %dec_label_pc_402874
  %29 = call i32 @function_402f8b(i32 7, i32 ptrtoint (i32* @0 to i32)), !insn.addr !1011
  %30 = call i32 @__asm_int3(), !insn.addr !1012
  %31 = call i32 @function_402f56(), !insn.addr !1013
  ret i32 0, !insn.addr !1014

; uselistorder directives
  uselistorder i32 (i32)* @function_402d01, { 1, 0 }
}

define i32 @function_402927() local_unnamed_addr {
dec_label_pc_402927:
  %0 = call i32 (%_EXCEPTION_POINTERS*)* @SetUnhandledExceptionFilter(i32 (%_EXCEPTION_POINTERS*)* bitcast (i32* @0 to i32 (%_EXCEPTION_POINTERS*)*)), !insn.addr !1015
  %1 = call i32 @function_402f0d(), !insn.addr !1016
  %2 = call i32 @_set_new_mode(i32 %1), !insn.addr !1017
  ret i32 %2, !insn.addr !1018
}

define i32 @function_402939() local_unnamed_addr {
dec_label_pc_402939:
  %0 = alloca i32
  %esi.0.reg2mem = alloca i32, !insn.addr !1019
  %.pre-phi5.reg2mem = alloca i32*, !insn.addr !1019
  %eax.0.reg2mem = alloca i32, !insn.addr !1019
  %esp.0.reg2mem = alloca i32, !insn.addr !1019
  %ebx.0.reg2mem = alloca i8, !insn.addr !1019
  %1 = load i32, i32* %0
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-12 = alloca i32 ()**, align 4
  %stack_var_-8 = alloca i32, align 4
  store i32 ptrtoint (i32* @global_var_404b80 to i32), i32* %stack_var_-8, align 4, !insn.addr !1020
  %2 = call i32 @function_4031b0(i32* nonnull @global_var_404b80, i32 20, i32 ptrtoint (i32* @0 to i32)), !insn.addr !1021
  store i32 ()** inttoptr (i32 1 to i32 ()**), i32 ()*** %stack_var_-12, align 4, !insn.addr !1022
  %3 = call i32 @function_402b3b(i32 1), !insn.addr !1023
  %4 = trunc i32 %3 to i8, !insn.addr !1024
  %5 = icmp eq i8 %4, 0, !insn.addr !1024
  br i1 %5, label %dec_label_pc_402aa5, label %dec_label_pc_402955, !insn.addr !1025

dec_label_pc_402955:                              ; preds = %dec_label_pc_402939
  %6 = add i32 %1, -25, !insn.addr !1026
  %7 = inttoptr i32 %6 to i8*, !insn.addr !1026
  store i8 0, i8* %7, align 1, !insn.addr !1026
  %8 = add i32 %1, -4, !insn.addr !1027
  %9 = inttoptr i32 %8 to i32*, !insn.addr !1027
  store i32 0, i32* %9, align 4, !insn.addr !1027
  %10 = call i32 @function_402b09(), !insn.addr !1028
  %11 = trunc i32 %10 to i8, !insn.addr !1029
  %12 = add i32 %1, -36, !insn.addr !1029
  %13 = inttoptr i32 %12 to i8*, !insn.addr !1029
  store i8 %11, i8* %13, align 1, !insn.addr !1029
  %14 = load i32, i32* @global_var_4060b8, align 4, !insn.addr !1030
  %15 = icmp eq i32 %14, 1, !insn.addr !1031
  br i1 %15, label %dec_label_pc_402aa5, label %dec_label_pc_402976, !insn.addr !1032

dec_label_pc_402976:                              ; preds = %dec_label_pc_402955
  %16 = icmp eq i32 %14, 0, !insn.addr !1033
  %17 = icmp eq i1 %16, false, !insn.addr !1034
  br i1 %17, label %dec_label_pc_4029c3, label %dec_label_pc_40297a, !insn.addr !1034

dec_label_pc_40297a:                              ; preds = %dec_label_pc_402976
  store i32 1, i32* @global_var_4060b8, align 4, !insn.addr !1035
  store i32 ()** bitcast (i32 ()*** @global_var_404168 to i32 ()**), i32 ()*** %stack_var_-12, align 4, !insn.addr !1036
  %18 = call i32 @_initterm_e(i32 ()** bitcast (i32 ()*** @global_var_40415c to i32 ()**), i32 ()** bitcast (i32 ()*** @global_var_404168 to i32 ()**)), !insn.addr !1037
  %19 = icmp eq i32 %18, 0, !insn.addr !1038
  store i32 255, i32* %eax.0.reg2mem, !insn.addr !1039
  br i1 %19, label %dec_label_pc_4029a6, label %dec_label_pc_402a95, !insn.addr !1039

dec_label_pc_4029a6:                              ; preds = %dec_label_pc_40297a
  store i32 ()** bitcast (i32* @global_var_404158 to i32 ()**), i32 ()*** %stack_var_-12, align 4, !insn.addr !1040
  call void @_initterm(void ()** bitcast (i32* @global_var_40414c to void ()**), void ()** bitcast (i32* @global_var_404158 to void ()**)), !insn.addr !1041
  store i32 2, i32* @global_var_4060b8, align 4, !insn.addr !1042
  store i8 0, i8* %ebx.0.reg2mem, !insn.addr !1043
  br label %dec_label_pc_4029c8, !insn.addr !1043

dec_label_pc_4029c3:                              ; preds = %dec_label_pc_402976
  store i8 1, i8* %7, align 1, !insn.addr !1044
  store i8 1, i8* %ebx.0.reg2mem, !insn.addr !1044
  br label %dec_label_pc_4029c8, !insn.addr !1044

dec_label_pc_4029c8:                              ; preds = %dec_label_pc_4029c3, %dec_label_pc_4029a6
  %ebx.0.reload = load i8, i8* %ebx.0.reg2mem
  %20 = inttoptr i32 %12 to i32*, !insn.addr !1045
  %21 = load i32, i32* %20, align 4, !insn.addr !1045
  %22 = inttoptr i32 %21 to i32 ()**, !insn.addr !1045
  store i32 ()** %22, i32 ()*** %stack_var_-12, align 4, !insn.addr !1045
  %23 = call i32 @function_402c8f(i32 %21), !insn.addr !1046
  %24 = ptrtoint i32* %stack_var_-8 to i32, !insn.addr !1047
  %25 = call i32 @function_402f7f(), !insn.addr !1048
  %26 = inttoptr i32 %25 to i32*, !insn.addr !1049
  %27 = load i32, i32* %26, align 4, !insn.addr !1049
  %28 = icmp eq i32 %27, 0, !insn.addr !1049
  store i32 %24, i32* %esp.0.reg2mem, !insn.addr !1050
  br i1 %28, label %dec_label_pc_4029f9, label %dec_label_pc_4029de, !insn.addr !1050

dec_label_pc_4029de:                              ; preds = %dec_label_pc_4029c8
  %29 = inttoptr i32 %25 to i32 ()**, !insn.addr !1051
  store i32 ()** %29, i32 ()*** %stack_var_-12, align 4, !insn.addr !1051
  %30 = call i32 @function_402bfb(i32 %25, i32 ptrtoint (i32* @0 to i32)), !insn.addr !1052
  %31 = trunc i32 %30 to i8, !insn.addr !1053
  %32 = icmp eq i8 %31, 0, !insn.addr !1053
  store i32 %24, i32* %esp.0.reg2mem, !insn.addr !1054
  br i1 %32, label %dec_label_pc_4029f9, label %dec_label_pc_4029e9, !insn.addr !1054

dec_label_pc_4029e9:                              ; preds = %dec_label_pc_4029de
  store i32 ()** null, i32 ()*** %stack_var_-12, align 4, !insn.addr !1055
  store i32 0, i32* %stack_var_-20, align 4, !insn.addr !1056
  %33 = ptrtoint i32* %stack_var_-20 to i32, !insn.addr !1056
  %34 = call i32 @function_402d16(), !insn.addr !1057
  store i32 %33, i32* %esp.0.reg2mem, !insn.addr !1058
  br label %dec_label_pc_4029f9, !insn.addr !1058

dec_label_pc_4029f9:                              ; preds = %dec_label_pc_4029e9, %dec_label_pc_4029de, %dec_label_pc_4029c8
  %esp.0.reload = load i32, i32* %esp.0.reg2mem
  %35 = call i32 @function_402f85(), !insn.addr !1059
  %36 = inttoptr i32 %35 to i32*, !insn.addr !1060
  %37 = load i32, i32* %36, align 4, !insn.addr !1060
  %38 = icmp eq i32 %37, 0, !insn.addr !1060
  %.pre6 = add i32 %esp.0.reload, -4
  %.pre8 = inttoptr i32 %.pre6 to i32*
  br i1 %38, label %dec_label_pc_402a17, label %dec_label_pc_402a04, !insn.addr !1061

dec_label_pc_402a04:                              ; preds = %dec_label_pc_4029f9
  store i32 %35, i32* %.pre8, align 4, !insn.addr !1062
  %39 = call i32 @function_402bfb(i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32)), !insn.addr !1063
  %40 = trunc i32 %39 to i8, !insn.addr !1064
  %41 = icmp eq i8 %40, 0, !insn.addr !1064
  br i1 %41, label %dec_label_pc_402a17, label %dec_label_pc_402a0f, !insn.addr !1065

dec_label_pc_402a0f:                              ; preds = %dec_label_pc_402a04
  %42 = load i32, i32* %36, align 4, !insn.addr !1066
  store i32 %42, i32* %.pre8, align 4, !insn.addr !1066
  call void @_register_thread_local_exe_atexit_callback(void (i32*, i32, i32*)* bitcast (i32* @0 to void (i32*, i32, i32*)*)), !insn.addr !1067
  br label %dec_label_pc_402a17, !insn.addr !1068

dec_label_pc_402a17:                              ; preds = %dec_label_pc_4029f9, %dec_label_pc_402a0f, %dec_label_pc_402a04
  %43 = call i8** @_get_initial_narrow_environment(), !insn.addr !1069
  %44 = ptrtoint i8** %43 to i32, !insn.addr !1069
  %45 = call i8*** @__p___argv(), !insn.addr !1070
  %46 = load i8**, i8*** %45, align 4, !insn.addr !1071
  %47 = ptrtoint i8** %46 to i32, !insn.addr !1071
  %48 = call i32* @__p___argc(), !insn.addr !1072
  store i32 %44, i32* %.pre8, align 4, !insn.addr !1073
  %49 = add i32 %esp.0.reload, -8, !insn.addr !1074
  %50 = inttoptr i32 %49 to i32*, !insn.addr !1074
  store i32 %47, i32* %50, align 4, !insn.addr !1074
  %51 = load i32, i32* %48, align 4, !insn.addr !1075
  %52 = add i32 %esp.0.reload, -12, !insn.addr !1075
  %53 = inttoptr i32 %52 to i32*, !insn.addr !1075
  store i32 %51, i32* %53, align 4, !insn.addr !1075
  %54 = call i32 @function_401e40(), !insn.addr !1076
  %55 = call i32 @function_4030ab(), !insn.addr !1077
  %56 = trunc i32 %55 to i8, !insn.addr !1078
  %57 = icmp eq i8 %56, 0, !insn.addr !1078
  store i32* %.pre8, i32** %.pre-phi5.reg2mem, !insn.addr !1079
  store i32 %54, i32* %esi.0.reg2mem, !insn.addr !1079
  br i1 %57, label %dec_label_pc_402aac, label %dec_label_pc_402a41, !insn.addr !1079

dec_label_pc_402a41:                              ; preds = %dec_label_pc_402a17
  %58 = icmp eq i8 %ebx.0.reload, 0, !insn.addr !1080
  %59 = icmp eq i1 %58, false, !insn.addr !1081
  br i1 %59, label %dec_label_pc_402a4a, label %dec_label_pc_402a45, !insn.addr !1081

dec_label_pc_402a45:                              ; preds = %dec_label_pc_402a41
  call void @_cexit(), !insn.addr !1082
  br label %dec_label_pc_402a4a, !insn.addr !1082

dec_label_pc_402a4a:                              ; preds = %dec_label_pc_402a45, %dec_label_pc_402a41
  store i32 0, i32* %.pre8, align 4, !insn.addr !1083
  store i32 1, i32* %50, align 4, !insn.addr !1084
  %60 = call i32 @function_402cac(i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32)), !insn.addr !1085
  store i32 %54, i32* %eax.0.reg2mem, !insn.addr !1086
  br label %dec_label_pc_402a95, !insn.addr !1086

dec_label_pc_402a95:                              ; preds = %dec_label_pc_40297a, %dec_label_pc_402a4a
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  store i32 -2, i32* %9, align 4
  %61 = add i32 %1, -16, !insn.addr !1087
  %62 = inttoptr i32 %61 to i32*, !insn.addr !1087
  %63 = load i32, i32* %62, align 4, !insn.addr !1087
  call void @__writefsdword(i32 0, i32 %63), !insn.addr !1088
  ret i32 %eax.0.reload, !insn.addr !1089

dec_label_pc_402aa5:                              ; preds = %dec_label_pc_402955, %dec_label_pc_402939
  store i32 ()** inttoptr (i32 7 to i32 ()**), i32 ()*** %stack_var_-12, align 4, !insn.addr !1090
  %64 = ptrtoint i32 ()*** %stack_var_-12 to i32, !insn.addr !1090
  %65 = call i32 @function_402f8b(i32 7, i32 ptrtoint (i32* @0 to i32)), !insn.addr !1091
  %.pre = add i32 %64, -4, !insn.addr !1092
  %.pre4 = inttoptr i32 %.pre to i32*, !insn.addr !1092
  store i32* %.pre4, i32** %.pre-phi5.reg2mem, !insn.addr !1091
  br label %dec_label_pc_402aac, !insn.addr !1091

dec_label_pc_402aac:                              ; preds = %dec_label_pc_402aa5, %dec_label_pc_402a17
  %esi.0.reload = load i32, i32* %esi.0.reg2mem
  %.pre-phi5.reload = load i32*, i32** %.pre-phi5.reg2mem
  store i32 %esi.0.reload, i32* %.pre-phi5.reload, align 4, !insn.addr !1092
  call void @exit(i32 ptrtoint (i32* @0 to i32)), !insn.addr !1093
  unreachable, !insn.addr !1093

; uselistorder directives
  uselistorder i32 %54, { 1, 0 }
  uselistorder i32* %.pre8, { 1, 0, 2, 4, 3 }
  uselistorder i32 %esp.0.reload, { 1, 0, 2 }
  uselistorder i32 %25, { 1, 0, 2 }
  uselistorder i32 ()*** %stack_var_-12, { 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %1, { 3, 2, 1, 0 }
  uselistorder i8* %ebx.0.reg2mem, { 0, 2, 1 }
  uselistorder i32* %eax.0.reg2mem, { 0, 2, 1 }
  uselistorder i32** %.pre-phi5.reg2mem, { 0, 2, 1 }
  uselistorder i32 ()* @function_402d16, { 0, 4, 3, 2, 1 }
  uselistorder i32 (i32, i32)* @function_402bfb, { 1, 0 }
  uselistorder i32 -36, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_402a95, { 1, 0 }
  uselistorder label %dec_label_pc_402a17, { 1, 2, 0 }
}

define i32 @entry_point() local_unnamed_addr {
dec_label_pc_402abb:
  %0 = call i32 @function_402ec2(), !insn.addr !1094
  %1 = call i32 @function_402939(), !insn.addr !1095
  ret i32 %1, !insn.addr !1095
}

define i32 @function_402ac5(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_402ac5:
  %storemerge.reg2mem = alloca i32, !insn.addr !1096
  %edx.0.reg2mem = alloca i32, !insn.addr !1096
  %0 = add i32 %arg1, 60, !insn.addr !1097
  %1 = inttoptr i32 %0 to i32*, !insn.addr !1097
  %2 = load i32, i32* %1, align 4, !insn.addr !1097
  %3 = add i32 %2, %arg1, !insn.addr !1098
  %4 = add i32 %3, 20, !insn.addr !1099
  %5 = inttoptr i32 %4 to i16*, !insn.addr !1099
  %6 = load i16, i16* %5, align 2, !insn.addr !1099
  %7 = zext i16 %6 to i32, !insn.addr !1099
  %8 = add i32 %3, 24, !insn.addr !1100
  %9 = add i32 %8, %7, !insn.addr !1101
  %10 = add i32 %3, 6, !insn.addr !1102
  %11 = inttoptr i32 %10 to i16*, !insn.addr !1102
  %12 = load i16, i16* %11, align 2, !insn.addr !1102
  %13 = zext i16 %12 to i32, !insn.addr !1103
  %14 = mul nuw nsw i32 %13, 40, !insn.addr !1103
  %15 = add i32 %14, %9, !insn.addr !1104
  %16 = icmp eq i16 %12, 0, !insn.addr !1105
  store i32 %9, i32* %edx.0.reg2mem, !insn.addr !1106
  store i32 0, i32* %storemerge.reg2mem, !insn.addr !1106
  br i1 %16, label %dec_label_pc_402b02, label %dec_label_pc_402aea, !insn.addr !1106

dec_label_pc_402aea:                              ; preds = %dec_label_pc_402ac5, %dec_label_pc_402af9
  %edx.0.reload = load i32, i32* %edx.0.reg2mem
  %17 = add i32 %edx.0.reload, 12, !insn.addr !1107
  %18 = inttoptr i32 %17 to i32*, !insn.addr !1107
  %19 = load i32, i32* %18, align 4, !insn.addr !1107
  %20 = icmp ugt i32 %19, %arg2, !insn.addr !1107
  br i1 %20, label %dec_label_pc_402af9, label %dec_label_pc_402aef, !insn.addr !1108

dec_label_pc_402aef:                              ; preds = %dec_label_pc_402aea
  %21 = add i32 %edx.0.reload, 8, !insn.addr !1109
  %22 = inttoptr i32 %21 to i32*, !insn.addr !1109
  %23 = load i32, i32* %22, align 4, !insn.addr !1109
  %24 = add i32 %23, %19, !insn.addr !1110
  %25 = icmp ugt i32 %24, %arg2, !insn.addr !1111
  store i32 %edx.0.reload, i32* %storemerge.reg2mem, !insn.addr !1112
  br i1 %25, label %dec_label_pc_402b02, label %dec_label_pc_402af9, !insn.addr !1112

dec_label_pc_402af9:                              ; preds = %dec_label_pc_402aef, %dec_label_pc_402aea
  %26 = add i32 %edx.0.reload, 40, !insn.addr !1113
  %27 = icmp eq i32 %26, %15, !insn.addr !1114
  %28 = icmp eq i1 %27, false, !insn.addr !1115
  store i32 %26, i32* %edx.0.reg2mem, !insn.addr !1115
  store i32 0, i32* %storemerge.reg2mem, !insn.addr !1115
  br i1 %28, label %dec_label_pc_402aea, label %dec_label_pc_402b02, !insn.addr !1115

dec_label_pc_402b02:                              ; preds = %dec_label_pc_402aef, %dec_label_pc_402af9, %dec_label_pc_402ac5
  %storemerge.reload = load i32, i32* %storemerge.reg2mem
  ret i32 %storemerge.reload, !insn.addr !1116

; uselistorder directives
  uselistorder i32 %edx.0.reload, { 3, 0, 1, 2 }
  uselistorder i32 %3, { 2, 1, 0 }
  uselistorder i32* %edx.0.reg2mem, { 2, 0, 1 }
  uselistorder i32* %storemerge.reg2mem, { 0, 2, 1, 3 }
  uselistorder i32 12, { 0, 3, 1, 2, 4, 5 }
  uselistorder i32 40, { 1, 0 }
  uselistorder label %dec_label_pc_402b02, { 1, 0, 2 }
  uselistorder label %dec_label_pc_402aea, { 1, 0 }
}

define i32 @function_402b09() local_unnamed_addr {
dec_label_pc_402b09:
  %eax.0.reg2mem = alloca i32, !insn.addr !1117
  %0 = call i32 @function_4033f5(), !insn.addr !1118
  %1 = icmp eq i32 %0, 0, !insn.addr !1119
  store i32 0, i32* %eax.0.reg2mem, !insn.addr !1120
  br i1 %1, label %dec_label_pc_402b33, label %dec_label_pc_402b13, !insn.addr !1120

dec_label_pc_402b13:                              ; preds = %dec_label_pc_402b09
  %2 = call i32 @__readfsdword(i32 24), !insn.addr !1121
  %3 = add i32 %2, 4, !insn.addr !1122
  %4 = inttoptr i32 %3 to i32*, !insn.addr !1122
  %5 = load i32, i32* %4, align 4, !insn.addr !1122
  %global_var_4060bc.promoted = load i32, i32* @global_var_4060bc, align 4
  %6 = icmp eq i32 %global_var_4060bc.promoted, 0, !insn.addr !1123
  %7 = icmp eq i1 %6, false, !insn.addr !1124
  %8 = icmp eq i32 %5, %global_var_4060bc.promoted
  br label %dec_label_pc_402b27, !insn.addr !1125

dec_label_pc_402b23:                              ; preds = %dec_label_pc_402b27
  br i1 %8, label %dec_label_pc_402b37, label %dec_label_pc_402b27, !insn.addr !1126

dec_label_pc_402b27:                              ; preds = %dec_label_pc_402b23, %dec_label_pc_402b13
  br i1 %7, label %dec_label_pc_402b23, label %dec_label_pc_402b33.loopexit, !insn.addr !1124

dec_label_pc_402b33.loopexit:                     ; preds = %dec_label_pc_402b27
  store i32 %5, i32* @global_var_4060bc, align 4
  %phitmp = and i32 %global_var_4060bc.promoted, -256
  store i32 %phitmp, i32* %eax.0.reg2mem
  br label %dec_label_pc_402b33

dec_label_pc_402b33:                              ; preds = %dec_label_pc_402b33.loopexit, %dec_label_pc_402b09
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  ret i32 %eax.0.reload, !insn.addr !1127

dec_label_pc_402b37:                              ; preds = %dec_label_pc_402b23
  store i32 %5, i32* @global_var_4060bc, align 4
  %9 = and i32 %5, -256, !insn.addr !1128
  %10 = or i32 %9, 1, !insn.addr !1128
  ret i32 %10, !insn.addr !1129

; uselistorder directives
  uselistorder i32 %5, { 2, 1, 0, 3 }
}

define i32 @function_402b3b(i32 %arg1) local_unnamed_addr {
dec_label_pc_402b3b:
  %eax.0.reg2mem = alloca i32, !insn.addr !1130
  %0 = icmp eq i32 %arg1, 0, !insn.addr !1131
  %1 = icmp eq i1 %0, false, !insn.addr !1132
  br i1 %1, label %dec_label_pc_402b4b, label %dec_label_pc_402b44, !insn.addr !1132

dec_label_pc_402b44:                              ; preds = %dec_label_pc_402b3b
  store i8 1, i8* @global_var_4060c0, align 1, !insn.addr !1133
  br label %dec_label_pc_402b4b, !insn.addr !1133

dec_label_pc_402b4b:                              ; preds = %dec_label_pc_402b44, %dec_label_pc_402b3b
  %2 = call i32 @function_403224(), !insn.addr !1134
  %3 = call i32 @function_402f26(), !insn.addr !1135
  %4 = trunc i32 %3 to i8, !insn.addr !1136
  %5 = icmp eq i8 %4, 0, !insn.addr !1136
  %6 = icmp eq i1 %5, false, !insn.addr !1137
  store i32 %3, i32* %eax.0.reg2mem, !insn.addr !1137
  br i1 %6, label %dec_label_pc_402b5d, label %dec_label_pc_402b59, !insn.addr !1137

dec_label_pc_402b59:                              ; preds = %dec_label_pc_402b66, %dec_label_pc_402b4b
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %7 = and i32 %eax.0.reload, -256, !insn.addr !1138
  ret i32 %7, !insn.addr !1139

dec_label_pc_402b5d:                              ; preds = %dec_label_pc_402b4b
  %8 = call i32 @function_402f26(), !insn.addr !1140
  %9 = trunc i32 %8 to i8, !insn.addr !1141
  %10 = icmp eq i8 %9, 0, !insn.addr !1141
  %11 = icmp eq i1 %10, false, !insn.addr !1142
  br i1 %11, label %dec_label_pc_402b70, label %dec_label_pc_402b66, !insn.addr !1142

dec_label_pc_402b66:                              ; preds = %dec_label_pc_402b5d
  %12 = call i32 @function_402f26(), !insn.addr !1143
  store i32 %12, i32* %eax.0.reg2mem, !insn.addr !1144
  br label %dec_label_pc_402b59, !insn.addr !1144

dec_label_pc_402b70:                              ; preds = %dec_label_pc_402b5d
  %13 = and i32 %8, -256, !insn.addr !1145
  %14 = or i32 %13, 1, !insn.addr !1145
  ret i32 %14, !insn.addr !1146

; uselistorder directives
  uselistorder i32* %eax.0.reg2mem, { 2, 0, 1 }
}

define i32 @function_402b74(i32 %arg1) local_unnamed_addr {
dec_label_pc_402b74:
  %0 = alloca i32
  %storemerge.reg2mem = alloca i32, !insn.addr !1147
  %eax.1.reg2mem = alloca i32, !insn.addr !1147
  %eax.0.reg2mem = alloca i32, !insn.addr !1147
  %1 = load i32, i32* %0
  %2 = load i32, i32* %0
  %3 = load i8, i8* @global_var_4060c1, align 1, !insn.addr !1148
  %4 = icmp eq i8 %3, 0, !insn.addr !1148
  br i1 %4, label %dec_label_pc_402b84, label %dec_label_pc_402b80, !insn.addr !1149

dec_label_pc_402b80:                              ; preds = %dec_label_pc_402b74
  %5 = and i32 %2, -256, !insn.addr !1150
  %6 = or i32 %5, 1, !insn.addr !1150
  ret i32 %6, !insn.addr !1151

dec_label_pc_402b84:                              ; preds = %dec_label_pc_402b74
  %7 = icmp ne i32 %arg1, 0, !insn.addr !1152
  %8 = icmp eq i32 %arg1, 1, !insn.addr !1153
  %9 = icmp eq i1 %8, false, !insn.addr !1154
  %or.cond = icmp eq i1 %7, %9
  br i1 %or.cond, label %dec_label_pc_402bf3, label %dec_label_pc_402b91, !insn.addr !1155

dec_label_pc_402b91:                              ; preds = %dec_label_pc_402b84
  %10 = call i32 @function_4033f5(), !insn.addr !1156
  %11 = icmp eq i32 %10, 0, !insn.addr !1157
  %12 = icmp eq i32 %arg1, 0, !insn.addr !1158
  %13 = icmp eq i1 %12, false, !insn.addr !1159
  %or.cond4 = or i1 %13, %11
  br i1 %or.cond4, label %dec_label_pc_402bc0, label %dec_label_pc_402b9e, !insn.addr !1160

dec_label_pc_402b9e:                              ; preds = %dec_label_pc_402b91
  %14 = call i32 @_initialize_onexit_table(%_onexit_table_t* bitcast (%_onexit_table_t** @global_var_4060c4 to %_onexit_table_t*)), !insn.addr !1161
  %15 = icmp eq i32 %14, 0, !insn.addr !1162
  %16 = icmp eq i1 %15, false, !insn.addr !1163
  store i32 %14, i32* %eax.0.reg2mem, !insn.addr !1163
  br i1 %16, label %dec_label_pc_402bbc, label %dec_label_pc_402bad, !insn.addr !1163

dec_label_pc_402bad:                              ; preds = %dec_label_pc_402b9e
  %17 = call i32 @_initialize_onexit_table(%_onexit_table_t* bitcast (i32* @global_var_4060d0 to %_onexit_table_t*)), !insn.addr !1164
  %18 = icmp eq i32 %17, 0, !insn.addr !1165
  store i32 %17, i32* %eax.0.reg2mem, !insn.addr !1166
  store i32 1, i32* %eax.1.reg2mem, !insn.addr !1166
  br i1 %18, label %dec_label_pc_402be7, label %dec_label_pc_402bbc, !insn.addr !1166

dec_label_pc_402bbc:                              ; preds = %dec_label_pc_402bad, %dec_label_pc_402b9e
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %19 = and i32 %eax.0.reload, -256, !insn.addr !1167
  store i32 %19, i32* %storemerge.reg2mem, !insn.addr !1168
  br label %dec_label_pc_402bf0, !insn.addr !1168

dec_label_pc_402bc0:                              ; preds = %dec_label_pc_402b91
  store %_onexit_table_t* inttoptr (i32 -1 to %_onexit_table_t*), %_onexit_table_t** @global_var_4060c4, align 4, !insn.addr !1169
  store i32 -1, i32* @global_var_4060c8, align 4, !insn.addr !1170
  store i32 -1, i32* @global_var_4060cc, align 4, !insn.addr !1171
  store i32 -1, i32* @global_var_4060d0, align 4, !insn.addr !1172
  store i32 -1, i32* @global_var_4060d4, align 4, !insn.addr !1173
  store i32 -1, i32* @global_var_4060d8, align 4, !insn.addr !1174
  %phitmp = and i32 %10, -256
  %phitmp5 = or i32 %phitmp, 1
  store i32 %phitmp5, i32* %eax.1.reg2mem, !insn.addr !1174
  br label %dec_label_pc_402be7, !insn.addr !1174

dec_label_pc_402be7:                              ; preds = %dec_label_pc_402bc0, %dec_label_pc_402bad
  %eax.1.reload = load i32, i32* %eax.1.reg2mem
  store i8 1, i8* @global_var_4060c1, align 1, !insn.addr !1175
  store i32 %eax.1.reload, i32* %storemerge.reg2mem, !insn.addr !1176
  br label %dec_label_pc_402bf0, !insn.addr !1176

dec_label_pc_402bf0:                              ; preds = %dec_label_pc_402be7, %dec_label_pc_402bbc
  %storemerge.reload = load i32, i32* %storemerge.reg2mem
  ret i32 %storemerge.reload, !insn.addr !1177

dec_label_pc_402bf3:                              ; preds = %dec_label_pc_402b84
  %20 = call i32 @function_402f8b(i32 5, i32 %1), !insn.addr !1178
  %21 = call i32 @__asm_int3(), !insn.addr !1179
  ret i32 %21, !insn.addr !1179

; uselistorder directives
  uselistorder i32* %eax.1.reg2mem, { 0, 2, 1 }
  uselistorder i32* %storemerge.reg2mem, { 0, 2, 1 }
  uselistorder i32* %0, { 1, 0 }
  uselistorder i32 5, { 1, 2, 0 }
  uselistorder i32* @global_var_4060d0, { 1, 0 }
  uselistorder i8* @global_var_4060c1, { 1, 0 }
}

define i32 @function_402bfb(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_402bfb:
  %0 = alloca i32
  %storemerge.reg2mem = alloca i32, !insn.addr !1180
  %eax.0.reg2mem = alloca i32, !insn.addr !1180
  %1 = load i32, i32* %0
  %2 = call i32 @function_4031b0(i32* nonnull @global_var_404ba0, i32 8, i32 ptrtoint (i32* @0 to i32)), !insn.addr !1181
  %3 = add i32 %1, -4, !insn.addr !1182
  %4 = inttoptr i32 %3 to i32*, !insn.addr !1182
  store i32 0, i32* %4, align 4, !insn.addr !1182
  %5 = load i16, i16* inttoptr (i32 4194304 to i16*), align 4194304, !insn.addr !1183
  %6 = icmp eq i16 %5, 23117, !insn.addr !1183
  %7 = icmp eq i1 %6, false, !insn.addr !1184
  store i32 23117, i32* %eax.0.reg2mem, !insn.addr !1184
  br i1 %7, label %dec_label_pc_402c76, label %dec_label_pc_402c19, !insn.addr !1184

dec_label_pc_402c19:                              ; preds = %dec_label_pc_402bfb
  %8 = load i32, i32* inttoptr (i32 4194364 to i32*), align 4, !insn.addr !1185
  %9 = add i32 %8, 4194304, !insn.addr !1186
  %10 = inttoptr i32 %9 to i32*, !insn.addr !1186
  %11 = load i32, i32* %10, align 4, !insn.addr !1186
  %12 = icmp eq i32 %11, 17744, !insn.addr !1186
  %13 = icmp eq i1 %12, false, !insn.addr !1187
  store i32 %8, i32* %eax.0.reg2mem, !insn.addr !1187
  br i1 %13, label %dec_label_pc_402c76, label %dec_label_pc_402c2a, !insn.addr !1187

dec_label_pc_402c2a:                              ; preds = %dec_label_pc_402c19
  %14 = add i32 %8, 4194328, !insn.addr !1188
  %15 = inttoptr i32 %14 to i16*, !insn.addr !1188
  %16 = load i16, i16* %15, align 2, !insn.addr !1188
  %17 = icmp eq i16 %16, 267, !insn.addr !1188
  %18 = icmp eq i1 %17, false, !insn.addr !1189
  store i32 %8, i32* %eax.0.reg2mem, !insn.addr !1189
  br i1 %18, label %dec_label_pc_402c76, label %dec_label_pc_402c38, !insn.addr !1189

dec_label_pc_402c38:                              ; preds = %dec_label_pc_402c2a
  %19 = add i32 %1, 8, !insn.addr !1190
  %20 = inttoptr i32 %19 to i32*, !insn.addr !1190
  %21 = load i32, i32* %20, align 4, !insn.addr !1190
  %22 = add i32 %21, -4194304, !insn.addr !1191
  %23 = call i32 @function_402ac5(i32 4194304, i32 %22), !insn.addr !1192
  %24 = icmp eq i32 %23, 0, !insn.addr !1193
  store i32 0, i32* %eax.0.reg2mem, !insn.addr !1194
  br i1 %24, label %dec_label_pc_402c76, label %dec_label_pc_402c4f, !insn.addr !1194

dec_label_pc_402c4f:                              ; preds = %dec_label_pc_402c38
  %25 = add i32 %23, 36, !insn.addr !1195
  %26 = inttoptr i32 %25 to i32*, !insn.addr !1195
  %27 = load i32, i32* %26, align 4, !insn.addr !1195
  %28 = icmp slt i32 %27, 0, !insn.addr !1195
  store i32 %23, i32* %eax.0.reg2mem, !insn.addr !1196
  br i1 %28, label %dec_label_pc_402c76, label %dec_label_pc_402c55, !insn.addr !1196

dec_label_pc_402c55:                              ; preds = %dec_label_pc_402c4f
  store i32 -2, i32* %4, align 4, !insn.addr !1197
  %29 = and i32 %23, -256, !insn.addr !1198
  %30 = or i32 %29, 1, !insn.addr !1198
  store i32 %30, i32* %storemerge.reg2mem, !insn.addr !1199
  br label %dec_label_pc_402c7f, !insn.addr !1199

dec_label_pc_402c76:                              ; preds = %dec_label_pc_402c4f, %dec_label_pc_402c38, %dec_label_pc_402c2a, %dec_label_pc_402c19, %dec_label_pc_402bfb
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  store i32 -2, i32* %4, align 4, !insn.addr !1200
  %31 = and i32 %eax.0.reload, -256, !insn.addr !1201
  store i32 %31, i32* %storemerge.reg2mem, !insn.addr !1201
  br label %dec_label_pc_402c7f, !insn.addr !1201

dec_label_pc_402c7f:                              ; preds = %dec_label_pc_402c76, %dec_label_pc_402c55
  %storemerge.reload = load i32, i32* %storemerge.reg2mem
  %32 = add i32 %1, -16, !insn.addr !1202
  %33 = inttoptr i32 %32 to i32*, !insn.addr !1202
  %34 = load i32, i32* %33, align 4, !insn.addr !1202
  call void @__writefsdword(i32 0, i32 %34), !insn.addr !1203
  ret i32 %storemerge.reload, !insn.addr !1204

; uselistorder directives
  uselistorder i32 %23, { 1, 0, 2, 3 }
  uselistorder i32 %8, { 0, 2, 1, 3 }
  uselistorder i32* %4, { 1, 0, 2 }
  uselistorder i32 %1, { 2, 1, 0 }
  uselistorder i32* %storemerge.reg2mem, { 0, 2, 1 }
  uselistorder i32 (i32*, i32, i32)* @function_4031b0, { 1, 0 }
}

define i32 @function_402c8f(i32 %arg1) local_unnamed_addr {
dec_label_pc_402c8f:
  %eax.0.reg2mem = alloca i32, !insn.addr !1205
  %0 = call i32 @function_4033f5(), !insn.addr !1206
  %1 = icmp eq i32 %0, 0, !insn.addr !1207
  store i32 0, i32* %eax.0.reg2mem, !insn.addr !1208
  br i1 %1, label %dec_label_pc_402caa, label %dec_label_pc_402c9b, !insn.addr !1208

dec_label_pc_402c9b:                              ; preds = %dec_label_pc_402c8f
  %2 = trunc i32 %arg1 to i8, !insn.addr !1209
  %3 = icmp eq i8 %2, 0, !insn.addr !1209
  %4 = icmp eq i1 %3, false, !insn.addr !1210
  store i32 %0, i32* %eax.0.reg2mem, !insn.addr !1210
  br i1 %4, label %dec_label_pc_402caa, label %dec_label_pc_402ca1, !insn.addr !1210

dec_label_pc_402ca1:                              ; preds = %dec_label_pc_402c9b
  %5 = load i32, i32* @global_var_4060bc, align 4, !insn.addr !1211
  store i32 0, i32* @global_var_4060bc, align 4, !insn.addr !1211
  store i32 %5, i32* %eax.0.reg2mem, !insn.addr !1211
  br label %dec_label_pc_402caa, !insn.addr !1211

dec_label_pc_402caa:                              ; preds = %dec_label_pc_402ca1, %dec_label_pc_402c9b, %dec_label_pc_402c8f
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  ret i32 %eax.0.reload, !insn.addr !1212

; uselistorder directives
  uselistorder i32* @global_var_4060bc, { 3, 4, 0, 1, 2 }
  uselistorder i32 ()* @function_4033f5, { 1, 2, 0 }
}

define i32 @function_402cac(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_402cac:
  %eax.0.reg2mem = alloca i32, !insn.addr !1213
  %0 = load i8, i8* @global_var_4060c0, align 1, !insn.addr !1214
  %1 = icmp eq i8 %0, 0, !insn.addr !1214
  br i1 %1, label %dec_label_pc_402cbe, label %dec_label_pc_402cb8, !insn.addr !1215

dec_label_pc_402cb8:                              ; preds = %dec_label_pc_402cac
  %2 = trunc i32 %arg2 to i8, !insn.addr !1216
  %3 = icmp eq i8 %2, 0, !insn.addr !1216
  %4 = icmp eq i1 %3, false, !insn.addr !1217
  br i1 %4, label %dec_label_pc_402cd0, label %dec_label_pc_402cbe, !insn.addr !1217

dec_label_pc_402cbe:                              ; preds = %dec_label_pc_402cb8, %dec_label_pc_402cac
  %5 = call i32 @function_402f26(), !insn.addr !1218
  %6 = call i32 @function_402f26(), !insn.addr !1219
  store i32 %6, i32* %eax.0.reg2mem, !insn.addr !1220
  br label %dec_label_pc_402cd0, !insn.addr !1220

dec_label_pc_402cd0:                              ; preds = %dec_label_pc_402cbe, %dec_label_pc_402cb8
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %7 = and i32 %eax.0.reload, -256, !insn.addr !1221
  %8 = or i32 %7, 1, !insn.addr !1221
  ret i32 %8, !insn.addr !1222

; uselistorder directives
  uselistorder i32 ()* @function_402f26, { 4, 3, 2, 1, 0, 5 }
  uselistorder i8* @global_var_4060c0, { 1, 0 }
}

define i32 @function_402cd4(i32 %arg1) local_unnamed_addr {
dec_label_pc_402cd4:
  %0 = alloca i32
  %storemerge.reg2mem = alloca i32, !insn.addr !1223
  %1 = load i32, i32* %0
  %2 = load %_onexit_table_t*, %_onexit_table_t** @global_var_4060c4, align 4, !insn.addr !1224
  %3 = icmp eq %_onexit_table_t* %2, inttoptr (i32 -1 to %_onexit_table_t*), !insn.addr !1224
  %4 = icmp eq i1 %3, false, !insn.addr !1225
  br i1 %4, label %dec_label_pc_402cea, label %dec_label_pc_402ce3, !insn.addr !1225

dec_label_pc_402ce3:                              ; preds = %dec_label_pc_402cd4
  %5 = call i32 @_crt_atexit(i32 %arg1, i32 %1), !insn.addr !1226
  store i32 %5, i32* %storemerge.reg2mem, !insn.addr !1227
  br label %dec_label_pc_402cf5, !insn.addr !1227

dec_label_pc_402cea:                              ; preds = %dec_label_pc_402cd4
  %6 = inttoptr i32 %arg1 to i32 ()*, !insn.addr !1228
  %7 = call i32 @_register_onexit_function(%_onexit_table_t* bitcast (%_onexit_table_t** @global_var_4060c4 to %_onexit_table_t*), i32 ()* %6), !insn.addr !1228
  store i32 %7, i32* %storemerge.reg2mem, !insn.addr !1229
  br label %dec_label_pc_402cf5, !insn.addr !1229

dec_label_pc_402cf5:                              ; preds = %dec_label_pc_402cea, %dec_label_pc_402ce3
  %storemerge.reload = load i32, i32* %storemerge.reg2mem
  %8 = icmp eq i32 %storemerge.reload, 0, !insn.addr !1230
  %9 = select i1 %8, i32 %arg1, i32 0, !insn.addr !1231
  ret i32 %9, !insn.addr !1232

; uselistorder directives
  uselistorder i32* %storemerge.reg2mem, { 0, 2, 1 }
  uselistorder %_onexit_table_t** @global_var_4060c4, { 2, 1, 0 }
}

define i32 @function_402d01(i32 %arg1) local_unnamed_addr {
dec_label_pc_402d01:
  %0 = call i32 @function_402cd4(i32 %arg1), !insn.addr !1233
  %1 = icmp eq i32 %0, 0, !insn.addr !1234
  %2 = sext i1 %1 to i32, !insn.addr !1235
  ret i32 %2, !insn.addr !1236
}

define i32 @function_402d16() local_unnamed_addr {
dec_label_pc_402d16:
  %0 = alloca i32
  %1 = load i32, i32* %0
  ret i32 %1, !insn.addr !1237
}

define i32 @function_402d19(i32 %arg1) local_unnamed_addr {
dec_label_pc_402d19:
  %0 = call i32 (%_EXCEPTION_POINTERS*)* @SetUnhandledExceptionFilter(i32 (%_EXCEPTION_POINTERS*)* null), !insn.addr !1238
  %1 = inttoptr i32 %arg1 to %_EXCEPTION_POINTERS*, !insn.addr !1239
  %2 = call i32 @UnhandledExceptionFilter(%_EXCEPTION_POINTERS* %1), !insn.addr !1239
  %3 = call i32* @GetCurrentProcess(), !insn.addr !1240
  %4 = call i1 @TerminateProcess(i32* %3, i32 ptrtoint (i32* @0 to i32)), !insn.addr !1241
  %5 = sext i1 %4 to i32, !insn.addr !1241
  ret i32 %5, !insn.addr !1242
}

define i32 @function_402d41(i32 %arg1) local_unnamed_addr {
dec_label_pc_402d41:
  %0 = alloca i1
  %ecx.0.reg2mem = alloca i32, !insn.addr !1243
  %1 = load i1, i1* %0
  %2 = load i1, i1* %0
  %3 = load i1, i1* %0
  %4 = load i1, i1* %0
  %stack_var_4 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %5 = call i1 @IsProcessorFeaturePresent(i32 23), !insn.addr !1244
  %6 = icmp eq i1 %5, false, !insn.addr !1245
  br i1 %6, label %dec_label_pc_402d5b, label %dec_label_pc_402d56, !insn.addr !1246

dec_label_pc_402d56:                              ; preds = %dec_label_pc_402d41
  call void @__asm_int(i8 41), !insn.addr !1247
  store i32 2, i32* %ecx.0.reg2mem, !insn.addr !1247
  br label %dec_label_pc_402d5b, !insn.addr !1247

dec_label_pc_402d5b:                              ; preds = %dec_label_pc_402d56, %dec_label_pc_402d41
  %7 = ptrtoint i32* %stack_var_-4 to i32, !insn.addr !1248
  %8 = sext i1 %5 to i32, !insn.addr !1244
  %9 = sext i1 %5 to i8, !insn.addr !1245
  %10 = call i8 @llvm.ctpop.i8(i8 %9), !range !1249, !insn.addr !1245
  %11 = and i8 %10, 1, !insn.addr !1245
  %12 = icmp eq i8 %11, 0, !insn.addr !1245
  %ecx.0.reload = load i32, i32* %ecx.0.reg2mem
  store i32 %8, i32* @global_var_4061e0, align 4, !insn.addr !1250
  store i32 %ecx.0.reload, i32* @global_var_4061dc, align 4, !insn.addr !1251
  %13 = zext i1 %12 to i32, !insn.addr !1252
  %14 = mul i32 %13, 4, !insn.addr !1252
  %15 = zext i1 %6 to i32, !insn.addr !1252
  %16 = mul i32 %15, 64, !insn.addr !1252
  %17 = zext i1 %5 to i32, !insn.addr !1252
  %18 = mul i32 %17, 128, !insn.addr !1252
  %19 = zext i1 %4 to i32, !insn.addr !1252
  %20 = mul i32 %19, 256, !insn.addr !1252
  %21 = zext i1 %3 to i32, !insn.addr !1252
  %22 = mul i32 %21, 512, !insn.addr !1252
  %23 = zext i1 %2 to i32, !insn.addr !1252
  %24 = mul i32 %23, 1024, !insn.addr !1252
  %25 = zext i1 %1 to i32, !insn.addr !1252
  %26 = mul i32 %25, 16384, !insn.addr !1252
  %27 = or i32 %26, %24, !insn.addr !1252
  %28 = or i32 %27, %22, !insn.addr !1252
  %29 = or i32 %28, %20, !insn.addr !1252
  %30 = or i32 %29, %18, !insn.addr !1252
  %31 = or i32 %30, %16, !insn.addr !1252
  %32 = or i32 %31, %14, !insn.addr !1252
  %33 = or i32 %32, 2, !insn.addr !1252
  store i32 %33, i32* @global_var_4061f0, align 4, !insn.addr !1253
  %34 = load i32, i32* %stack_var_-4, align 4, !insn.addr !1254
  store i32 %34, i32* @global_var_4061e4, align 4, !insn.addr !1255
  store i32 %arg1, i32* @global_var_4061e8, align 4, !insn.addr !1256
  %35 = ptrtoint i32* %stack_var_4 to i32, !insn.addr !1257
  store i32 %35, i32* @global_var_4061f4, align 4, !insn.addr !1257
  store i32 65537, i32* @global_var_406130, align 4, !insn.addr !1258
  store i32 %arg1, i32* @global_var_4060ec, align 4, !insn.addr !1259
  store i32 -1073740791, i32* @global_var_4060e0, align 4, !insn.addr !1260
  store i32 1, i32* @global_var_4060e4, align 4, !insn.addr !1261
  store i32 1, i32* @global_var_4060f0, align 4, !insn.addr !1262
  store i32 2, i32* @global_var_4060f4, align 4, !insn.addr !1263
  %36 = load i32, i32* @global_var_406008, align 4, !insn.addr !1264
  %37 = add i32 %7, -8, !insn.addr !1265
  %38 = inttoptr i32 %37 to i32*, !insn.addr !1265
  store i32 %36, i32* %38, align 4, !insn.addr !1265
  %39 = load i32, i32* @global_var_406004, align 4, !insn.addr !1266
  %40 = add i32 %7, -4, !insn.addr !1267
  %41 = inttoptr i32 %40 to i32*, !insn.addr !1267
  store i32 %39, i32* %41, align 4, !insn.addr !1267
  %42 = call i32 @function_402d19(i32 4211080), !insn.addr !1268
  ret i32 %42, !insn.addr !1269

; uselistorder directives
  uselistorder i1 %5, { 0, 1, 3, 2 }
  uselistorder i1* %0, { 3, 2, 1, 0 }
  uselistorder i32 64, { 0, 2, 3, 1 }
  uselistorder i8 0, { 28, 23, 24, 25, 17, 26, 27, 54, 55, 56, 57, 0, 5, 58, 18, 19, 20, 30, 10, 31, 32, 3, 4, 1, 33, 2, 34, 29, 52, 53, 6, 7, 21, 35, 36, 37, 38, 39, 40, 41, 42, 11, 43, 12, 44, 13, 45, 46, 14, 47, 15, 48, 16, 49, 51, 50, 22, 8, 9 }
  uselistorder i8 1, { 10, 6, 9, 0, 4, 7, 1, 5, 2, 3, 8 }
  uselistorder i32 %arg1, { 1, 0 }
}

define i32 @function_402e3b() local_unnamed_addr {
dec_label_pc_402e3b:
  %0 = alloca i32
  %1 = load i32, i32* %0
  %2 = add i32 %1, 4, !insn.addr !1270
  %3 = inttoptr i32 %2 to i32*, !insn.addr !1270
  %4 = add i32 %1, 8, !insn.addr !1271
  %5 = inttoptr i32 %4 to i32*, !insn.addr !1271
  store i32 0, i32* %5, align 4, !insn.addr !1271
  store i32 ptrtoint ([15 x i8]* @global_var_4041a8 to i32), i32* %3, align 4, !insn.addr !1272
  %6 = inttoptr i32 %1 to i32*, !insn.addr !1273
  store i32 ptrtoint (i32* @global_var_4041a0 to i32), i32* %6, align 4, !insn.addr !1273
  ret i32 %1, !insn.addr !1274

; uselistorder directives
  uselistorder i32 %1, { 2, 3, 1, 0 }
  uselistorder i32 8, { 3, 5, 0, 4, 1, 2, 6, 7 }
}

define i32 @function_402e53() local_unnamed_addr {
dec_label_pc_402e53:
  %stack_var_-16 = alloca i32, align 4
  %0 = call i32 @function_402e3b(), !insn.addr !1275
  call void @_CxxThrowException(i32* nonnull %stack_var_-16, i32* nonnull @global_var_404bbc), !insn.addr !1276
  unreachable, !insn.addr !1276
}

define i32 @function_402e70() local_unnamed_addr {
dec_label_pc_402e70:
  call void @free(i32* nonnull @0), !insn.addr !1277
  ret i32 ptrtoint (i32* @0 to i32), !insn.addr !1277
}

define i32 @function_402e75() local_unnamed_addr {
dec_label_pc_402e75:
  %0 = alloca i32
  %1 = load i32, i32* %0
  %stack_var_-8 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  store i32 0, i32* %stack_var_-16, align 4, !insn.addr !1278
  %2 = bitcast i32* %stack_var_-16 to %_FILETIME*
  call void @GetSystemTimeAsFileTime(%_FILETIME* nonnull %2), !insn.addr !1279
  %3 = load i32, i32* %stack_var_-16, align 4
  %4 = call i32 @GetCurrentThreadId(), !insn.addr !1280
  %5 = xor i32 %4, %3
  %6 = call i32 @GetCurrentProcessId(), !insn.addr !1281
  %7 = xor i32 %5, %6
  store i32 %7, i32* %stack_var_-8, align 4, !insn.addr !1282
  %8 = bitcast i32* %stack_var_-24 to %_LARGE_INTEGER*
  %9 = call i1 @QueryPerformanceCounter(%_LARGE_INTEGER* nonnull %8), !insn.addr !1283
  %10 = ptrtoint i32* %stack_var_-8 to i32, !insn.addr !1284
  %11 = load i32, i32* %stack_var_-24, align 4, !insn.addr !1285
  %12 = xor i32 %1, %10, !insn.addr !1285
  %13 = xor i32 %12, %7, !insn.addr !1286
  %14 = xor i32 %13, %11, !insn.addr !1287
  ret i32 %14, !insn.addr !1288

; uselistorder directives
  uselistorder i32* %stack_var_-24, { 1, 0 }
  uselistorder i32* %stack_var_-16, { 1, 0, 2 }
}

define i32 @function_402ec2() local_unnamed_addr {
dec_label_pc_402ec2:
  %ecx.1.reg2mem = alloca i32, !insn.addr !1289
  %eax.1.reg2mem = alloca i32, !insn.addr !1289
  %ecx.0.reg2mem = alloca i32, !insn.addr !1289
  %eax.0.reg2mem = alloca i32, !insn.addr !1289
  %0 = load i32, i32* @global_var_406008, align 4, !insn.addr !1289
  %1 = icmp ne i32 %0, -1153374642, !insn.addr !1290
  %2 = icmp ult i32 %0, 65536, !insn.addr !1291
  %3 = icmp eq i1 %2, false, !insn.addr !1292
  %or.cond = icmp eq i1 %1, %3
  store i32 %0, i32* %ecx.1.reg2mem, !insn.addr !1293
  br i1 %or.cond, label %dec_label_pc_402f02, label %dec_label_pc_402edc, !insn.addr !1293

dec_label_pc_402edc:                              ; preds = %dec_label_pc_402ec2
  %4 = call i32 @function_402e75(), !insn.addr !1294
  %5 = icmp eq i32 %4, -1153374642, !insn.addr !1295
  %6 = icmp eq i1 %5, false, !insn.addr !1296
  store i32 %4, i32* %eax.0.reg2mem, !insn.addr !1296
  store i32 -1153374641, i32* %ecx.0.reg2mem, !insn.addr !1296
  br i1 %6, label %dec_label_pc_402eee, label %dec_label_pc_402efc, !insn.addr !1296

dec_label_pc_402eee:                              ; preds = %dec_label_pc_402edc
  %7 = icmp ult i32 %4, 65536, !insn.addr !1297
  %8 = icmp eq i1 %7, false, !insn.addr !1298
  store i32 %4, i32* %eax.0.reg2mem, !insn.addr !1298
  store i32 %4, i32* %ecx.0.reg2mem, !insn.addr !1298
  br i1 %8, label %dec_label_pc_402efc, label %dec_label_pc_402ef2, !insn.addr !1298

dec_label_pc_402ef2:                              ; preds = %dec_label_pc_402eee
  %9 = mul i32 %4, 65536, !insn.addr !1299
  %10 = or i32 %9, 1192296448, !insn.addr !1300
  %11 = or i32 %10, %4, !insn.addr !1301
  store i32 %10, i32* %eax.0.reg2mem, !insn.addr !1301
  store i32 %11, i32* %ecx.0.reg2mem, !insn.addr !1301
  br label %dec_label_pc_402efc, !insn.addr !1301

dec_label_pc_402efc:                              ; preds = %dec_label_pc_402edc, %dec_label_pc_402ef2, %dec_label_pc_402eee
  %ecx.0.reload = load i32, i32* %ecx.0.reg2mem
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  store i32 %ecx.0.reload, i32* @global_var_406008, align 4, !insn.addr !1302
  store i32 %eax.0.reload, i32* %eax.1.reg2mem, !insn.addr !1302
  store i32 %ecx.0.reload, i32* %ecx.1.reg2mem, !insn.addr !1302
  br label %dec_label_pc_402f02, !insn.addr !1302

dec_label_pc_402f02:                              ; preds = %dec_label_pc_402ec2, %dec_label_pc_402efc
  %ecx.1.reload = load i32, i32* %ecx.1.reg2mem
  %eax.1.reload = load i32, i32* %eax.1.reg2mem
  %12 = xor i32 %ecx.1.reload, -1, !insn.addr !1303
  store i32 %12, i32* @global_var_406004, align 4, !insn.addr !1304
  ret i32 %eax.1.reload, !insn.addr !1305

; uselistorder directives
  uselistorder i32 %4, { 4, 3, 0, 2, 5, 1, 6 }
  uselistorder i32* %eax.0.reg2mem, { 0, 2, 3, 1 }
  uselistorder i32* %ecx.0.reg2mem, { 0, 2, 3, 1 }
  uselistorder i32* %ecx.1.reg2mem, { 0, 2, 1 }
  uselistorder i32 -1, { 21, 3, 6, 4, 5, 7, 2, 8, 9, 10, 1, 11, 22, 23, 12, 0, 24, 25, 13, 14, 15, 16, 17, 18, 19, 20, 26, 27, 28 }
  uselistorder label %dec_label_pc_402f02, { 1, 0 }
  uselistorder label %dec_label_pc_402efc, { 1, 2, 0 }
}

define i32 @function_402f0d() local_unnamed_addr {
dec_label_pc_402f0d:
  ret i32 0, !insn.addr !1306
}

define i32 @function_402f10() local_unnamed_addr {
dec_label_pc_402f10:
  ret i32 1, !insn.addr !1307
}

define i32 @function_402f14() local_unnamed_addr {
dec_label_pc_402f14:
  ret i32 16384, !insn.addr !1308

; uselistorder directives
  uselistorder i32 16384, { 1, 0 }
}

define void @function_402f1a(i32* %ListHead) local_unnamed_addr {
dec_label_pc_402f1a:
  call void @InitializeSListHead(i32* nonnull @global_var_406400), !insn.addr !1309
  ret void, !insn.addr !1310

; uselistorder directives
  uselistorder void (i32*)* @InitializeSListHead, { 1, 0 }
}

define i32 @function_402f26() local_unnamed_addr {
dec_label_pc_402f26:
  %0 = alloca i32
  %1 = load i32, i32* %0
  %2 = and i32 %1, -256, !insn.addr !1311
  %3 = or i32 %2, 1, !insn.addr !1311
  ret i32 %3, !insn.addr !1312
}

define i32 @function_402f29() local_unnamed_addr {
dec_label_pc_402f29:
  %0 = call i32 @_controlfp_s(i32* null, i32 65536, i32 196608), !insn.addr !1313
  %1 = icmp eq i32 %0, 0, !insn.addr !1314
  %2 = icmp eq i1 %1, false, !insn.addr !1315
  br i1 %2, label %dec_label_pc_402f42, label %dec_label_pc_402f41, !insn.addr !1315

dec_label_pc_402f41:                              ; preds = %dec_label_pc_402f29
  ret i32 %0, !insn.addr !1316

dec_label_pc_402f42:                              ; preds = %dec_label_pc_402f29
  %3 = call i32 @function_402f8b(i32 7, i32 ptrtoint (i32* @0 to i32)), !insn.addr !1317
  %4 = call i32 @__asm_int3(), !insn.addr !1318
  ret i32 ptrtoint (i32* @global_var_406408 to i32), !insn.addr !1319

; uselistorder directives
  uselistorder i32 (i32, i32)* @function_402f8b, { 3, 2, 0, 1 }
  uselistorder i32* @0, { 6, 0, 1, 5, 2, 7, 8, 3, 4 }
  uselistorder i32 ptrtoint (i32* @0 to i32), { 1, 2, 3, 4, 6, 5, 7, 8, 9, 10, 11, 12, 13, 15, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 0 }
  uselistorder i32 65536, { 3, 0, 2, 1 }
}

define i32 @function_402f50() local_unnamed_addr {
dec_label_pc_402f50:
  ret i32 ptrtoint (i32* @global_var_406410 to i32), !insn.addr !1320
}

define i32 @function_402f56() local_unnamed_addr {
dec_label_pc_402f56:
  %0 = alloca i32
  %1 = load i32, i32* %0
  %2 = add i32 %1, 4, !insn.addr !1321
  %3 = inttoptr i32 %2 to i32*, !insn.addr !1321
  %4 = load i32, i32* %3, align 4, !insn.addr !1321
  %5 = or i32 %1, 36, !insn.addr !1322
  %6 = inttoptr i32 %1 to i32*, !insn.addr !1322
  store i32 %5, i32* %6, align 4, !insn.addr !1322
  store i32 %4, i32* %3, align 4, !insn.addr !1323
  %7 = call i32 @function_402f50(), !insn.addr !1324
  %8 = add i32 %7, 4, !insn.addr !1325
  %9 = inttoptr i32 %8 to i32*, !insn.addr !1325
  %10 = load i32, i32* %9, align 4, !insn.addr !1325
  %11 = inttoptr i32 %7 to i32*, !insn.addr !1326
  %12 = load i32, i32* %11, align 4, !insn.addr !1326
  %13 = or i32 %12, 2, !insn.addr !1326
  store i32 %13, i32* %11, align 4, !insn.addr !1326
  store i32 %10, i32* %9, align 4, !insn.addr !1327
  ret i32 %7, !insn.addr !1328

; uselistorder directives
  uselistorder i32 %7, { 2, 1, 0 }
  uselistorder i32 %1, { 2, 1, 0 }
  uselistorder i32 36, { 12, 13, 0, 1, 6, 7, 8, 9, 2, 14, 10, 3, 4, 11, 5 }
}

define i32 @function_402f73() local_unnamed_addr {
dec_label_pc_402f73:
  %0 = load i32, i32* @global_var_40600c, align 4, !insn.addr !1329
  %1 = icmp eq i32 %0, 0, !insn.addr !1329
  %2 = zext i1 %1 to i32, !insn.addr !1330
  ret i32 %2, !insn.addr !1331
}

define i32 @function_402f7f() local_unnamed_addr {
dec_label_pc_402f7f:
  ret i32 ptrtoint (i32* @global_var_40642c to i32), !insn.addr !1332
}

define i32 @function_402f85() local_unnamed_addr {
dec_label_pc_402f85:
  ret i32 ptrtoint (i32* @global_var_406428 to i32), !insn.addr !1333
}

define i32 @function_402f8b(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_402f8b:
  %eax.0.reg2mem = alloca i32, !insn.addr !1334
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-92 = alloca i32, align 4
  %stack_var_-808 = alloca i32, align 4
  %0 = call i1 @IsProcessorFeaturePresent(i32 23), !insn.addr !1335
  %1 = icmp eq i1 %0, false, !insn.addr !1336
  br i1 %1, label %dec_label_pc_402fa6, label %dec_label_pc_402fa1, !insn.addr !1337

dec_label_pc_402fa1:                              ; preds = %dec_label_pc_402f8b
  call void @__asm_int(i8 41), !insn.addr !1338
  br label %dec_label_pc_402fa6, !insn.addr !1338

dec_label_pc_402fa6:                              ; preds = %dec_label_pc_402fa1, %dec_label_pc_402f8b
  %2 = call i32 @function_403150(), !insn.addr !1339
  %3 = call i32* @memset(i32* nonnull %stack_var_-808, i32 0, i32 716), !insn.addr !1340
  store i32 65537, i32* %stack_var_-808, align 4, !insn.addr !1341
  %4 = call i32* @memset(i32* nonnull %stack_var_-92, i32 0, i32 80), !insn.addr !1342
  store i32 1073741845, i32* %stack_var_-92, align 4, !insn.addr !1343
  %5 = call i1 @IsDebuggerPresent(), !insn.addr !1344
  %6 = ptrtoint i32* %stack_var_-92 to i32, !insn.addr !1345
  store i32 %6, i32* %stack_var_-12, align 4, !insn.addr !1345
  %7 = call i32 (%_EXCEPTION_POINTERS*)* @SetUnhandledExceptionFilter(i32 (%_EXCEPTION_POINTERS*)* null), !insn.addr !1346
  %8 = bitcast i32* %stack_var_-12 to %_EXCEPTION_POINTERS*
  %9 = call i32 @UnhandledExceptionFilter(%_EXCEPTION_POINTERS* nonnull %8), !insn.addr !1347
  %10 = icmp eq i32 %9, 0, !insn.addr !1348
  %11 = icmp eq i1 %10, false, !insn.addr !1349
  store i32 %9, i32* %eax.0.reg2mem, !insn.addr !1349
  br i1 %11, label %dec_label_pc_4030a3, label %dec_label_pc_40309b, !insn.addr !1349

dec_label_pc_40309b:                              ; preds = %dec_label_pc_402fa6
  %12 = call i32 @function_403150(), !insn.addr !1350
  store i32 %12, i32* %eax.0.reg2mem, !insn.addr !1351
  br label %dec_label_pc_4030a3, !insn.addr !1351

dec_label_pc_4030a3:                              ; preds = %dec_label_pc_40309b, %dec_label_pc_402fa6
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  ret i32 %eax.0.reload, !insn.addr !1352

; uselistorder directives
  uselistorder i32* %stack_var_-808, { 1, 0 }
  uselistorder i32* %stack_var_-92, { 1, 2, 0 }
  uselistorder i32 (%_EXCEPTION_POINTERS*)* @UnhandledExceptionFilter, { 1, 0 }
  uselistorder i32 ()* @function_403150, { 1, 0 }
}

define i32 @function_4030a6() local_unnamed_addr {
dec_label_pc_4030a6:
  %0 = call i32 @function_402f0d(), !insn.addr !1353
  ret i32 %0, !insn.addr !1353

; uselistorder directives
  uselistorder i32 ()* @function_402f0d, { 4, 5, 0, 3, 2, 1 }
}

define i32 @function_4030ab() local_unnamed_addr {
dec_label_pc_4030ab:
  %eax.0.reg2mem = alloca i32, !insn.addr !1354
  %0 = call i32* @GetModuleHandleW(i16* null), !insn.addr !1355
  %1 = ptrtoint i32* %0 to i32, !insn.addr !1355
  %2 = icmp eq i32* %0, null, !insn.addr !1356
  store i32 %1, i32* %eax.0.reg2mem, !insn.addr !1357
  br i1 %2, label %dec_label_pc_4030eb, label %dec_label_pc_4030b7, !insn.addr !1357

dec_label_pc_4030b7:                              ; preds = %dec_label_pc_4030ab
  %3 = bitcast i32* %0 to i16*, !insn.addr !1358
  %4 = load i16, i16* %3, align 2, !insn.addr !1358
  %5 = icmp eq i16 %4, 23117, !insn.addr !1358
  %6 = icmp eq i1 %5, false, !insn.addr !1359
  store i32 %1, i32* %eax.0.reg2mem, !insn.addr !1359
  br i1 %6, label %dec_label_pc_4030eb, label %dec_label_pc_4030c1, !insn.addr !1359

dec_label_pc_4030c1:                              ; preds = %dec_label_pc_4030b7
  %7 = add i32 %1, 60, !insn.addr !1360
  %8 = inttoptr i32 %7 to i32*, !insn.addr !1360
  %9 = load i32, i32* %8, align 4, !insn.addr !1360
  %10 = add i32 %9, %1, !insn.addr !1361
  %11 = inttoptr i32 %10 to i32*, !insn.addr !1362
  %12 = load i32, i32* %11, align 4, !insn.addr !1362
  %13 = icmp eq i32 %12, 17744, !insn.addr !1362
  %14 = icmp eq i1 %13, false, !insn.addr !1363
  store i32 %1, i32* %eax.0.reg2mem, !insn.addr !1363
  br i1 %14, label %dec_label_pc_4030eb, label %dec_label_pc_4030ce, !insn.addr !1363

dec_label_pc_4030ce:                              ; preds = %dec_label_pc_4030c1
  %15 = add i32 %10, 24, !insn.addr !1364
  %16 = inttoptr i32 %15 to i16*, !insn.addr !1364
  %17 = load i16, i16* %16, align 2, !insn.addr !1364
  %18 = icmp eq i16 %17, 267, !insn.addr !1364
  %19 = icmp eq i1 %18, false, !insn.addr !1365
  store i32 267, i32* %eax.0.reg2mem, !insn.addr !1365
  br i1 %19, label %dec_label_pc_4030eb, label %dec_label_pc_4030d9, !insn.addr !1365

dec_label_pc_4030d9:                              ; preds = %dec_label_pc_4030ce
  %20 = add i32 %10, 116, !insn.addr !1366
  %21 = inttoptr i32 %20 to i32*, !insn.addr !1366
  %22 = load i32, i32* %21, align 4, !insn.addr !1366
  %23 = icmp ult i32 %22, 15
  store i32 267, i32* %eax.0.reg2mem, !insn.addr !1367
  br i1 %23, label %dec_label_pc_4030eb, label %dec_label_pc_4030df, !insn.addr !1367

dec_label_pc_4030df:                              ; preds = %dec_label_pc_4030d9
  %24 = add i32 %10, 232, !insn.addr !1368
  %25 = inttoptr i32 %24 to i32*, !insn.addr !1368
  %26 = load i32, i32* %25, align 4, !insn.addr !1368
  %27 = icmp eq i32 %26, 0, !insn.addr !1368
  store i32 267, i32* %eax.0.reg2mem, !insn.addr !1369
  br i1 %27, label %dec_label_pc_4030eb, label %dec_label_pc_4030e8, !insn.addr !1369

dec_label_pc_4030e8:                              ; preds = %dec_label_pc_4030df
  ret i32 257, !insn.addr !1370

dec_label_pc_4030eb:                              ; preds = %dec_label_pc_4030df, %dec_label_pc_4030d9, %dec_label_pc_4030ce, %dec_label_pc_4030c1, %dec_label_pc_4030b7, %dec_label_pc_4030ab
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %28 = and i32 %eax.0.reload, -256, !insn.addr !1371
  ret i32 %28, !insn.addr !1372

; uselistorder directives
  uselistorder i32 %10, { 2, 1, 0, 3 }
  uselistorder i32 %1, { 0, 3, 4, 1, 2 }
  uselistorder i32 -256, { 4, 5, 6, 7, 8, 1, 2, 3, 9, 10, 11, 0 }
  uselistorder i32 15, { 0, 2, 3, 4, 1, 5, 6, 7, 8 }
  uselistorder i32 24, { 2, 1, 3, 0 }
}

define i32 (%_EXCEPTION_POINTERS*)* @function_4030ee(i32 (%_EXCEPTION_POINTERS*)* %lpTopLevelExceptionFilter) local_unnamed_addr {
dec_label_pc_4030ee:
  %0 = call i32 (%_EXCEPTION_POINTERS*)* @SetUnhandledExceptionFilter(i32 (%_EXCEPTION_POINTERS*)* inttoptr (i32 4206842 to i32 (%_EXCEPTION_POINTERS*)*)), !insn.addr !1373
  ret i32 (%_EXCEPTION_POINTERS*)* %0, !insn.addr !1374

; uselistorder directives
  uselistorder i32 (%_EXCEPTION_POINTERS*)* (i32 (%_EXCEPTION_POINTERS*)*)* @SetUnhandledExceptionFilter, { 3, 2, 1, 0 }
}

define i32 @function_4030fa(i32 %arg1) local_unnamed_addr {
dec_label_pc_4030fa:
  %0 = alloca i32
  %1 = load i32, i32* %0
  %2 = load i32, i32* %0
  %3 = load i32, i32* %0
  %4 = inttoptr i32 %arg1 to i32*, !insn.addr !1375
  %5 = load i32, i32* %4, align 4, !insn.addr !1375
  %6 = inttoptr i32 %5 to i32*, !insn.addr !1376
  %7 = load i32, i32* %6, align 4, !insn.addr !1376
  %8 = icmp eq i32 %7, -529697949, !insn.addr !1376
  %9 = icmp eq i1 %8, false, !insn.addr !1377
  br i1 %9, label %dec_label_pc_403131, label %dec_label_pc_40310c, !insn.addr !1377

dec_label_pc_40310c:                              ; preds = %dec_label_pc_4030fa
  %10 = add i32 %5, 16, !insn.addr !1378
  %11 = inttoptr i32 %10 to i32*, !insn.addr !1378
  %12 = load i32, i32* %11, align 4, !insn.addr !1378
  %13 = icmp eq i32 %12, 3, !insn.addr !1378
  %14 = icmp eq i1 %13, false, !insn.addr !1379
  br i1 %14, label %dec_label_pc_403131, label %dec_label_pc_403112, !insn.addr !1379

dec_label_pc_403112:                              ; preds = %dec_label_pc_40310c
  %15 = add i32 %5, 20, !insn.addr !1380
  %16 = inttoptr i32 %15 to i32*, !insn.addr !1380
  %17 = load i32, i32* %16, align 4, !insn.addr !1380
  switch i32 %17, label %dec_label_pc_403131 [
    i32 429065506, label %dec_label_pc_403139
    i32 429065505, label %dec_label_pc_403139
    i32 429065504, label %dec_label_pc_403139
    i32 26820608, label %dec_label_pc_403139
  ]

dec_label_pc_403131:                              ; preds = %dec_label_pc_403112, %dec_label_pc_40310c, %dec_label_pc_4030fa
  ret i32 0, !insn.addr !1381

dec_label_pc_403139:                              ; preds = %dec_label_pc_403112, %dec_label_pc_403112, %dec_label_pc_403112, %dec_label_pc_403112
  %18 = call i32 @__current_exception(i32 %1, i32 %2, i32 %3), !insn.addr !1382
  %19 = inttoptr i32 %18 to i32*, !insn.addr !1383
  store i32 %5, i32* %19, align 4, !insn.addr !1383
  %20 = add i32 %arg1, 4, !insn.addr !1384
  %21 = inttoptr i32 %20 to i32*, !insn.addr !1384
  %22 = load i32, i32* %21, align 4, !insn.addr !1384
  %23 = call i32 @__current_exception_context(), !insn.addr !1385
  %24 = inttoptr i32 %23 to i32*, !insn.addr !1386
  store i32 %22, i32* %24, align 4, !insn.addr !1386
  %25 = call i32 @terminate(), !insn.addr !1387
  %26 = call i32 @__asm_int3(), !insn.addr !1388
  ret i32 %26, !insn.addr !1388

; uselistorder directives
  uselistorder i32* %0, { 2, 1, 0 }
  uselistorder i32 ()* @__asm_int3, { 13, 12, 11, 10, 4, 3, 2, 1, 0, 9, 8, 7, 6, 5 }
  uselistorder i32 4, { 12, 13, 14, 26, 4, 27, 28, 15, 33, 34, 11, 10, 5, 6, 32, 43, 44, 45, 8, 16, 30, 31, 29, 17, 18, 35, 2, 36, 3, 9, 37, 1, 38, 0, 39, 7, 19, 20, 41, 42, 40, 21, 22, 23, 24, 25 }
  uselistorder i32 20, { 1, 2, 0, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12 }
  uselistorder i32 3, { 1, 2, 3, 0 }
  uselistorder i32 16, { 1, 2, 3, 29, 30, 31, 32, 33, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0, 16, 17, 18, 28, 19, 20, 21, 22, 23, 24, 25, 26, 27 }
}

define i32 @function_403150() local_unnamed_addr {
dec_label_pc_403150:
  %0 = alloca i32
  %1 = load i32, i32* %0
  store i32 0, i32* @global_var_406418, align 4, !insn.addr !1389
  ret i32 %1, !insn.addr !1390
}

define i32 @function_403158() local_unnamed_addr {
dec_label_pc_403158:
  %0 = alloca i32
  %1 = load i32, i32* %0
  ret i32 %1, !insn.addr !1391
}

define i32 @function_403184() local_unnamed_addr {
dec_label_pc_403184:
  %0 = alloca i32
  %1 = load i32, i32* %0
  ret i32 %1, !insn.addr !1392
}

define i32 @function_4031b0(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_4031b0:
  %0 = ptrtoint i32* %arg1 to i32
  %stack_var_8 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %1 = call i32 @__readfsdword(i32 0), !insn.addr !1393
  store i32 %1, i32* %stack_var_-8, align 4, !insn.addr !1393
  %2 = ptrtoint i32* %stack_var_-8 to i32, !insn.addr !1393
  %3 = ptrtoint i32* %stack_var_8 to i32, !insn.addr !1394
  %4 = sub i32 %2, %arg3, !insn.addr !1395
  %5 = add i32 %4, -4, !insn.addr !1396
  %6 = inttoptr i32 %5 to i32*, !insn.addr !1396
  %7 = add i32 %4, -8, !insn.addr !1397
  %8 = inttoptr i32 %7 to i32*, !insn.addr !1397
  %9 = add i32 %4, -12, !insn.addr !1398
  %10 = inttoptr i32 %9 to i32*, !insn.addr !1398
  %11 = load i32, i32* @global_var_406008, align 4, !insn.addr !1399
  %12 = xor i32 %11, %3, !insn.addr !1400
  %13 = add i32 %4, -16, !insn.addr !1401
  %14 = inttoptr i32 %13 to i32*, !insn.addr !1401
  store i32 %12, i32* %14, align 4, !insn.addr !1401
  %15 = add i32 %4, -20, !insn.addr !1402
  %16 = inttoptr i32 %15 to i32*, !insn.addr !1402
  store i32 %0, i32* %16, align 4, !insn.addr !1402
  call void @__writefsdword(i32 0, i32 %2), !insn.addr !1403
  ret i32 %2, !insn.addr !1404

; uselistorder directives
  uselistorder i32 -20, { 1, 0 }
  uselistorder i32 -16, { 1, 2, 3, 0 }
  uselistorder i32 -12, { 2, 3, 4, 0, 1, 5, 8, 7, 10, 11, 9, 6 }
  uselistorder i32 -8, { 2, 21, 3, 4, 6, 5, 0, 1, 7, 8, 10, 9, 11, 15, 14, 13, 18, 17, 20, 19, 16, 12 }
  uselistorder i32 -4, { 5, 4, 29, 1, 0, 43, 6, 7, 9, 8, 39, 3, 40, 10, 11, 12, 41, 42, 2, 16, 13, 14, 15, 17, 30, 31, 32, 33, 34, 35, 36, 37, 38, 26, 21, 20, 19, 24, 23, 27, 25, 22, 18, 28 }
}

define i32 @function_4031f5(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_4031f5:
  %0 = inttoptr i32 %arg1 to i32*, !insn.addr !1405
  %1 = load i32, i32* %0, align 4, !insn.addr !1405
  %2 = call i32 @function_4034cd(i32 %1), !insn.addr !1406
  store i32 %2, i32* %0, align 4, !insn.addr !1407
  %3 = call i32 @_except_handler4_common(), !insn.addr !1408
  ret i32 %3, !insn.addr !1409
}

define i32 @function_403224() local_unnamed_addr {
dec_label_pc_403224:
  %edi.0.reg2mem = alloca i32, !insn.addr !1410
  store i32 0, i32* @global_var_40641c, align 4, !insn.addr !1411
  %0 = load i32, i32* @global_var_406010, align 4, !insn.addr !1412
  %1 = or i32 %0, 1, !insn.addr !1412
  store i32 %1, i32* @global_var_406010, align 4, !insn.addr !1412
  %2 = call i1 @IsProcessorFeaturePresent(i32 10), !insn.addr !1413
  %3 = icmp eq i1 %2, false, !insn.addr !1414
  br i1 %3, label %dec_label_pc_4033f1, label %dec_label_pc_403248, !insn.addr !1415

dec_label_pc_403248:                              ; preds = %dec_label_pc_403224
  %4 = call %0 @__asm_cpuid(i32 0), !insn.addr !1416
  %5 = extractvalue %0 %4, 1, !insn.addr !1416
  %6 = extractvalue %0 %4, 2, !insn.addr !1416
  %7 = extractvalue %0 %4, 3, !insn.addr !1416
  %8 = xor i32 %6, 1818588270, !insn.addr !1417
  %9 = xor i32 %7, 1231384169, !insn.addr !1418
  %10 = xor i32 %5, 1970169159, !insn.addr !1419
  %11 = call %1 @__asm_cpuid.2(i32 1), !insn.addr !1420
  %12 = or i32 %10, %8, !insn.addr !1421
  %13 = or i32 %12, %9, !insn.addr !1422
  %14 = icmp eq i32 %13, 0, !insn.addr !1422
  %15 = icmp eq i1 %14, false, !insn.addr !1423
  br i1 %15, label %dec_label_pc_4032f2, label %dec_label_pc_4032af, !insn.addr !1423

dec_label_pc_4032af:                              ; preds = %dec_label_pc_403248
  %16 = extractvalue %1 %11, 0, !insn.addr !1420
  %17 = and i32 %16, 268386288, !insn.addr !1424
  switch i32 %17, label %dec_label_pc_4032da [
    i32 198240, label %dec_label_pc_4032e1
    i32 198224, label %dec_label_pc_4032e1
    i32 132720, label %dec_label_pc_4032e1
    i32 132704, label %dec_label_pc_4032e1
    i32 67264, label %dec_label_pc_4032e1
  ]

dec_label_pc_4032da:                              ; preds = %dec_label_pc_4032af
  %18 = icmp eq i32 %17, 198256, !insn.addr !1425
  %19 = icmp eq i1 %18, false, !insn.addr !1426
  br i1 %19, label %dec_label_pc_4032f2, label %dec_label_pc_4032e1, !insn.addr !1426

dec_label_pc_4032e1:                              ; preds = %dec_label_pc_4032af, %dec_label_pc_4032af, %dec_label_pc_4032af, %dec_label_pc_4032af, %dec_label_pc_4032af, %dec_label_pc_4032da
  %20 = load i32, i32* @global_var_406420, align 4, !insn.addr !1427
  %21 = or i32 %20, 1, !insn.addr !1428
  store i32 %21, i32* @global_var_406420, align 4, !insn.addr !1429
  store i32 %21, i32* %edi.0.reg2mem, !insn.addr !1430
  br label %dec_label_pc_4032f8, !insn.addr !1430

dec_label_pc_4032f2:                              ; preds = %dec_label_pc_4032da, %dec_label_pc_403248
  %22 = load i32, i32* @global_var_406420, align 4, !insn.addr !1431
  store i32 %22, i32* %edi.0.reg2mem, !insn.addr !1431
  br label %dec_label_pc_4032f8, !insn.addr !1431

dec_label_pc_4032f8:                              ; preds = %dec_label_pc_4032f2, %dec_label_pc_4032e1
  %23 = extractvalue %0 %4, 0, !insn.addr !1416
  %24 = icmp slt i32 %23, 7, !insn.addr !1432
  br i1 %24, label %dec_label_pc_403338, label %dec_label_pc_403306, !insn.addr !1432

dec_label_pc_403306:                              ; preds = %dec_label_pc_4032f8
  %25 = call %2 @__asm_cpuid.3(i32 7), !insn.addr !1433
  %26 = extractvalue %2 %25, 1, !insn.addr !1433
  %27 = and i32 %26, 512, !insn.addr !1434
  %28 = icmp eq i32 %27, 0, !insn.addr !1434
  br i1 %28, label %dec_label_pc_403338, label %dec_label_pc_40332a, !insn.addr !1435

dec_label_pc_40332a:                              ; preds = %dec_label_pc_403306
  %edi.0.reload = load i32, i32* %edi.0.reg2mem
  %29 = or i32 %edi.0.reload, 2, !insn.addr !1436
  store i32 %29, i32* @global_var_406420, align 4, !insn.addr !1437
  br label %dec_label_pc_403338, !insn.addr !1438

dec_label_pc_403338:                              ; preds = %dec_label_pc_4032f8, %dec_label_pc_40332a, %dec_label_pc_403306
  %30 = extractvalue %1 %11, 2, !insn.addr !1420
  %31 = load i32, i32* @global_var_406010, align 4, !insn.addr !1439
  %32 = or i32 %31, 2, !insn.addr !1440
  store i32 1, i32* @global_var_40641c, align 4, !insn.addr !1441
  store i32 %32, i32* @global_var_406010, align 4, !insn.addr !1442
  %33 = and i32 %30, 1048576, !insn.addr !1443
  %34 = icmp eq i32 %33, 0, !insn.addr !1443
  br i1 %34, label %dec_label_pc_4033f1, label %dec_label_pc_40335b, !insn.addr !1444

dec_label_pc_40335b:                              ; preds = %dec_label_pc_403338
  %35 = or i32 %31, 6, !insn.addr !1445
  store i32 2, i32* @global_var_40641c, align 4, !insn.addr !1446
  store i32 %35, i32* @global_var_406010, align 4, !insn.addr !1447
  %36 = and i32 %30, 402653184
  %37 = icmp eq i32 %36, 402653184
  br i1 %37, label %dec_label_pc_40337d, label %dec_label_pc_4033f1, !insn.addr !1448

dec_label_pc_40337d:                              ; preds = %dec_label_pc_40335b
  call void @__asm_xgetbv(i32 0), !insn.addr !1449
  br label %dec_label_pc_4033f1

dec_label_pc_4033f1:                              ; preds = %dec_label_pc_40335b, %dec_label_pc_403338, %dec_label_pc_40337d, %dec_label_pc_403224
  ret i32 0, !insn.addr !1450

; uselistorder directives
  uselistorder i32 %17, { 1, 0 }
  uselistorder %0 %4, { 3, 0, 1, 2 }
  uselistorder i32* %edi.0.reg2mem, { 0, 2, 1 }
  uselistorder i32 2, { 9, 10, 11, 8, 12, 6, 0, 19, 13, 2, 14, 7, 17, 18, 3, 4, 5, 1, 15, 16 }
  uselistorder i32 512, { 1, 0 }
  uselistorder i1 (i32)* @IsProcessorFeaturePresent, { 2, 1, 0 }
  uselistorder label %dec_label_pc_4033f1, { 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_403338, { 1, 2, 0 }
  uselistorder label %dec_label_pc_4032e1, { 5, 0, 1, 2, 3, 4 }
}

define i32 @function_4033f5() local_unnamed_addr {
dec_label_pc_4033f5:
  %0 = load i32, i32* @global_var_406014, align 4, !insn.addr !1451
  %1 = icmp eq i32 %0, 0, !insn.addr !1451
  %2 = icmp eq i1 %1, false, !insn.addr !1452
  %3 = zext i1 %2 to i32, !insn.addr !1452
  ret i32 %3, !insn.addr !1453
}

define i32 @function_403401() local_unnamed_addr {
dec_label_pc_403401:
  %0 = call i32 @__CxxFrameHandler3(), !insn.addr !1454
  ret i32 %0, !insn.addr !1454
}

define i32 @function_403407() local_unnamed_addr {
dec_label_pc_403407:
  %0 = call i32 @__std_terminate(), !insn.addr !1455
  ret i32 %0, !insn.addr !1455
}

define void @function_40340d(i32* %pExceptionObject, i32* %pThrowInfo) local_unnamed_addr {
dec_label_pc_40340d:
  call void @_CxxThrowException(i32* %pExceptionObject, i32* %pThrowInfo), !insn.addr !1456
  ret void, !insn.addr !1456

; uselistorder directives
  uselistorder void (i32*, i32*)* @_CxxThrowException, { 3, 1, 2, 0 }
}

define i32 @function_403413(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_403413:
  %0 = call i32 @__current_exception(i32 %arg1, i32 %arg2, i32 %arg3), !insn.addr !1457
  ret i32 %0, !insn.addr !1457

; uselistorder directives
  uselistorder i32 (i32, i32, i32)* @__current_exception, { 1, 0 }
}

define i32 @function_403419() local_unnamed_addr {
dec_label_pc_403419:
  %0 = call i32 @__current_exception_context(), !insn.addr !1458
  ret i32 %0, !insn.addr !1458

; uselistorder directives
  uselistorder i32 ()* @__current_exception_context, { 1, 0 }
}

define i32* @function_40341f(i32* %s, i32 %c, i32 %n) local_unnamed_addr {
dec_label_pc_40341f:
  %0 = call i32* @memset(i32* %s, i32 %c, i32 %n), !insn.addr !1459
  ret i32* %0, !insn.addr !1459

; uselistorder directives
  uselistorder i32* (i32*, i32, i32)* @memset, { 4, 3, 2, 1, 0 }
}

define i32 @function_403425() local_unnamed_addr {
dec_label_pc_403425:
  %0 = call i32 @_except_handler4_common(), !insn.addr !1460
  ret i32 %0, !insn.addr !1460

; uselistorder directives
  uselistorder i32 ()* @_except_handler4_common, { 1, 0 }
}

define i32 @function_40342b(i32 %Size) local_unnamed_addr {
dec_label_pc_40342b:
  %0 = call i32 @_callnewh(i32 %Size), !insn.addr !1461
  ret i32 %0, !insn.addr !1461

; uselistorder directives
  uselistorder i32 (i32)* @_callnewh, { 1, 0 }
}

define i32* @function_403431(i32 %size) local_unnamed_addr {
dec_label_pc_403431:
  %0 = call i32* @malloc(i32 %size), !insn.addr !1462
  ret i32* %0, !insn.addr !1462

; uselistorder directives
  uselistorder i32* (i32)* @malloc, { 1, 0 }
}

define i32 @function_403437(i32 %ExceptionNum, %_EXCEPTION_POINTERS* %ExceptionPtr) local_unnamed_addr {
dec_label_pc_403437:
  %0 = call i32 @_seh_filter_exe(i32 %ExceptionNum, %_EXCEPTION_POINTERS* %ExceptionPtr), !insn.addr !1463
  ret i32 %0, !insn.addr !1463
}

define void @function_40343d(i32 %arg1) local_unnamed_addr {
dec_label_pc_40343d:
  call void @_set_app_type(i32 %arg1), !insn.addr !1464
  ret void, !insn.addr !1464

; uselistorder directives
  uselistorder void (i32)* @_set_app_type, { 1, 0 }
}

define void @function_403443(i32 %pf) local_unnamed_addr {
dec_label_pc_403443:
  call void @__setusermatherr(i32 %pf), !insn.addr !1465
  ret void, !insn.addr !1465

; uselistorder directives
  uselistorder void (i32)* @__setusermatherr, { 1, 0 }
}

define i32 @function_403449(i32 %arg1) local_unnamed_addr {
dec_label_pc_403449:
  %0 = call i32 @_configure_narrow_argv(i32 %arg1), !insn.addr !1466
  ret i32 %0, !insn.addr !1466

; uselistorder directives
  uselistorder i32 (i32)* @_configure_narrow_argv, { 1, 0 }
}

define i32 @function_40344f() local_unnamed_addr {
dec_label_pc_40344f:
  %0 = call i32 @_initialize_narrow_environment(), !insn.addr !1467
  ret i32 %0, !insn.addr !1467

; uselistorder directives
  uselistorder i32 ()* @_initialize_narrow_environment, { 1, 0 }
}

define i8** @function_403455() local_unnamed_addr {
dec_label_pc_403455:
  %0 = call i8** @_get_initial_narrow_environment(), !insn.addr !1468
  ret i8** %0, !insn.addr !1468

; uselistorder directives
  uselistorder i8** ()* @_get_initial_narrow_environment, { 1, 0 }
}

define void @function_40345b(void ()** %First, void ()** %Last) local_unnamed_addr {
dec_label_pc_40345b:
  call void @_initterm(void ()** %First, void ()** %Last), !insn.addr !1469
  ret void, !insn.addr !1469

; uselistorder directives
  uselistorder void (void ()**, void ()**)* @_initterm, { 1, 0 }
}

define i32 @function_403461(i32 ()** %First, i32 ()** %Last) local_unnamed_addr {
dec_label_pc_403461:
  %0 = call i32 @_initterm_e(i32 ()** %First, i32 ()** %Last), !insn.addr !1470
  ret i32 %0, !insn.addr !1470

; uselistorder directives
  uselistorder i32 (i32 ()**, i32 ()**)* @_initterm_e, { 1, 0 }
}

define void @function_403467(i32 %status) local_unnamed_addr {
dec_label_pc_403467:
  call void @exit(i32 %status), !insn.addr !1471
  ret void, !insn.addr !1471

; uselistorder directives
  uselistorder void (i32)* @exit, { 1, 0 }
}

define void @function_40346d(i32 %Code) local_unnamed_addr {
dec_label_pc_40346d:
  call void @_exit(i32 %Code), !insn.addr !1472
  ret void, !insn.addr !1472
}

define i32 @function_403473(i32 %Mode) local_unnamed_addr {
dec_label_pc_403473:
  %0 = call i32 @_set_fmode(i32 %Mode), !insn.addr !1473
  ret i32 %0, !insn.addr !1473

; uselistorder directives
  uselistorder i32 (i32)* @_set_fmode, { 1, 0 }
}

define i32* @function_403479() local_unnamed_addr {
dec_label_pc_403479:
  %0 = call i32* @__p___argc(), !insn.addr !1474
  ret i32* %0, !insn.addr !1474

; uselistorder directives
  uselistorder i32* ()* @__p___argc, { 1, 0 }
}

define i8*** @function_40347f() local_unnamed_addr {
dec_label_pc_40347f:
  %0 = call i8*** @__p___argv(), !insn.addr !1475
  ret i8*** %0, !insn.addr !1475

; uselistorder directives
  uselistorder i8*** ()* @__p___argv, { 1, 0 }
}

define void @function_403485() local_unnamed_addr {
dec_label_pc_403485:
  call void @_cexit(), !insn.addr !1476
  ret void, !insn.addr !1476

; uselistorder directives
  uselistorder void ()* @_cexit, { 1, 0 }
}

define void @function_40348b() local_unnamed_addr {
dec_label_pc_40348b:
  call void @_c_exit(), !insn.addr !1477
  ret void, !insn.addr !1477
}

define void @function_403491(void (i32*, i32, i32*)* %Callback) local_unnamed_addr {
dec_label_pc_403491:
  call void @_register_thread_local_exe_atexit_callback(void (i32*, i32, i32*)* %Callback), !insn.addr !1478
  ret void, !insn.addr !1478

; uselistorder directives
  uselistorder void (void (i32*, i32, i32*)*)* @_register_thread_local_exe_atexit_callback, { 1, 0 }
}

define i32 @function_403497(i32 %Flag) local_unnamed_addr {
dec_label_pc_403497:
  %0 = call i32 @_configthreadlocale(i32 %Flag), !insn.addr !1479
  ret i32 %0, !insn.addr !1479

; uselistorder directives
  uselistorder i32 (i32)* @_configthreadlocale, { 1, 0 }
}

define i32 @function_40349d(i32 %NewMode) local_unnamed_addr {
dec_label_pc_40349d:
  %0 = call i32 @_set_new_mode(i32 %NewMode), !insn.addr !1480
  ret i32 %0, !insn.addr !1480

; uselistorder directives
  uselistorder i32 (i32)* @_set_new_mode, { 1, 0 }
}

define i32* @function_4034a3() local_unnamed_addr {
dec_label_pc_4034a3:
  %0 = call i32* @__p__commode(), !insn.addr !1481
  ret i32* %0, !insn.addr !1481

; uselistorder directives
  uselistorder i32* ()* @__p__commode, { 1, 0 }
}

define i32 @function_4034a9(%_onexit_table_t* %Table) local_unnamed_addr {
dec_label_pc_4034a9:
  %0 = call i32 @_initialize_onexit_table(%_onexit_table_t* %Table), !insn.addr !1482
  ret i32 %0, !insn.addr !1482

; uselistorder directives
  uselistorder i32 (%_onexit_table_t*)* @_initialize_onexit_table, { 2, 0, 1 }
}

define i32 @function_4034af(%_onexit_table_t* %Table, i32 ()* %Function) local_unnamed_addr {
dec_label_pc_4034af:
  %0 = call i32 @_register_onexit_function(%_onexit_table_t* %Table, i32 ()* %Function), !insn.addr !1483
  ret i32 %0, !insn.addr !1483

; uselistorder directives
  uselistorder i32 (%_onexit_table_t*, i32 ()*)* @_register_onexit_function, { 1, 0 }
}

define i32 @function_4034b5(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_4034b5:
  %0 = call i32 @_crt_atexit(i32 %arg1, i32 %arg2), !insn.addr !1484
  ret i32 %0, !insn.addr !1484

; uselistorder directives
  uselistorder i32 (i32, i32)* @_crt_atexit, { 1, 0 }
}

define void @function_4034bb(i32* %ptr) local_unnamed_addr {
dec_label_pc_4034bb:
  call void @free(i32* %ptr), !insn.addr !1485
  ret void, !insn.addr !1485

; uselistorder directives
  uselistorder void (i32*)* @free, { 1, 0 }
}

define i32 @function_4034c1(i32* %CurrentState, i32 %NewValue, i32 %Mask) local_unnamed_addr {
dec_label_pc_4034c1:
  %0 = call i32 @_controlfp_s(i32* %CurrentState, i32 %NewValue, i32 %Mask), !insn.addr !1486
  ret i32 %0, !insn.addr !1486

; uselistorder directives
  uselistorder i32 (i32*, i32, i32)* @_controlfp_s, { 1, 0 }
}

define i32 @function_4034c7() local_unnamed_addr {
dec_label_pc_4034c7:
  %0 = call i32 @terminate(), !insn.addr !1487
  ret i32 %0, !insn.addr !1487

; uselistorder directives
  uselistorder i32 ()* @terminate, { 1, 0 }
}

define i32 @function_4034cd(i32 %arg1) local_unnamed_addr {
dec_label_pc_4034cd:
  %0 = alloca i32
  %merge.reg2mem = alloca i32, !insn.addr !1488
  %1 = load i32, i32* %0
  %2 = load i32, i32* @global_var_40641c, align 4, !insn.addr !1489
  %3 = icmp slt i32 %2, 1, !insn.addr !1490
  br i1 %3, label %dec_label_pc_403540, label %dec_label_pc_4034da, !insn.addr !1490

dec_label_pc_4034da:                              ; preds = %dec_label_pc_4034cd
  %4 = icmp ne i32 %arg1, -1073741132, !insn.addr !1491
  %5 = icmp eq i32 %arg1, -1073741131, !insn.addr !1492
  %6 = icmp eq i1 %5, false, !insn.addr !1493
  %or.cond = icmp eq i1 %4, %6
  br i1 %or.cond, label %dec_label_pc_403540, label %dec_label_pc_4034ec, !insn.addr !1494

dec_label_pc_4034ec:                              ; preds = %dec_label_pc_4034da
  call void @__asm_stmxcsr(i32 %1), !insn.addr !1495
  %7 = xor i32 %1, 63, !insn.addr !1496
  %8 = and i32 %7, 129
  %9 = icmp eq i32 %8, 0, !insn.addr !1497
  store i32 -1073741680, i32* %merge.reg2mem, !insn.addr !1498
  br i1 %9, label %dec_label_pc_403501, label %dec_label_pc_4034fa, !insn.addr !1498

dec_label_pc_4034fa:                              ; preds = %dec_label_pc_4034ec
  %10 = and i32 %7, 516, !insn.addr !1499
  %11 = icmp eq i32 %10, 0, !insn.addr !1499
  %12 = icmp eq i1 %11, false, !insn.addr !1500
  store i32 -1073741682, i32* %merge.reg2mem, !insn.addr !1500
  br i1 %12, label %dec_label_pc_403508, label %dec_label_pc_403501, !insn.addr !1500

dec_label_pc_403501:                              ; preds = %dec_label_pc_403540, %dec_label_pc_4034ec, %dec_label_pc_403508, %dec_label_pc_40352b, %dec_label_pc_40351d, %dec_label_pc_40350f, %dec_label_pc_4034fa
  %merge.reload = load i32, i32* %merge.reg2mem
  ret i32 %merge.reload, !insn.addr !1501

dec_label_pc_403508:                              ; preds = %dec_label_pc_4034fa
  %13 = and i32 %7, 258, !insn.addr !1502
  %14 = icmp eq i32 %13, 0, !insn.addr !1502
  store i32 -1073741680, i32* %merge.reg2mem, !insn.addr !1503
  br i1 %14, label %dec_label_pc_403501, label %dec_label_pc_40350f, !insn.addr !1503

dec_label_pc_40350f:                              ; preds = %dec_label_pc_403508
  %15 = and i32 %7, 1032, !insn.addr !1504
  %16 = icmp eq i32 %15, 0, !insn.addr !1504
  %17 = icmp eq i1 %16, false, !insn.addr !1505
  store i32 -1073741679, i32* %merge.reg2mem, !insn.addr !1505
  br i1 %17, label %dec_label_pc_40351d, label %dec_label_pc_403501, !insn.addr !1505

dec_label_pc_40351d:                              ; preds = %dec_label_pc_40350f
  %18 = and i32 %7, 2064, !insn.addr !1506
  %19 = icmp eq i32 %18, 0, !insn.addr !1506
  %20 = icmp eq i1 %19, false, !insn.addr !1507
  store i32 -1073741677, i32* %merge.reg2mem, !insn.addr !1507
  br i1 %20, label %dec_label_pc_40352b, label %dec_label_pc_403501, !insn.addr !1507

dec_label_pc_40352b:                              ; preds = %dec_label_pc_40351d
  %21 = and i32 %7, 4128, !insn.addr !1508
  %22 = icmp eq i32 %21, 0, !insn.addr !1508
  %23 = icmp eq i1 %22, false, !insn.addr !1509
  store i32 -1073741681, i32* %merge.reg2mem, !insn.addr !1509
  br i1 %23, label %dec_label_pc_403540, label %dec_label_pc_403501, !insn.addr !1509

dec_label_pc_403540:                              ; preds = %dec_label_pc_4034da, %dec_label_pc_40352b, %dec_label_pc_4034cd
  store i32 %arg1, i32* %merge.reg2mem
  br label %dec_label_pc_403501

; uselistorder directives
  uselistorder i32* %merge.reg2mem, { 1, 4, 5, 6, 3, 0, 7, 2 }
  uselistorder i32 -1073741680, { 1, 0 }
  uselistorder i1 false, { 11, 12, 13, 14, 4, 25, 26, 27, 8, 15, 16, 28, 29, 30, 31, 9, 17, 32, 33, 5, 10, 24, 34, 35, 37, 38, 39, 18, 6, 7, 40, 41, 42, 43, 36, 86, 87, 19, 20, 44, 21, 3, 50, 51, 52, 53, 0, 54, 45, 46, 47, 48, 49, 77, 78, 80, 79, 81, 82, 83, 84, 85, 22, 55, 56, 57, 58, 59, 1, 2, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 23 }
  uselistorder label %dec_label_pc_403540, { 1, 0, 2 }
  uselistorder label %dec_label_pc_403501, { 0, 3, 4, 5, 2, 6, 1 }
}

define i32* @function_403545(i32* %dest, i32* %src, i32 %n) local_unnamed_addr {
dec_label_pc_403545:
  %0 = call i32* @memcpy(i32* %dest, i32* %src, i32 %n), !insn.addr !1510
  ret i32* %0, !insn.addr !1510

; uselistorder directives
  uselistorder i32* (i32*, i32*, i32)* @memcpy, { 7, 6, 4, 5, 3, 2, 1, 0 }
}

define i32* @function_40354b(i32* %dest, i32* %src, i32 %n) local_unnamed_addr {
dec_label_pc_40354b:
  %0 = call i32* @memmove(i32* %dest, i32* %src, i32 %n), !insn.addr !1511
  ret i32* %0, !insn.addr !1511

; uselistorder directives
  uselistorder i32* (i32*, i32*, i32)* @memmove, { 1, 0 }
}

define i32 @function_403560() local_unnamed_addr {
dec_label_pc_403560:
  %0 = alloca i32
  %1 = load i32, i32* %0
  %2 = add i32 %1, -68, !insn.addr !1512
  %3 = inttoptr i32 %2 to i32*, !insn.addr !1512
  %4 = load i32, i32* %3, align 4, !insn.addr !1512
  %5 = and i32 %4, 1, !insn.addr !1513
  %6 = icmp eq i32 %5, 0, !insn.addr !1513
  br i1 %6, label %dec_label_pc_403578, label %dec_label_pc_40356c, !insn.addr !1514

dec_label_pc_40356c:                              ; preds = %dec_label_pc_403560
  %7 = and i32 %4, -2, !insn.addr !1515
  store i32 %7, i32* %3, align 4, !insn.addr !1515
  ret i32 1, !insn.addr !1516

dec_label_pc_403578:                              ; preds = %dec_label_pc_403560
  ret i32 0, !insn.addr !1517

; uselistorder directives
  uselistorder i32 -2, { 3, 4, 5, 0, 6, 1, 2 }
  uselistorder i32 0, { 18, 159, 160, 161, 162, 163, 164, 39, 184, 19, 102, 185, 186, 187, 103, 40, 41, 42, 43, 20, 188, 189, 44, 45, 165, 166, 21, 46, 47, 183, 48, 182, 104, 0, 190, 50, 191, 1, 192, 49, 167, 168, 29, 169, 170, 193, 51, 2, 194, 3, 4, 53, 236, 34, 33, 237, 238, 239, 52, 22, 171, 172, 173, 195, 196, 174, 26, 5, 175, 54, 176, 55, 56, 59, 200, 201, 202, 6, 203, 58, 7, 8, 27, 36, 205, 204, 206, 207, 208, 9, 57, 157, 60, 61, 177, 63, 197, 198, 199, 10, 62, 64, 65, 68, 35, 158, 235, 66, 69, 70, 23, 24, 11, 12, 13, 67, 71, 72, 178, 73, 179, 74, 75, 76, 180, 77, 78, 81, 209, 210, 211, 15, 212, 79, 14, 37, 213, 16, 28, 30, 214, 215, 80, 17, 38, 216, 25, 217, 218, 219, 220, 222, 221, 82, 83, 223, 31, 224, 225, 226, 227, 228, 229, 230, 32, 85, 84, 86, 87, 97, 231, 91, 90, 89, 94, 93, 96, 95, 92, 88, 232, 233, 234, 98, 99, 100, 101, 181, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156 }
}

define i32 @function_403580(i32 %arg1) local_unnamed_addr {
dec_label_pc_403580:
  %0 = call i32 @function_402805(), !insn.addr !1518
  %1 = call i32 @__CxxFrameHandler3(), !insn.addr !1519
  ret i32 %1, !insn.addr !1519
}

define i32 @function_4035a0() local_unnamed_addr {
dec_label_pc_4035a0:
  %0 = alloca i32
  %1 = load i32, i32* %0
  ret i32 %1, !insn.addr !1520
}

define i32 @function_4035af(i32 %arg1) local_unnamed_addr {
dec_label_pc_4035af:
  %0 = call i32 @function_402805(), !insn.addr !1521
  %1 = call i32 @__CxxFrameHandler3(), !insn.addr !1522
  ret i32 %1, !insn.addr !1522
}

define i32 @function_4035d0() local_unnamed_addr {
dec_label_pc_4035d0:
  %0 = call i32 @function_401d50(), !insn.addr !1523
  ret i32 %0, !insn.addr !1523
}

define i32 @function_4035d8() local_unnamed_addr {
dec_label_pc_4035d8:
  %0 = call i32 @function_401ce0(), !insn.addr !1524
  ret i32 %0, !insn.addr !1524
}

define i32 @function_4035e7(i32 %arg1) local_unnamed_addr {
dec_label_pc_4035e7:
  %0 = call i32 @function_402805(), !insn.addr !1525
  %1 = call i32 @__CxxFrameHandler3(), !insn.addr !1526
  ret i32 %1, !insn.addr !1526
}

define i32 @function_403612(i32 %arg1) local_unnamed_addr {
dec_label_pc_403612:
  %0 = call i32 @function_402805(), !insn.addr !1527
  %1 = call i32 @__CxxFrameHandler3(), !insn.addr !1528
  ret i32 %1, !insn.addr !1528
}

define i32 @function_403632(i32 %arg1) local_unnamed_addr {
dec_label_pc_403632:
  %0 = call i32 @function_402805(), !insn.addr !1529
  %1 = call i32 @__CxxFrameHandler3(), !insn.addr !1530
  ret i32 %1, !insn.addr !1530
}

define i32 @function_403650() local_unnamed_addr {
dec_label_pc_403650:
  %0 = alloca i32
  %1 = load i32, i32* %0
  ret i32 %1, !insn.addr !1531
}

define i32 @function_40365b() local_unnamed_addr {
dec_label_pc_40365b:
  %0 = alloca i32
  %1 = load i32, i32* %0
  ret i32 %1, !insn.addr !1532
}

define i32 @function_403666() local_unnamed_addr {
dec_label_pc_403666:
  %0 = alloca i32
  %1 = load i32, i32* %0
  ret i32 %1, !insn.addr !1533
}

define i32 @function_403671() local_unnamed_addr {
dec_label_pc_403671:
  %0 = alloca i32
  %1 = load i32, i32* %0
  ret i32 %1, !insn.addr !1534
}

define i32 @function_40367c() local_unnamed_addr {
dec_label_pc_40367c:
  %0 = alloca i32
  %1 = load i32, i32* %0
  ret i32 %1, !insn.addr !1535

; uselistorder directives
  uselistorder i32 1, { 56, 55, 54, 53, 52, 51, 210, 282, 50, 234, 58, 49, 284, 285, 221, 286, 59, 239, 238, 48, 47, 46, 45, 60, 242, 241, 240, 61, 44, 287, 43, 211, 65, 64, 63, 62, 245, 244, 243, 42, 246, 41, 292, 293, 248, 247, 66, 57, 40, 67, 39, 288, 68, 69, 289, 71, 70, 38, 213, 73, 217, 283, 75, 74, 72, 37, 290, 76, 291, 77, 79, 78, 327, 220, 222, 223, 224, 250, 233, 249, 84, 83, 82, 81, 80, 36, 225, 226, 35, 34, 251, 33, 252, 86, 85, 87, 253, 88, 32, 218, 294, 254, 259, 258, 257, 256, 255, 105, 104, 103, 102, 101, 100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 31, 30, 29, 261, 260, 107, 106, 316, 317, 318, 319, 320, 116, 321, 117, 227, 322, 323, 212, 125, 228, 324, 325, 326, 229, 269, 268, 267, 231, 266, 232, 265, 264, 263, 262, 136, 135, 134, 133, 132, 131, 130, 129, 128, 127, 126, 124, 123, 122, 121, 120, 119, 118, 115, 114, 113, 112, 111, 110, 109, 108, 28, 137, 27, 26, 6, 270, 25, 5, 271, 138, 24, 272, 139, 23, 219, 295, 275, 274, 273, 161, 160, 159, 158, 157, 156, 155, 154, 153, 152, 151, 150, 149, 148, 147, 146, 145, 144, 143, 142, 141, 140, 22, 7, 4, 296, 214, 297, 277, 276, 173, 172, 171, 170, 169, 168, 167, 166, 165, 164, 163, 162, 21, 298, 215, 178, 177, 176, 175, 174, 20, 299, 300, 230, 181, 180, 179, 19, 301, 183, 182, 18, 302, 303, 304, 305, 216, 192, 191, 190, 189, 188, 187, 186, 185, 184, 17, 315, 278, 193, 16, 306, 307, 308, 309, 310, 311, 312, 313, 314, 280, 279, 209, 208, 207, 206, 205, 204, 203, 202, 201, 200, 199, 198, 197, 196, 195, 194, 15, 14, 3, 13, 2, 281, 12, 1, 11, 10, 9, 8, 0, 235, 236, 237 }
}

define i32 @function_40368e(i32 %arg1) local_unnamed_addr {
dec_label_pc_40368e:
  %0 = call i32 @function_402805(), !insn.addr !1536
  %1 = call i32 @function_402805(), !insn.addr !1537
  %2 = call i32 @__CxxFrameHandler3(), !insn.addr !1538
  ret i32 %2, !insn.addr !1538
}

define i32 @function_4036c0() local_unnamed_addr {
dec_label_pc_4036c0:
  %0 = call i32 @"??1_Lockit@std@@QAE@XZ"(), !insn.addr !1539
  ret i32 %0, !insn.addr !1539

; uselistorder directives
  uselistorder i32 ()* @"??1_Lockit@std@@QAE@XZ", { 1, 0 }
}

define i32 @function_4036c9() local_unnamed_addr {
dec_label_pc_4036c9:
  %0 = call i32 @function_402520(), !insn.addr !1540
  ret i32 %0, !insn.addr !1540
}

define i32 @function_4036d8(i32 %arg1) local_unnamed_addr {
dec_label_pc_4036d8:
  %0 = call i32 @function_402805(), !insn.addr !1541
  %1 = call i32 @function_402805(), !insn.addr !1542
  %2 = call i32 @__CxxFrameHandler3(), !insn.addr !1543
  ret i32 %2, !insn.addr !1543
}

define i32 @function_403700() local_unnamed_addr {
dec_label_pc_403700:
  %0 = call i32 @function_401d50(), !insn.addr !1544
  ret i32 %0, !insn.addr !1544

; uselistorder directives
  uselistorder i32 ()* @function_401d50, { 1, 0 }
}

define i32 @function_403708() local_unnamed_addr {
dec_label_pc_403708:
  %0 = call i32 @function_402730(), !insn.addr !1545
  ret i32 %0, !insn.addr !1545
}

define i32 @function_403710() local_unnamed_addr {
dec_label_pc_403710:
  %0 = call i32 @function_401e20(), !insn.addr !1546
  ret i32 %0, !insn.addr !1546
}

define i32 @function_40371f(i32 %arg1) local_unnamed_addr {
dec_label_pc_40371f:
  %0 = call i32 @function_402805(), !insn.addr !1547
  %1 = call i32 @__CxxFrameHandler3(), !insn.addr !1548
  ret i32 %1, !insn.addr !1548
}

define i32 @function_403742(i32 %arg1) local_unnamed_addr {
dec_label_pc_403742:
  %0 = call i32 @function_402805(), !insn.addr !1549
  %1 = call i32 @__CxxFrameHandler3(), !insn.addr !1550
  ret i32 %1, !insn.addr !1550

; uselistorder directives
  uselistorder i32 ()* @__CxxFrameHandler3, { 1, 5, 7, 6, 2, 0, 3, 8, 4, 9 }
  uselistorder i32 ()* @function_402805, { 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
}

define i32 @function_40375d() local_unnamed_addr {
dec_label_pc_40375d:
  %0 = call i32 @function_4027b2(), !insn.addr !1551
  ret i32 %0, !insn.addr !1551
}

declare i32 @UnhandledExceptionFilter(%_EXCEPTION_POINTERS*) local_unnamed_addr

declare i32* @GetModuleHandleW(i16*) local_unnamed_addr

declare i1 @IsDebuggerPresent() local_unnamed_addr

declare void @InitializeSListHead(i32*) local_unnamed_addr

declare void @GetSystemTimeAsFileTime(%_FILETIME*) local_unnamed_addr

declare i32 @GetCurrentThreadId() local_unnamed_addr

declare i32 @GetCurrentProcessId() local_unnamed_addr

declare i1 @QueryPerformanceCounter(%_LARGE_INTEGER*) local_unnamed_addr

declare i1 @IsProcessorFeaturePresent(i32) local_unnamed_addr

declare i1 @TerminateProcess(i32*, i32) local_unnamed_addr

declare i32* @GetCurrentProcess() local_unnamed_addr

declare i32 (%_EXCEPTION_POINTERS*)* @SetUnhandledExceptionFilter(i32 (%_EXCEPTION_POINTERS*)*) local_unnamed_addr

declare i32 @"??1_Lockit@std@@QAE@XZ"() local_unnamed_addr

declare i32 @"??0_Lockit@std@@QAE@H@Z"(i32) local_unnamed_addr

declare i32 @"?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ"() local_unnamed_addr

declare i32 @"?snextc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ"(i32, i8) local_unnamed_addr

declare i32 @"?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z"(i32, i32, i32) local_unnamed_addr

declare i32 @"?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z"(i32) local_unnamed_addr

declare i32 @"?sgetc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ"(i32, i32) local_unnamed_addr

declare i32 @"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z"() local_unnamed_addr

declare i32 @"?getloc@ios_base@std@@QBE?AVlocale@2@XZ"(i32*) local_unnamed_addr

declare i32 @"?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z"(i32*, i32) local_unnamed_addr

declare i32 @"??Bid@locale@std@@QAEIXZ"(i32) local_unnamed_addr

declare i32 @"?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z"() local_unnamed_addr

declare i32 @"?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z"(i32) local_unnamed_addr

declare i32 @"?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z"() local_unnamed_addr

declare i32 @"?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ"() local_unnamed_addr

declare i32 @"?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ"() local_unnamed_addr

declare i32 @"?uncaught_exception@std@@YA_NXZ"() local_unnamed_addr

declare i32 @"?_Xlength_error@std@@YAXPBD@Z"(i8*) local_unnamed_addr

declare i32 @"?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z"(i32) local_unnamed_addr

declare i32* @memset(i32*, i32, i32) local_unnamed_addr

declare i32* @memmove(i32*, i32*, i32) local_unnamed_addr

declare i32 @__current_exception_context() local_unnamed_addr

declare i32 @__current_exception(i32, i32, i32) local_unnamed_addr

declare i32 @_except_handler4_common() local_unnamed_addr

declare void @_CxxThrowException(i32*, i32*) local_unnamed_addr

declare i32 @__std_terminate() local_unnamed_addr

declare i32 @__std_exception_copy(i32) local_unnamed_addr

declare i32 @__std_exception_destroy(i32) local_unnamed_addr

declare i32 @__CxxFrameHandler3() local_unnamed_addr

declare i32* @memcpy(i32*, i32*, i32) local_unnamed_addr

declare i32* @malloc(i32) local_unnamed_addr

declare i32 @_callnewh(i32) local_unnamed_addr

declare i32 @_set_new_mode(i32) local_unnamed_addr

declare void @free(i32*) local_unnamed_addr

declare i32 @_configthreadlocale(i32) local_unnamed_addr

declare void @__setusermatherr(i32) local_unnamed_addr

declare i32 @_register_onexit_function(%_onexit_table_t*, i32 ()*) local_unnamed_addr

declare i32 @_crt_atexit(i32, i32) local_unnamed_addr

declare i32 @_initialize_onexit_table(%_onexit_table_t*) local_unnamed_addr

declare i32 @_controlfp_s(i32*, i32, i32) local_unnamed_addr

declare void @_invalid_parameter_noinfo_noreturn() local_unnamed_addr

declare void @_register_thread_local_exe_atexit_callback(void (i32*, i32, i32*)*) local_unnamed_addr

declare i32* @__p___argc() local_unnamed_addr

declare i32 @system(i8*) local_unnamed_addr

declare void @_c_exit() local_unnamed_addr

declare void @_cexit() local_unnamed_addr

declare void @_exit(i32) local_unnamed_addr

declare void @exit(i32) local_unnamed_addr

declare i32 @_initterm_e(i32 ()**, i32 ()**) local_unnamed_addr

declare void @_initterm(void ()**, void ()**) local_unnamed_addr

declare i8** @_get_initial_narrow_environment() local_unnamed_addr

declare i32 @_initialize_narrow_environment() local_unnamed_addr

declare i32 @_configure_narrow_argv(i32) local_unnamed_addr

declare i8*** @__p___argv() local_unnamed_addr

declare void @_set_app_type(i32) local_unnamed_addr

declare i32 @terminate() local_unnamed_addr

declare i32 @_seh_filter_exe(i32, %_EXCEPTION_POINTERS*) local_unnamed_addr

declare i32* @__p__commode() local_unnamed_addr

declare i32 @_set_fmode(i32) local_unnamed_addr

; Function Attrs: nounwind readnone speculatable
declare i8 @llvm.ctpop.i8(i8) #0

declare i32 @__asm_int3() local_unnamed_addr

declare i128 @__asm_xorps(i128, i128) local_unnamed_addr

declare void @__asm_movq(i64, i128) local_unnamed_addr

declare i128 @__asm_movups(i128) local_unnamed_addr

declare void @__asm_movups.1(i128, i128) local_unnamed_addr

declare void @__asm_movlpd(i64, i128) local_unnamed_addr

declare void @__asm_int(i8) local_unnamed_addr

declare %0 @__asm_cpuid(i32) local_unnamed_addr

declare %1 @__asm_cpuid.2(i32) local_unnamed_addr

declare %2 @__asm_cpuid.3(i32) local_unnamed_addr

declare void @__asm_xgetbv(i32) local_unnamed_addr

declare i32 @__asm_fnclex() local_unnamed_addr

declare void @__asm_stmxcsr(i32) local_unnamed_addr

declare i32 @__readfsdword(i32) local_unnamed_addr

declare void @__writefsdword(i32, i32) local_unnamed_addr

attributes #0 = { nounwind readnone speculatable }

!0 = !{i64 4198405}
!1 = !{i64 4198411}
!2 = !{i64 4198422}
!3 = !{i64 4198425}
!4 = !{i64 4198429}
!5 = !{i64 4198435}
!6 = !{i64 4198442}
!7 = !{i64 4198446}
!8 = !{i64 4198459}
!9 = !{i64 4198464}
!10 = !{i64 4198472}
!11 = !{i64 4198474}
!12 = !{i64 4198477}
!13 = !{i64 4198486}
!14 = !{i64 4198489}
!15 = !{i64 4198496}
!16 = !{i64 4198505}
!17 = !{i64 4198509}
!18 = !{i64 4198514}
!19 = !{i64 4198519}
!20 = !{i64 4198526}
!21 = !{i64 4198544}
!22 = !{i64 4198547}
!23 = !{i64 4198554}
!24 = !{i64 4198561}
!25 = !{i64 4198576}
!26 = !{i64 4198581}
!27 = !{i64 4198586}
!28 = !{i64 4198593}
!29 = !{i64 4198599}
!30 = !{i64 4198617}
!31 = !{i64 4198631}
!32 = !{i64 4198646}
!33 = !{i64 4198649}
!34 = !{i64 4198653}
!35 = !{i64 4198659}
!36 = !{i64 4198666}
!37 = !{i64 4198670}
!38 = !{i64 4198679}
!39 = !{i64 4198689}
!40 = !{i64 4198710}
!41 = !{i64 4198713}
!42 = !{i64 4198717}
!43 = !{i64 4198723}
!44 = !{i64 4198730}
!45 = !{i64 4198734}
!46 = !{i64 4198743}
!47 = !{i64 4198753}
!48 = !{i64 4198773}
!49 = !{i64 4198779}
!50 = !{i64 4198780}
!51 = !{i64 4198781}
!52 = !{i64 4198782}
!53 = !{i64 4198783}
!54 = !{i64 4198784}
!55 = !{i64 4198794}
!56 = !{i64 4198800}
!57 = !{i64 4198815}
!58 = !{i64 4198818}
!59 = !{i64 4198855}
!60 = !{i64 4198861}
!61 = !{i64 4198864}
!62 = !{i64 4198883}
!63 = !{i64 4198894}
!64 = !{i64 4198873}
!65 = !{i64 4198907}
!66 = !{i64 4198917}
!67 = !{i64 4198929}
!68 = !{i64 4198937}
!69 = !{i64 4198945}
!70 = !{i64 4198947}
!71 = !{i64 4198886}
!72 = !{i64 4198891}
!73 = !{i64 4198901}
!74 = !{i64 4198963}
!75 = !{i64 4198966}
!76 = !{i64 4198971}
!77 = !{i64 4198983}
!78 = !{i64 4198985}
!79 = !{i64 4198989}
!80 = !{i64 4198992}
!81 = !{i64 4198996}
!82 = !{i64 4198999}
!83 = !{i64 4199002}
!84 = !{i64 4199005}
!85 = !{i64 4199011}
!86 = !{i64 4199013}
!87 = !{i64 4199018}
!88 = !{i64 4199023}
!89 = !{i64 4199030}
!90 = !{i64 4199033}
!91 = !{i64 4199038}
!92 = !{i64 4199040}
!93 = !{i64 4199047}
!94 = !{i64 4199050}
!95 = !{i64 4199053}
!96 = !{i64 4199058}
!97 = !{i64 4199068}
!98 = !{i64 4199071}
!99 = !{i64 4199076}
!100 = !{i64 4199079}
!101 = !{i64 4199085}
!102 = !{i64 4199092}
!103 = !{i64 4199097}
!104 = !{i64 4199100}
!105 = !{i64 4199106}
!106 = !{i64 4199108}
!107 = !{i64 4199113}
!108 = !{i64 4199118}
!109 = !{i64 4199125}
!110 = !{i64 4199128}
!111 = !{i64 4199133}
!112 = !{i64 4199135}
!113 = !{i64 4199142}
!114 = !{i64 4199145}
!115 = !{i64 4199148}
!116 = !{i64 4199153}
!117 = !{i64 4199163}
!118 = !{i64 4199169}
!119 = !{i64 4199172}
!120 = !{i64 4199178}
!121 = !{i64 4199184}
!122 = !{i64 4199189}
!123 = !{i64 4199192}
!124 = !{i64 4199198}
!125 = !{i64 4199200}
!126 = !{i64 4199205}
!127 = !{i64 4199210}
!128 = !{i64 4199217}
!129 = !{i64 4199220}
!130 = !{i64 4199225}
!131 = !{i64 4199227}
!132 = !{i64 4199234}
!133 = !{i64 4199237}
!134 = !{i64 4199240}
!135 = !{i64 4199245}
!136 = !{i64 4199251}
!137 = !{i64 4199254}
!138 = !{i64 4199257}
!139 = !{i64 4199260}
!140 = !{i64 4199266}
!141 = !{i64 4199268}
!142 = !{i64 4199273}
!143 = !{i64 4199278}
!144 = !{i64 4199285}
!145 = !{i64 4199288}
!146 = !{i64 4199293}
!147 = !{i64 4199298}
!148 = !{i64 4199305}
!149 = !{i64 4199308}
!150 = !{i64 4199166}
!151 = !{i64 4199316}
!152 = !{i64 4199319}
!153 = !{i64 4199325}
!154 = !{i64 4199327}
!155 = !{i64 4199332}
!156 = !{i64 4199337}
!157 = !{i64 4199344}
!158 = !{i64 4199347}
!159 = !{i64 4199352}
!160 = !{i64 4199354}
!161 = !{i64 4199361}
!162 = !{i64 4199364}
!163 = !{i64 4199367}
!164 = !{i64 4199372}
!165 = !{i64 4199375}
!166 = !{i64 4199378}
!167 = !{i64 4199380}
!168 = !{i64 4199386}
!169 = !{i64 4199393}
!170 = !{i64 4199396}
!171 = !{i64 4199073}
!172 = !{i64 4199404}
!173 = !{i64 4199407}
!174 = !{i64 4199413}
!175 = !{i64 4199415}
!176 = !{i64 4199420}
!177 = !{i64 4199425}
!178 = !{i64 4199432}
!179 = !{i64 4199435}
!180 = !{i64 4199440}
!181 = !{i64 4199442}
!182 = !{i64 4199449}
!183 = !{i64 4199452}
!184 = !{i64 4199455}
!185 = !{i64 4199460}
!186 = !{i64 4199463}
!187 = !{i64 4199466}
!188 = !{i64 4199468}
!189 = !{i64 4199473}
!190 = !{i64 4199478}
!191 = !{i64 4199491}
!192 = !{i64 4199494}
!193 = !{i64 4199499}
!194 = !{i64 4199504}
!195 = !{i64 4199509}
!196 = !{i64 4199512}
!197 = !{i64 4199515}
!198 = !{i64 4199520}
!199 = !{i64 4199523}
!200 = !{i64 4199526}
!201 = !{i64 4199528}
!202 = !{i64 4199533}
!203 = !{i64 4199538}
!204 = !{i64 4199548}
!205 = !{i64 4199551}
!206 = !{i64 4199556}
!207 = !{i64 4199562}
!208 = !{i64 4199563}
!209 = !{i64 4199566}
!210 = !{i64 4199569}
!211 = !{i64 4199574}
!212 = !{i64 4199578}
!213 = !{i64 4199581}
!214 = !{i64 4199588}
!215 = !{i64 4199596}
!216 = !{i64 4199599}
!217 = !{i64 4199613}
!218 = !{i64 4199616}
!219 = !{i64 4199626}
!220 = !{i64 4199632}
!221 = !{i64 4199645}
!222 = !{i64 4199648}
!223 = !{i64 4199666}
!224 = !{i64 4199696}
!225 = !{i64 4199707}
!226 = !{i64 4199710}
!227 = !{i64 4199715}
!228 = !{i64 4199718}
!229 = !{i64 4199724}
!230 = !{i64 4199726}
!231 = !{i64 4199734}
!232 = !{i64 4199740}
!233 = !{i64 4199742}
!234 = !{i64 4199750}
!235 = !{i64 4199755}
!236 = !{i64 4199760}
!237 = !{i64 4199763}
!238 = !{i64 4199775}
!239 = !{i64 4199776}
!240 = !{i64 4199789}
!241 = !{i64 4199797}
!242 = !{i64 4199804}
!243 = !{i64 4199810}
!244 = !{i64 4199812}
!245 = !{i64 4199818}
!246 = !{i64 4199831}
!247 = !{i64 4199835}
!248 = !{i64 4199838}
!249 = !{i64 4199840}
!250 = !{i64 4199848}
!251 = !{i64 4199853}
!252 = !{i64 4199864}
!253 = !{i64 4199866}
!254 = !{i64 4199870}
!255 = !{i64 4199882}
!256 = !{i64 4199884}
!257 = !{i64 4199896}
!258 = !{i64 4199906}
!259 = !{i64 4199912}
!260 = !{i64 4199917}
!261 = !{i64 4199919}
!262 = !{i64 4199914}
!263 = !{i64 4199926}
!264 = !{i64 4199934}
!265 = !{i64 4199936}
!266 = !{i64 4199942}
!267 = !{i64 4199945}
!268 = !{i64 4199948}
!269 = !{i64 4199951}
!270 = !{i64 4199958}
!271 = !{i64 4199968}
!272 = !{i64 4199975}
!273 = !{i64 4199981}
!274 = !{i64 4199982}
!275 = !{i64 4199985}
!276 = !{i64 4199990}
!277 = !{i64 4199996}
!278 = !{i64 4200007}
!279 = !{i64 4200008}
!280 = !{i64 4200014}
!281 = !{i64 4200016}
!282 = !{i64 4200024}
!283 = !{i64 4200030}
!284 = !{i64 4200040}
!285 = !{i64 4200051}
!286 = !{i64 4200053}
!287 = !{i64 4200062}
!288 = !{i64 4200067}
!289 = !{i64 4200078}
!290 = !{i64 4200080}
!291 = !{i64 4200089}
!292 = !{i64 4200092}
!293 = !{i64 4200095}
!294 = !{i64 4200097}
!295 = !{i64 4200104}
!296 = !{i64 4200108}
!297 = !{i64 4200113}
!298 = !{i64 4200119}
!299 = !{i64 4200120}
!300 = !{i64 4200126}
!301 = !{i64 4200128}
!302 = !{i64 4200136}
!303 = !{i64 4200142}
!304 = !{i64 4200148}
!305 = !{i64 4200156}
!306 = !{i64 4200169}
!307 = !{i64 4200172}
!308 = !{i64 4200178}
!309 = !{i64 4200183}
!310 = !{i64 4200192}
!311 = !{i64 4200195}
!312 = !{i64 4200198}
!313 = !{i64 4200201}
!314 = !{i64 4200205}
!315 = !{i64 4200206}
!316 = !{i64 4200212}
!317 = !{i64 4200214}
!318 = !{i64 4200222}
!319 = !{i64 4200228}
!320 = !{i64 4200234}
!321 = !{i64 4200239}
!322 = !{i64 4200242}
!323 = !{i64 4200249}
!324 = !{i64 4200256}
!325 = !{i64 4200260}
!326 = !{i64 4200261}
!327 = !{i64 4200267}
!328 = !{i64 4200268}
!329 = !{i64 4200269}
!330 = !{i64 4200270}
!331 = !{i64 4200271}
!332 = !{i64 4200272}
!333 = !{i64 4200283}
!334 = !{i64 4200289}
!335 = !{i64 4200296}
!336 = !{i64 4200303}
!337 = !{i64 4200307}
!338 = !{i64 4200313}
!339 = !{i64 4200315}
!340 = !{i64 4200317}
!341 = !{i64 4200320}
!342 = !{i64 4200322}
!343 = !{i64 4200331}
!344 = !{i64 4200334}
!345 = !{i64 4200339}
!346 = !{i64 4200345}
!347 = !{i64 4200355}
!348 = !{i64 4200360}
!349 = !{i64 4200363}
!350 = !{i64 4200366}
!351 = !{i64 4200371}
!352 = !{i64 4200373}
!353 = !{i64 4200381}
!354 = !{i64 4200389}
!355 = !{i64 4200391}
!356 = !{i64 4200393}
!357 = !{i64 4200396}
!358 = !{i64 4200399}
!359 = !{i64 4200402}
!360 = !{i64 4200404}
!361 = !{i64 4200415}
!362 = !{i64 4200423}
!363 = !{i64 4200425}
!364 = !{i64 4200433}
!365 = !{i64 4200432}
!366 = !{i64 4200437}
!367 = !{i64 4200438}
!368 = !{i64 4200449}
!369 = !{i64 4200454}
!370 = !{i64 4200461}
!371 = !{i64 4200480}
!372 = !{i64 4200500}
!373 = !{i64 4200508}
!374 = !{i64 4200512}
!375 = !{i64 4200522}
!376 = !{i64 4200525}
!377 = !{i64 4200533}
!378 = !{i64 4200545}
!379 = !{i64 4200554}
!380 = !{i64 4200562}
!381 = !{i64 4200571}
!382 = !{i64 4200587}
!383 = !{i64 4200589}
!384 = !{i64 4200593}
!385 = !{i64 4200602}
!386 = !{i64 4200605}
!387 = !{i64 4200614}
!388 = !{i64 4200624}
!389 = !{i64 4200630}
!390 = !{i64 4200635}
!391 = !{i64 4200637}
!392 = !{i64 4200632}
!393 = !{i64 4200644}
!394 = !{i64 4200654}
!395 = !{i64 4200656}
!396 = !{i64 4200658}
!397 = !{i64 4200661}
!398 = !{i64 4200664}
!399 = !{i64 4200667}
!400 = !{i64 4200674}
!401 = !{i64 4200682}
!402 = !{i64 4200694}
!403 = !{i64 4200697}
!404 = !{i64 4200700}
!405 = !{i64 4200714}
!406 = !{i64 4200718}
!407 = !{i64 4200721}
!408 = !{i64 4200723}
!409 = !{i64 4200728}
!410 = !{i64 4200734}
!411 = !{i64 4200736}
!412 = !{i64 4200744}
!413 = !{i64 4200750}
!414 = !{i64 4200756}
!415 = !{i64 4200761}
!416 = !{i64 4200765}
!417 = !{i64 4200774}
!418 = !{i64 4200777}
!419 = !{i64 4200783}
!420 = !{i64 4200788}
!421 = !{i64 4200800}
!422 = !{i64 4200818}
!423 = !{i64 4200826}
!424 = !{i64 4200829}
!425 = !{i64 4200835}
!426 = !{i64 4200841}
!427 = !{i64 4200849}
!428 = !{i64 4200857}
!429 = !{i64 4200859}
!430 = !{i64 4200863}
!431 = !{i64 4200872}
!432 = !{i64 4200874}
!433 = !{i64 4200883}
!434 = !{i64 4200893}
!435 = !{i64 4200899}
!436 = !{i64 4200901}
!437 = !{i64 4200904}
!438 = !{i64 4200906}
!439 = !{i64 4200912}
!440 = !{i64 4200913}
!441 = !{i64 4200921}
!442 = !{i64 4200923}
!443 = !{i64 4200932}
!444 = !{i64 4200935}
!445 = !{i64 4200938}
!446 = !{i64 4200941}
!447 = !{i64 4200947}
!448 = !{i64 4200948}
!449 = !{i64 4200961}
!450 = !{i64 4200965}
!451 = !{i64 4200972}
!452 = !{i64 4200975}
!453 = !{i64 4200978}
!454 = !{i64 4200979}
!455 = !{i64 4200985}
!456 = !{i64 4201002}
!457 = !{i64 4201003}
!458 = !{i64 4201006}
!459 = !{i64 4201011}
!460 = !{i64 4201017}
!461 = !{i64 4201019}
!462 = !{i64 4201027}
!463 = !{i64 4201033}
!464 = !{i64 4201022}
!465 = !{i64 4201035}
!466 = !{i64 4201037}
!467 = !{i64 4201039}
!468 = !{i64 4201047}
!469 = !{i64 4201057}
!470 = !{i64 4201060}
!471 = !{i64 4201066}
!472 = !{i64 4201067}
!473 = !{i64 4201068}
!474 = !{i64 4201084}
!475 = !{i64 4201087}
!476 = !{i64 4201093}
!477 = !{i64 4201100}
!478 = !{i64 4201103}
!479 = !{i64 4201108}
!480 = !{i64 4201120}
!481 = !{i64 4201121}
!482 = !{i64 4201130}
!483 = !{i64 4201136}
!484 = !{i64 4201143}
!485 = !{i64 4201148}
!486 = !{i64 4201150}
!487 = !{i64 4201151}
!488 = !{i64 4201154}
!489 = !{i64 4201182}
!490 = !{i64 4201185}
!491 = !{i64 4201187}
!492 = !{i64 4201188}
!493 = !{i64 4201190}
!494 = !{i64 4201194}
!495 = !{i64 4201199}
!496 = !{i64 4201202}
!497 = !{i64 4201207}
!498 = !{i64 4201213}
!499 = !{i64 4201215}
!500 = !{i64 4201210}
!501 = !{i64 4201217}
!502 = !{i64 4201233}
!503 = !{i64 4201235}
!504 = !{i64 4201238}
!505 = !{i64 4201240}
!506 = !{i64 4201243}
!507 = !{i64 4201251}
!508 = !{i64 4201254}
!509 = !{i64 4201262}
!510 = !{i64 4201288}
!511 = !{i64 4201291}
!512 = !{i64 4201293}
!513 = !{i64 4201297}
!514 = !{i64 4201303}
!515 = !{i64 4201306}
!516 = !{i64 4201310}
!517 = !{i64 4201308}
!518 = !{i64 4201316}
!519 = !{i64 4201326}
!520 = !{i64 4201329}
!521 = !{i64 4201353}
!522 = !{i64 4201372}
!523 = !{i64 4201376}
!524 = !{i64 4201381}
!525 = !{i64 4201392}
!526 = !{i64 4201384}
!527 = !{i64 4201396}
!528 = !{i64 4201398}
!529 = !{i64 4201404}
!530 = !{i64 4201407}
!531 = !{i64 4201411}
!532 = !{i64 4201415}
!533 = !{i64 4201418}
!534 = !{i64 4201421}
!535 = !{i64 4201427}
!536 = !{i64 4201430}
!537 = !{i64 4201432}
!538 = !{i64 4201435}
!539 = !{i64 4201437}
!540 = !{i64 4201440}
!541 = !{i64 4201394}
!542 = !{i64 4201447}
!543 = !{i64 4201450}
!544 = !{i64 4201452}
!545 = !{i64 4201455}
!546 = !{i64 4201458}
!547 = !{i64 4201462}
!548 = !{i64 4201468}
!549 = !{i64 4201473}
!550 = !{i64 4201471}
!551 = !{i64 4201477}
!552 = !{i64 4201479}
!553 = !{i64 4201481}
!554 = !{i64 4201483}
!555 = !{i64 4201489}
!556 = !{i64 4201492}
!557 = !{i64 4201496}
!558 = !{i64 4201500}
!559 = !{i64 4201503}
!560 = !{i64 4201506}
!561 = !{i64 4201512}
!562 = !{i64 4201515}
!563 = !{i64 4201524}
!564 = !{i64 4201527}
!565 = !{i64 4201536}
!566 = !{i64 4201539}
!567 = !{i64 4201547}
!568 = !{i64 4201589}
!569 = !{i64 4201598}
!570 = !{i64 4201600}
!571 = !{i64 4201606}
!572 = !{i64 4201619}
!573 = !{i64 4201628}
!574 = !{i64 4201630}
!575 = !{i64 4201634}
!576 = !{i64 4201664}
!577 = !{i64 4201667}
!578 = !{i64 4201681}
!579 = !{i64 4201696}
!580 = !{i64 4201706}
!581 = !{i64 4201712}
!582 = !{i64 4201722}
!583 = !{i64 4201725}
!584 = !{i64 4201733}
!585 = !{i64 4201739}
!586 = !{i64 4201741}
!587 = !{i64 4201745}
!588 = !{i64 4201762}
!589 = !{i64 4201765}
!590 = !{i64 4201769}
!591 = !{i64 4201771}
!592 = !{i64 4201773}
!593 = !{i64 4201775}
!594 = !{i64 4201778}
!595 = !{i64 4201781}
!596 = !{i64 4201793}
!597 = !{i64 4201808}
!598 = !{i64 4201818}
!599 = !{i64 4201824}
!600 = !{i64 4201833}
!601 = !{i64 4201836}
!602 = !{i64 4201846}
!603 = !{i64 4201849}
!604 = !{i64 4201853}
!605 = !{i64 4201855}
!606 = !{i64 4201857}
!607 = !{i64 4201859}
!608 = !{i64 4201862}
!609 = !{i64 4201865}
!610 = !{i64 4201876}
!611 = !{i64 4201888}
!612 = !{i64 4201893}
!613 = !{i64 4201898}
!614 = !{i64 4201905}
!615 = !{i64 4201911}
!616 = !{i64 4201929}
!617 = !{i64 4201942}
!618 = !{i64 4201958}
!619 = !{i64 4201961}
!620 = !{i64 4201965}
!621 = !{i64 4201971}
!622 = !{i64 4201978}
!623 = !{i64 4201982}
!624 = !{i64 4201991}
!625 = !{i64 4202001}
!626 = !{i64 4202016}
!627 = !{i64 4202019}
!628 = !{i64 4202021}
!629 = !{i64 4202023}
!630 = !{i64 4202040}
!631 = !{i64 4202048}
!632 = !{i64 4202058}
!633 = !{i64 4202064}
!634 = !{i64 4202085}
!635 = !{i64 4202088}
!636 = !{i64 4202118}
!637 = !{i64 4202144}
!638 = !{i64 4202156}
!639 = !{i64 4202166}
!640 = !{i64 4202186}
!641 = !{i64 4202187}
!642 = !{i64 4202218}
!643 = !{i64 4202227}
!644 = !{i64 4202241}
!645 = !{i64 4202245}
!646 = !{i64 4202265}
!647 = !{i64 4202268}
!648 = !{i64 4202274}
!649 = !{i64 4202277}
!650 = !{i64 4202483}
!651 = !{i64 4202283}
!652 = !{i64 4202286}
!653 = !{i64 4202292}
!654 = !{i64 4202298}
!655 = !{i64 4202301}
!656 = !{i64 4202306}
!657 = !{i64 4202312}
!658 = !{i64 4202318}
!659 = !{i64 4202335}
!660 = !{i64 4202351}
!661 = !{i64 4202349}
!662 = !{i64 4202357}
!663 = !{i64 4202360}
!664 = !{i64 4202366}
!665 = !{i64 4202368}
!666 = !{i64 4202371}
!667 = !{i64 4202376}
!668 = !{i64 4202382}
!669 = !{i64 4202384}
!670 = !{i64 4202385}
!671 = !{i64 4202386}
!672 = !{i64 4202391}
!673 = !{i64 4202394}
!674 = !{i64 4202399}
!675 = !{i64 4202467}
!676 = !{i64 4202468}
!677 = !{i64 4202469}
!678 = !{i64 4202474}
!679 = !{i64 4202490}
!680 = !{i64 4202495}
!681 = !{i64 4202514}
!682 = !{i64 4202049}
!683 = !{i64 4202528}
!684 = !{i64 4202535}
!685 = !{i64 4202547}
!686 = !{i64 4202553}
!687 = !{i64 4202556}
!688 = !{i64 4202560}
!689 = !{i64 4202562}
!690 = !{i64 4202563}
!691 = !{i64 4202584}
!692 = !{i64 4202591}
!693 = !{i64 4202612}
!694 = !{i64 4202616}
!695 = !{i64 4202619}
!696 = !{i64 4202621}
!697 = !{i64 4202622}
!698 = !{i64 4202625}
!699 = !{i64 4202632}
!700 = !{i64 4202634}
!701 = !{i64 4202639}
!702 = !{i64 4202642}
!703 = !{i64 4202644}
!704 = !{i64 4202659}
!705 = !{i64 4202664}
!706 = !{i64 4202668}
!707 = !{i64 4202674}
!708 = !{i64 4202681}
!709 = !{i64 4202693}
!710 = !{i64 4202696}
!711 = !{i64 4202698}
!712 = !{i64 4202703}
!713 = !{i64 4202709}
!714 = !{i64 4202711}
!715 = !{i64 4202714}
!716 = !{i64 4202719}
!717 = !{i64 4202725}
!718 = !{i64 4202727}
!719 = !{i64 4202733}
!720 = !{i64 4202734}
!721 = !{i64 4202735}
!722 = !{i64 4202740}
!723 = !{i64 4202743}
!724 = !{i64 4202779}
!725 = !{i64 4202786}
!726 = !{i64 4202788}
!727 = !{i64 4202789}
!728 = !{i64 4202791}
!729 = !{i64 4202766}
!730 = !{i64 4202793}
!731 = !{i64 4202798}
!732 = !{i64 4202799}
!733 = !{i64 4202806}
!734 = !{i64 4202811}
!735 = !{i64 4202828}
!736 = !{i64 4202898}
!737 = !{i64 4202916}
!738 = !{i64 4202941}
!739 = !{i64 4202948}
!740 = !{i64 4202962}
!741 = !{i64 4202964}
!742 = !{i64 4202971}
!743 = !{i64 4202973}
!744 = !{i64 4202974}
!745 = !{i64 4203040}
!746 = !{i64 4203063}
!747 = !{i64 4203073}
!748 = !{i64 4203075}
!749 = !{i64 4203076}
!750 = !{i64 4203078}
!751 = !{i64 4203080}
!752 = !{i64 4203085}
!753 = !{i64 4203086}
!754 = !{i64 4203093}
!755 = !{i64 4203182}
!756 = !{i64 4203196}
!757 = !{i64 4203202}
!758 = !{i64 4203204}
!759 = !{i64 4203189}
!760 = !{i64 4203167}
!761 = !{i64 4203216}
!762 = !{i64 4203218}
!763 = !{i64 4203220}
!764 = !{i64 4203222}
!765 = !{i64 4203225}
!766 = !{i64 4203228}
!767 = !{i64 4203231}
!768 = !{i64 4203363}
!769 = !{i64 4203377}
!770 = !{i64 4203384}
!771 = !{i64 4203399}
!772 = !{i64 4203405}
!773 = !{i64 4203411}
!774 = !{i64 4203414}
!775 = !{i64 4203420}
!776 = !{i64 4203426}
!777 = !{i64 4203429}
!778 = !{i64 4203434}
!779 = !{i64 4203440}
!780 = !{i64 4203446}
!781 = !{i64 4203452}
!782 = !{i64 4203453}
!783 = !{i64 4203454}
!784 = !{i64 4203459}
!785 = !{i64 4203464}
!786 = !{i64 4203467}
!787 = !{i64 4203483}
!788 = !{i64 4203491}
!789 = !{i64 4203504}
!790 = !{i64 4203514}
!791 = !{i64 4203520}
!792 = !{i64 4203538}
!793 = !{i64 4203541}
!794 = !{i64 4203555}
!795 = !{i64 4203568}
!796 = !{i64 4203579}
!797 = !{i64 4203582}
!798 = !{i64 4203590}
!799 = !{i64 4203593}
!800 = !{i64 4203596}
!801 = !{i64 4203598}
!802 = !{i64 4203601}
!803 = !{i64 4203604}
!804 = !{i64 4203606}
!805 = !{i64 4203612}
!806 = !{i64 4203616}
!807 = !{i64 4203618}
!808 = !{i64 4203624}
!809 = !{i64 4203627}
!810 = !{i64 4203629}
!811 = !{i64 4203632}
!812 = !{i64 4203635}
!813 = !{i64 4203637}
!814 = !{i64 4203639}
!815 = !{i64 4203642}
!816 = !{i64 4203644}
!817 = !{i64 4203651}
!818 = !{i64 4203660}
!819 = !{i64 4203663}
!820 = !{i64 4203665}
!821 = !{i64 4203676}
!822 = !{i64 4203691}
!823 = !{i64 4203694}
!824 = !{i64 4203703}
!825 = !{i64 4203711}
!826 = !{i64 4203714}
!827 = !{i64 4203730}
!828 = !{i64 4203738}
!829 = !{i64 4203739}
!830 = !{i64 4203776}
!831 = !{i64 4203782}
!832 = !{i64 4203788}
!833 = !{i64 4203796}
!834 = !{i64 4203806}
!835 = !{i64 4203810}
!836 = !{i64 4203820}
!837 = !{i64 4203824}
!838 = !{i64 4203834}
!839 = !{i64 4203840}
!840 = !{i64 4203855}
!841 = !{i64 4203858}
!842 = !{i64 4203903}
!843 = !{i64 4203914}
!844 = !{i64 4203930}
!845 = !{i64 4203932}
!846 = !{i64 4203941}
!847 = !{i64 4203949}
!848 = !{i64 4203955}
!849 = !{i64 4203960}
!850 = !{i64 4203968}
!851 = !{i64 4203974}
!852 = !{i64 4203976}
!853 = !{i64 4203978}
!854 = !{i64 4203985}
!855 = !{i64 4203987}
!856 = !{i64 4203991}
!857 = !{i64 4203993}
!858 = !{i64 4203995}
!859 = !{i64 4204012}
!860 = !{i64 4204021}
!861 = !{i64 4204024}
!862 = !{i64 4204036}
!863 = !{i64 4204029}
!864 = !{i64 4204038}
!865 = !{i64 4204040}
!866 = !{i64 4204044}
!867 = !{i64 4204057}
!868 = !{i64 4204060}
!869 = !{i64 4204064}
!870 = !{i64 4204072}
!871 = !{i64 4204074}
!872 = !{i64 4204004}
!873 = !{i64 4204076}
!874 = !{i64 4204079}
!875 = !{i64 4204081}
!876 = !{i64 4204084}
!877 = !{i64 4204092}
!878 = !{i64 4204095}
!879 = !{i64 4204098}
!880 = !{i64 4204102}
!881 = !{i64 4204104}
!882 = !{i64 4204107}
!883 = !{i64 4204113}
!884 = !{i64 4204115}
!885 = !{i64 4204120}
!886 = !{i64 4204125}
!887 = !{i64 4204132}
!888 = !{i64 4204135}
!889 = !{i64 4204140}
!890 = !{i64 4204142}
!891 = !{i64 4204149}
!892 = !{i64 4204152}
!893 = !{i64 4204155}
!894 = !{i64 4204165}
!895 = !{i64 4204173}
!896 = !{i64 4204176}
!897 = !{i64 4204180}
!898 = !{i64 4204231}
!899 = !{i64 4204237}
!900 = !{i64 4204240}
!901 = !{i64 4204248}
!902 = !{i64 4204256}
!903 = !{i64 4204263}
!904 = !{i64 4204265}
!905 = !{i64 4204271}
!906 = !{i64 4204307}
!907 = !{i64 4204310}
!908 = !{i64 4204324}
!909 = !{i64 4204336}
!910 = !{i64 4204346}
!911 = !{i64 4204352}
!912 = !{i64 4204361}
!913 = !{i64 4204364}
!914 = !{i64 4204381}
!915 = !{i64 4204384}
!916 = !{i64 4204388}
!917 = !{i64 4204390}
!918 = !{i64 4204392}
!919 = !{i64 4204394}
!920 = !{i64 4204397}
!921 = !{i64 4204400}
!922 = !{i64 4204411}
!923 = !{i64 4204417}
!924 = !{i64 4204429}
!925 = !{i64 4204441}
!926 = !{i64 4204443}
!927 = !{i64 4204453}
!928 = !{i64 4204461}
!929 = !{i64 4204465}
!930 = !{i64 4204466}
!931 = !{i64 4204493}
!932 = !{i64 4204499}
!933 = !{i64 4204501}
!934 = !{i64 4204469}
!935 = !{i64 4204473}
!936 = !{i64 4204478}
!937 = !{i64 4204483}
!938 = !{i64 4204485}
!939 = !{i64 4204486}
!940 = !{i64 4204504}
!941 = !{i64 4204511}
!942 = !{i64 4204520}
!943 = !{i64 4204522}
!944 = !{i64 4204524}
!945 = !{i64 4204530}
!946 = !{i64 4204535}
!947 = !{i64 4204538}
!948 = !{i64 4204542}
!949 = !{i64 4204548}
!950 = !{i64 4204549}
!951 = !{i64 4204555}
!952 = !{i64 4204557}
!953 = !{i64 4204558}
!954 = !{i64 4204563}
!955 = !{i64 4204581}
!956 = !{i64 4204566}
!957 = !{i64 4204568}
!958 = !{i64 4204571}
!959 = !{i64 4204577}
!960 = !{i64 4204579}
!961 = !{i64 4204584}
!962 = !{i64 4204590}
!963 = !{i64 4204592}
!964 = !{i64 4204595}
!965 = !{i64 4204596}
!966 = !{i64 4204600}
!967 = !{i64 4204606}
!968 = !{i64 4204624}
!969 = !{i64 4204628}
!970 = !{i64 4204635}
!971 = !{i64 4204641}
!972 = !{i64 4204646}
!973 = !{i64 4204652}
!974 = !{i64 4204657}
!975 = !{i64 4204663}
!976 = !{i64 4204668}
!977 = !{i64 4204674}
!978 = !{i64 4204679}
!979 = !{i64 4204686}
!980 = !{i64 4204693}
!981 = !{i64 4204695}
!982 = !{i64 4204704}
!983 = !{i64 4204706}
!984 = !{i64 4204708}
!985 = !{i64 4204710}
!986 = !{i64 4204720}
!987 = !{i64 4204725}
!988 = !{i64 4204731}
!989 = !{i64 4204738}
!990 = !{i64 4204740}
!991 = !{i64 4204742}
!992 = !{i64 4204747}
!993 = !{i64 4204752}
!994 = !{i64 4204754}
!995 = !{i64 4204761}
!996 = !{i64 4204766}
!997 = !{i64 4204767}
!998 = !{i64 4204772}
!999 = !{i64 4204777}
!1000 = !{i64 4204782}
!1001 = !{i64 4204788}
!1002 = !{i64 4204794}
!1003 = !{i64 4204799}
!1004 = !{i64 4204801}
!1005 = !{i64 4204803}
!1006 = !{i64 4204808}
!1007 = !{i64 4204813}
!1008 = !{i64 4204818}
!1009 = !{i64 4204820}
!1010 = !{i64 4204822}
!1011 = !{i64 4204825}
!1012 = !{i64 4204830}
!1013 = !{i64 4204831}
!1014 = !{i64 4204838}
!1015 = !{i64 4204839}
!1016 = !{i64 4204844}
!1017 = !{i64 4204850}
!1018 = !{i64 4204856}
!1019 = !{i64 4204857}
!1020 = !{i64 4204859}
!1021 = !{i64 4204864}
!1022 = !{i64 4204869}
!1023 = !{i64 4204871}
!1024 = !{i64 4204877}
!1025 = !{i64 4204879}
!1026 = !{i64 4204887}
!1027 = !{i64 4204890}
!1028 = !{i64 4204894}
!1029 = !{i64 4204899}
!1030 = !{i64 4204902}
!1031 = !{i64 4204910}
!1032 = !{i64 4204912}
!1033 = !{i64 4204918}
!1034 = !{i64 4204920}
!1035 = !{i64 4204922}
!1036 = !{i64 4204928}
!1037 = !{i64 4204938}
!1038 = !{i64 4204945}
!1039 = !{i64 4204947}
!1040 = !{i64 4204966}
!1041 = !{i64 4204976}
!1042 = !{i64 4204983}
!1043 = !{i64 4204993}
!1044 = !{i64 4204997}
!1045 = !{i64 4205000}
!1046 = !{i64 4205003}
!1047 = !{i64 4205008}
!1048 = !{i64 4205009}
!1049 = !{i64 4205018}
!1050 = !{i64 4205020}
!1051 = !{i64 4205022}
!1052 = !{i64 4205023}
!1053 = !{i64 4205029}
!1054 = !{i64 4205031}
!1055 = !{i64 4205035}
!1056 = !{i64 4205038}
!1057 = !{i64 4205041}
!1058 = !{i64 4205047}
!1059 = !{i64 4205049}
!1060 = !{i64 4205056}
!1061 = !{i64 4205058}
!1062 = !{i64 4205060}
!1063 = !{i64 4205061}
!1064 = !{i64 4205067}
!1065 = !{i64 4205069}
!1066 = !{i64 4205071}
!1067 = !{i64 4205073}
!1068 = !{i64 4205078}
!1069 = !{i64 4205079}
!1070 = !{i64 4205086}
!1071 = !{i64 4205091}
!1072 = !{i64 4205093}
!1073 = !{i64 4205098}
!1074 = !{i64 4205099}
!1075 = !{i64 4205100}
!1076 = !{i64 4205102}
!1077 = !{i64 4205112}
!1078 = !{i64 4205117}
!1079 = !{i64 4205119}
!1080 = !{i64 4205121}
!1081 = !{i64 4205123}
!1082 = !{i64 4205125}
!1083 = !{i64 4205130}
!1084 = !{i64 4205132}
!1085 = !{i64 4205134}
!1086 = !{i64 4205150}
!1087 = !{i64 4205205}
!1088 = !{i64 4205208}
!1089 = !{i64 4205220}
!1090 = !{i64 4205221}
!1091 = !{i64 4205223}
!1092 = !{i64 4205228}
!1093 = !{i64 4205229}
!1094 = !{i64 4205243}
!1095 = !{i64 4205248}
!1096 = !{i64 4205253}
!1097 = !{i64 4205260}
!1098 = !{i64 4205263}
!1099 = !{i64 4205265}
!1100 = !{i64 4205269}
!1101 = !{i64 4205272}
!1102 = !{i64 4205274}
!1103 = !{i64 4205278}
!1104 = !{i64 4205281}
!1105 = !{i64 4205283}
!1106 = !{i64 4205285}
!1107 = !{i64 4205290}
!1108 = !{i64 4205293}
!1109 = !{i64 4205295}
!1110 = !{i64 4205298}
!1111 = !{i64 4205301}
!1112 = !{i64 4205303}
!1113 = !{i64 4205305}
!1114 = !{i64 4205308}
!1115 = !{i64 4205310}
!1116 = !{i64 4205316}
!1117 = !{i64 4205321}
!1118 = !{i64 4205322}
!1119 = !{i64 4205327}
!1120 = !{i64 4205329}
!1121 = !{i64 4205331}
!1122 = !{i64 4205342}
!1123 = !{i64 4205355}
!1124 = !{i64 4205361}
!1125 = !{i64 4205345}
!1126 = !{i64 4205349}
!1127 = !{i64 4205366}
!1128 = !{i64 4205367}
!1129 = !{i64 4205370}
!1130 = !{i64 4205371}
!1131 = !{i64 4205374}
!1132 = !{i64 4205378}
!1133 = !{i64 4205380}
!1134 = !{i64 4205387}
!1135 = !{i64 4205392}
!1136 = !{i64 4205397}
!1137 = !{i64 4205399}
!1138 = !{i64 4205401}
!1139 = !{i64 4205404}
!1140 = !{i64 4205405}
!1141 = !{i64 4205410}
!1142 = !{i64 4205412}
!1143 = !{i64 4205416}
!1144 = !{i64 4205422}
!1145 = !{i64 4205424}
!1146 = !{i64 4205427}
!1147 = !{i64 4205428}
!1148 = !{i64 4205431}
!1149 = !{i64 4205438}
!1150 = !{i64 4205440}
!1151 = !{i64 4205443}
!1152 = !{i64 4205448}
!1153 = !{i64 4205452}
!1154 = !{i64 4205455}
!1155 = !{i64 4205450}
!1156 = !{i64 4205457}
!1157 = !{i64 4205462}
!1158 = !{i64 4205466}
!1159 = !{i64 4205468}
!1160 = !{i64 4205464}
!1161 = !{i64 4205475}
!1162 = !{i64 4205481}
!1163 = !{i64 4205483}
!1164 = !{i64 4205490}
!1165 = !{i64 4205496}
!1166 = !{i64 4205498}
!1167 = !{i64 4205500}
!1168 = !{i64 4205502}
!1169 = !{i64 4205507}
!1170 = !{i64 4205513}
!1171 = !{i64 4205519}
!1172 = !{i64 4205525}
!1173 = !{i64 4205531}
!1174 = !{i64 4205537}
!1175 = !{i64 4205543}
!1176 = !{i64 4205550}
!1177 = !{i64 4205554}
!1178 = !{i64 4205557}
!1179 = !{i64 4205562}
!1180 = !{i64 4205563}
!1181 = !{i64 4205570}
!1182 = !{i64 4205575}
!1183 = !{i64 4205584}
!1184 = !{i64 4205591}
!1185 = !{i64 4205593}
!1186 = !{i64 4205598}
!1187 = !{i64 4205608}
!1188 = !{i64 4205615}
!1189 = !{i64 4205622}
!1190 = !{i64 4205624}
!1191 = !{i64 4205632}
!1192 = !{i64 4205636}
!1193 = !{i64 4205643}
!1194 = !{i64 4205645}
!1195 = !{i64 4205647}
!1196 = !{i64 4205651}
!1197 = !{i64 4205653}
!1198 = !{i64 4205660}
!1199 = !{i64 4205662}
!1200 = !{i64 4205686}
!1201 = !{i64 4205693}
!1202 = !{i64 4205695}
!1203 = !{i64 4205698}
!1204 = !{i64 4205710}
!1205 = !{i64 4205711}
!1206 = !{i64 4205714}
!1207 = !{i64 4205719}
!1208 = !{i64 4205721}
!1209 = !{i64 4205723}
!1210 = !{i64 4205727}
!1211 = !{i64 4205736}
!1212 = !{i64 4205739}
!1213 = !{i64 4205740}
!1214 = !{i64 4205743}
!1215 = !{i64 4205750}
!1216 = !{i64 4205752}
!1217 = !{i64 4205756}
!1218 = !{i64 4205761}
!1219 = !{i64 4205769}
!1220 = !{i64 4205775}
!1221 = !{i64 4205776}
!1222 = !{i64 4205779}
!1223 = !{i64 4205780}
!1224 = !{i64 4205783}
!1225 = !{i64 4205793}
!1226 = !{i64 4205795}
!1227 = !{i64 4205800}
!1228 = !{i64 4205807}
!1229 = !{i64 4205812}
!1230 = !{i64 4205813}
!1231 = !{i64 4205820}
!1232 = !{i64 4205824}
!1233 = !{i64 4205831}
!1234 = !{i64 4205836}
!1235 = !{i64 4205843}
!1236 = !{i64 4205845}
!1237 = !{i64 4205846}
!1238 = !{i64 4205854}
!1239 = !{i64 4205863}
!1240 = !{i64 4205874}
!1241 = !{i64 4205881}
!1242 = !{i64 4205888}
!1243 = !{i64 4205889}
!1244 = !{i64 4205900}
!1245 = !{i64 4205906}
!1246 = !{i64 4205908}
!1247 = !{i64 4205913}
!1248 = !{i64 4205890}
!1249 = !{i8 0, i8 9}
!1250 = !{i64 4205915}
!1251 = !{i64 4205920}
!1252 = !{i64 4205992}
!1253 = !{i64 4205993}
!1254 = !{i64 4205999}
!1255 = !{i64 4206002}
!1256 = !{i64 4206010}
!1257 = !{i64 4206018}
!1258 = !{i64 4206029}
!1259 = !{i64 4206044}
!1260 = !{i64 4206049}
!1261 = !{i64 4206059}
!1262 = !{i64 4206069}
!1263 = !{i64 4206085}
!1264 = !{i64 4206101}
!1265 = !{i64 4206107}
!1266 = !{i64 4206117}
!1267 = !{i64 4206123}
!1268 = !{i64 4206132}
!1269 = !{i64 4206138}
!1270 = !{i64 4206139}
!1271 = !{i64 4206145}
!1272 = !{i64 4206149}
!1273 = !{i64 4206156}
!1274 = !{i64 4206162}
!1275 = !{i64 4206172}
!1276 = !{i64 4206186}
!1277 = !{i64 4206192}
!1278 = !{i64 4206203}
!1279 = !{i64 4206215}
!1280 = !{i64 4206230}
!1281 = !{i64 4206239}
!1282 = !{i64 4206245}
!1283 = !{i64 4206252}
!1284 = !{i64 4206261}
!1285 = !{i64 4206264}
!1286 = !{i64 4206267}
!1287 = !{i64 4206270}
!1288 = !{i64 4206273}
!1289 = !{i64 4206274}
!1290 = !{i64 4206292}
!1291 = !{i64 4206296}
!1292 = !{i64 4206298}
!1293 = !{i64 4206294}
!1294 = !{i64 4206300}
!1295 = !{i64 4206307}
!1296 = !{i64 4206309}
!1297 = !{i64 4206318}
!1298 = !{i64 4206320}
!1299 = !{i64 4206322}
!1300 = !{i64 4206327}
!1301 = !{i64 4206330}
!1302 = !{i64 4206332}
!1303 = !{i64 4206338}
!1304 = !{i64 4206341}
!1305 = !{i64 4206348}
!1306 = !{i64 4206351}
!1307 = !{i64 4206355}
!1308 = !{i64 4206361}
!1309 = !{i64 4206367}
!1310 = !{i64 4206373}
!1311 = !{i64 4206374}
!1312 = !{i64 4206376}
!1313 = !{i64 4206389}
!1314 = !{i64 4206397}
!1315 = !{i64 4206399}
!1316 = !{i64 4206401}
!1317 = !{i64 4206404}
!1318 = !{i64 4206409}
!1319 = !{i64 4206415}
!1320 = !{i64 4206421}
!1321 = !{i64 4206427}
!1322 = !{i64 4206430}
!1323 = !{i64 4206433}
!1324 = !{i64 4206436}
!1325 = !{i64 4206441}
!1326 = !{i64 4206444}
!1327 = !{i64 4206447}
!1328 = !{i64 4206450}
!1329 = !{i64 4206453}
!1330 = !{i64 4206459}
!1331 = !{i64 4206462}
!1332 = !{i64 4206468}
!1333 = !{i64 4206474}
!1334 = !{i64 4206475}
!1335 = !{i64 4206487}
!1336 = !{i64 4206493}
!1337 = !{i64 4206495}
!1338 = !{i64 4206500}
!1339 = !{i64 4206504}
!1340 = !{i64 4206525}
!1341 = !{i64 4206636}
!1342 = !{i64 4206663}
!1343 = !{i64 4206674}
!1344 = !{i64 4206691}
!1345 = !{i64 4206707}
!1346 = !{i64 4206723}
!1347 = !{i64 4206733}
!1348 = !{i64 4206739}
!1349 = !{i64 4206741}
!1350 = !{i64 4206749}
!1351 = !{i64 4206754}
!1352 = !{i64 4206757}
!1353 = !{i64 4206758}
!1354 = !{i64 4206763}
!1355 = !{i64 4206765}
!1356 = !{i64 4206771}
!1357 = !{i64 4206773}
!1358 = !{i64 4206780}
!1359 = !{i64 4206783}
!1360 = !{i64 4206785}
!1361 = !{i64 4206788}
!1362 = !{i64 4206790}
!1363 = !{i64 4206796}
!1364 = !{i64 4206803}
!1365 = !{i64 4206807}
!1366 = !{i64 4206809}
!1367 = !{i64 4206813}
!1368 = !{i64 4206815}
!1369 = !{i64 4206822}
!1370 = !{i64 4206826}
!1371 = !{i64 4206827}
!1372 = !{i64 4206829}
!1373 = !{i64 4206835}
!1374 = !{i64 4206841}
!1375 = !{i64 4206850}
!1376 = !{i64 4206852}
!1377 = !{i64 4206858}
!1378 = !{i64 4206860}
!1379 = !{i64 4206864}
!1380 = !{i64 4206866}
!1381 = !{i64 4206902}
!1382 = !{i64 4206905}
!1383 = !{i64 4206910}
!1384 = !{i64 4206912}
!1385 = !{i64 4206915}
!1386 = !{i64 4206920}
!1387 = !{i64 4206922}
!1388 = !{i64 4206927}
!1389 = !{i64 4206928}
!1390 = !{i64 4206935}
!1391 = !{i64 4206979}
!1392 = !{i64 4207023}
!1393 = !{i64 4207029}
!1394 = !{i64 4207044}
!1395 = !{i64 4207048}
!1396 = !{i64 4207050}
!1397 = !{i64 4207051}
!1398 = !{i64 4207052}
!1399 = !{i64 4207053}
!1400 = !{i64 4207061}
!1401 = !{i64 4207063}
!1402 = !{i64 4207067}
!1403 = !{i64 4207086}
!1404 = !{i64 4207092}
!1405 = !{i64 4207100}
!1406 = !{i64 4207102}
!1407 = !{i64 4207110}
!1408 = !{i64 4207129}
!1409 = !{i64 4207139}
!1410 = !{i64 4207140}
!1411 = !{i64 4207143}
!1412 = !{i64 4207153}
!1413 = !{i64 4207162}
!1414 = !{i64 4207168}
!1415 = !{i64 4207170}
!1416 = !{i64 4207191}
!1417 = !{i64 4207218}
!1418 = !{i64 4207227}
!1419 = !{i64 4207238}
!1420 = !{i64 4207250}
!1421 = !{i64 4207266}
!1422 = !{i64 4207268}
!1423 = !{i64 4207277}
!1424 = !{i64 4207282}
!1425 = !{i64 4207322}
!1426 = !{i64 4207327}
!1427 = !{i64 4207329}
!1428 = !{i64 4207335}
!1429 = !{i64 4207338}
!1430 = !{i64 4207344}
!1431 = !{i64 4207346}
!1432 = !{i64 4207364}
!1433 = !{i64 4207369}
!1434 = !{i64 4207394}
!1435 = !{i64 4207400}
!1436 = !{i64 4207402}
!1437 = !{i64 4207405}
!1438 = !{i64 4207411}
!1439 = !{i64 4207416}
!1440 = !{i64 4207421}
!1441 = !{i64 4207424}
!1442 = !{i64 4207434}
!1443 = !{i64 4207439}
!1444 = !{i64 4207445}
!1445 = !{i64 4207451}
!1446 = !{i64 4207454}
!1447 = !{i64 4207464}
!1448 = !{i64 4207475}
!1449 = !{i64 4207487}
!1450 = !{i64 4207604}
!1451 = !{i64 4207607}
!1452 = !{i64 4207613}
!1453 = !{i64 4207616}
!1454 = !{i64 4207617}
!1455 = !{i64 4207623}
!1456 = !{i64 4207629}
!1457 = !{i64 4207635}
!1458 = !{i64 4207641}
!1459 = !{i64 4207647}
!1460 = !{i64 4207653}
!1461 = !{i64 4207659}
!1462 = !{i64 4207665}
!1463 = !{i64 4207671}
!1464 = !{i64 4207677}
!1465 = !{i64 4207683}
!1466 = !{i64 4207689}
!1467 = !{i64 4207695}
!1468 = !{i64 4207701}
!1469 = !{i64 4207707}
!1470 = !{i64 4207713}
!1471 = !{i64 4207719}
!1472 = !{i64 4207725}
!1473 = !{i64 4207731}
!1474 = !{i64 4207737}
!1475 = !{i64 4207743}
!1476 = !{i64 4207749}
!1477 = !{i64 4207755}
!1478 = !{i64 4207761}
!1479 = !{i64 4207767}
!1480 = !{i64 4207773}
!1481 = !{i64 4207779}
!1482 = !{i64 4207785}
!1483 = !{i64 4207791}
!1484 = !{i64 4207797}
!1485 = !{i64 4207803}
!1486 = !{i64 4207809}
!1487 = !{i64 4207815}
!1488 = !{i64 4207821}
!1489 = !{i64 4207825}
!1490 = !{i64 4207832}
!1491 = !{i64 4207834}
!1492 = !{i64 4207843}
!1493 = !{i64 4207850}
!1494 = !{i64 4207841}
!1495 = !{i64 4207852}
!1496 = !{i64 4207859}
!1497 = !{i64 4207862}
!1498 = !{i64 4207864}
!1499 = !{i64 4207866}
!1500 = !{i64 4207871}
!1501 = !{i64 4207879}
!1502 = !{i64 4207880}
!1503 = !{i64 4207885}
!1504 = !{i64 4207887}
!1505 = !{i64 4207892}
!1506 = !{i64 4207901}
!1507 = !{i64 4207906}
!1508 = !{i64 4207915}
!1509 = !{i64 4207920}
!1510 = !{i64 4207941}
!1511 = !{i64 4207947}
!1512 = !{i64 4207968}
!1513 = !{i64 4207971}
!1514 = !{i64 4207974}
!1515 = !{i64 4207980}
!1516 = !{i64 4207987}
!1517 = !{i64 4207992}
!1518 = !{i64 4208012}
!1519 = !{i64 4208022}
!1520 = !{i64 4208035}
!1521 = !{i64 4208059}
!1522 = !{i64 4208069}
!1523 = !{i64 4208083}
!1524 = !{i64 4208091}
!1525 = !{i64 4208115}
!1526 = !{i64 4208125}
!1527 = !{i64 4208158}
!1528 = !{i64 4208168}
!1529 = !{i64 4208190}
!1530 = !{i64 4208200}
!1531 = !{i64 4208214}
!1532 = !{i64 4208225}
!1533 = !{i64 4208236}
!1534 = !{i64 4208247}
!1535 = !{i64 4208258}
!1536 = !{i64 4208285}
!1537 = !{i64 4208295}
!1538 = !{i64 4208305}
!1539 = !{i64 4208323}
!1540 = !{i64 4208332}
!1541 = !{i64 4208356}
!1542 = !{i64 4208366}
!1543 = !{i64 4208376}
!1544 = !{i64 4208387}
!1545 = !{i64 4208395}
!1546 = !{i64 4208403}
!1547 = !{i64 4208427}
!1548 = !{i64 4208437}
!1549 = !{i64 4208462}
!1550 = !{i64 4208472}
!1551 = !{i64 4208482}

